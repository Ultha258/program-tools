/* eslint-disable */
/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */
import { HTMLStencilElement, JSXBase } from "@stencil/core/internal";
import { Spacing } from "./global/mixins";
import { DemoData } from "./global/demo";
import { AccountDetailsViewProps } from "./components/sqp-account-details/sqp-account-details-view";
import { AccountFormViewProps } from "./components/sqp-account-details/sqp-account-form-view";
import { FunctionalComponent } from "@stencil/core";
export namespace Components {
    interface SqmTitledSection {
        /**
          * Text value shown when there is no label slot declared.
          * @uiName Label
         */
        "label": string;
        /**
          * Margin applied to the bottom of the label slot
          * @uiName Label Bottom Margin
          * @uiType string
          * @uiEnum ["none", "xxx-small", "xx-small", "x-small", "small", "medium", "large", "x-large", "xx-large", "xxx-large", "xxxx-large"]
          * @uiEnumNames ["None", "XXX-Small", "XX-Small", "X-Small", "Small", "Medium", "Large", "X-Large", "XX-Large", "XXX-Large", "XXXX-Large"]
         */
        "labelMargin": Spacing;
        /**
          * Padding applied to all 4 sides of the container
          * @uiName Section Padding
          * @uiType string
          * @uiEnum ["none", "xxx-small", "xx-small", "x-small", "small", "medium", "large", "x-large", "xx-large", "xxx-large", "xxxx-large"]
          * @uiEnumNames ["None", "XXX-Small", "XX-Small", "X-Small", "Small", "Medium", "Large", "X-Large", "XX-Large", "XXX-Large", "XXXX-Large"]
         */
        "padding": Spacing;
        /**
          * @uiName Text Alignment
          * @uiType string
          * @uiEnum ["left", "center", "right"]
          * @uiEnumNames ["Left", "Center", "Right"]
         */
        "textAlign": "left" | "center" | "right";
    }
    interface SqpAccountDetails {
        /**
          * @uiName Cancel button label
          * @uiGroup Account settings modal
         */
        "cancelText": string;
        /**
          * Label for the input shown when a participant is connecting their account.
          * @uiName Confirm email label
          * @uiGroup Account settings modal
         */
        "confirmPayPalEmailLabel": string;
        /**
          * @uiName Change account button label
          * @uiGroup Account settings modal
         */
        "connectAccountModalButtonText": string;
        /**
          * Header for the section in the modal that allows a participant to change their connected PayPal account.
          * @uiName Edit account header
          * @uiGroup Account settings modal
         */
        "connectAccountModalHeaderText": string;
        /**
          * @uiName Connect button label
          * @uiGroup Account not connected
         */
        "connectPayPalAccountButtonText": string;
        /**
          * Let your participants know they need to connect their PayPal account to receive payouts.
          * @uiName Subheader text
          * @uiGroup Account not connected
          * @uiWidget textArea
         */
        "connectPayPalDescriptionText": string;
        /**
          * @undocumented 
          * @uiType object
         */
        "demoData"?: DemoData<AccountDetailsViewProps & AccountFormViewProps>;
        /**
          * @uiName Payout details label
         */
        "detailsHeaderText": string;
        /**
          * @uiName Disconnect account button label
          * @uiGroup Account settings modal
         */
        "disconnectAccountButtonText": string;
        /**
          * Description for the section in the modal that allows a participant to disconnect their PayPal account.
          * @uiName Disconnect account description
          * @uiGroup Account settings modal
          * @uiWidget textArea
         */
        "disconnectAccountDescriptionText": string;
        /**
          * Header for the section in the modal that allows a participant to disconnect their PayPal account.
          * @uiName Disconnect account header
          * @uiGroup Account settings modal
         */
        "disconnectAccountHeaderText": string;
        /**
          * Allows a participant to edit their account connection.
          * @uiName Edit button label
          * @uiGroup Account connected
         */
        "editText": string;
        /**
          * @uiName Header
          * @uiGroup Account connected
         */
        "headerText": string;
        /**
          * @undocumented
         */
        "integrationDisabled": boolean;
        /**
          * @uiName Integration disabled alert header
          * @uiGroup Integration disabled alert
          * @uiWidget textArea
         */
        "integrationDisabledHeader": string;
        /**
          * @uiName Integration disabled alert description
          * @uiGroup Integration disabled alert
          * @uiWidget textArea
         */
        "integrationDisabledText": string;
        /**
          * @undocumented
         */
        "integrationDomain": string;
        /**
          * @undocumented
         */
        "integrationPaused": boolean;
        /**
          * @uiName Integration paused alert header
          * @uiGroup Integration disabled alert
          * @uiWidget textArea
         */
        "integrationPausedHeader": string;
        /**
          * @uiName Integration paused alert description
          * @uiGroup Integration disabled alert
          * @uiWidget textArea
         */
        "integrationPausedText": string;
        /**
          * Header for the modal shown when a participant is connecting their acccount.
          * @uiName Connect account header
          * @uiGroup Account settings modal
         */
        "modalConnectPayPalAccountHeader": string;
        /**
          * Badge label on a payout card to indicate that this is their next scheduled payout.
          * @uiName Next payout badge
          * @uiGroup Account connected
         */
        "nextPayoutLabel": string;
        /**
          * Text on payout card to indicate that this has rewards with multiple currencies.
          * @uiName Other currencies label
          * @uiGroup Account connected
         */
        "otherCurrenciesLabel": string;
        /**
          * @uiName Header
          * @uiGroup Account not connected
         */
        "payPalAccountHeaderText": string;
        /**
          * Label for the input shown when a participant is connecting their account.
          * @uiName PayPal email label
          * @uiGroup Account settings modal
         */
        "payPalEmailLabel": string;
        /**
          * Shown under the PayPal email input field.
          * @uiName Email help text
          * @uiGroup Account settings modal
          * @uiWidget textArea
         */
        "payPalEmailLabelHelpText": string;
        /**
          * @uiName Pending reward label
          * @uiGroup Account connected
         */
        "pendingDetailedStatusText": string;
        /**
          * @uiName Pending label
          * @uiGroup Account connected
         */
        "pendingLabel": string;
        /**
          * @uiName Scheduled payout(s) label
         */
        "scheduleHeaderText": string;
        /**
          * @uiName Submit button label
          * @uiGroup Account settings modal
         */
        "submitPayPalAccountButtonText": string;
        /**
          * Alert message shown when a participant successfully connects, changes, or disconnects their PayPal account.
          * @uiName Success message
          * @uiGroup Account settings modal
         */
        "successMessage": string;
        /**
          * Badge label on a payout card to indicate that this is scheduled after their next payout.
          * @uiName Upcoming payout badge
          * @uiGroup Account connected
         */
        "upcomingPaymentLabel": string;
        /**
          * Text on a payout card to indicate that this reward is pending due to tax reasons.
          * @uiName W9 tax label
          * @uiGroup Account connected
         */
        "w9TaxLabel": string;
    }
    interface SqpGraphqlClientProvider {
        /**
          * @uiName Domain
         */
        "domain": string;
    }
    interface SqpHookStoryContainer {
        "hookStory": FunctionalComponent;
    }
    interface SqpPaypalDetails {
        /**
          * @undocumented
         */
        "connectPayPalAccountButtonText": string;
        /**
          * @undocumented
         */
        "connectPayPalDescriptionText": string;
        /**
          * @undocumented
         */
        "detailsHeaderText": string;
        /**
          * @undocumented
         */
        "editText": string;
        /**
          * @undocumented
         */
        "hasAccount": boolean;
        /**
          * @undocumented
         */
        "integrationDisabled": boolean;
        /**
          * @undocumented
         */
        "integrationDisabledHeader": string;
        /**
          * @undocumented
         */
        "integrationDisabledText": string;
        /**
          * @undocumented
         */
        "integrationPaused": boolean;
        /**
          * @undocumented
         */
        "integrationPausedHeader": string;
        /**
          * @undocumented
         */
        "integrationPausedText": string;
        /**
          * @undocumented
         */
        "loading": boolean;
        /**
          * @undocumented
         */
        "nextPayoutLabel": string;
        /**
          * @undocumented
         */
        "otherCurrenciesLabel": string;
        /**
          * @undocumented
         */
        "payPalAccountHeaderText": string;
        /**
          * @undocumented
         */
        "pendingDetailedStatusText": string;
        /**
          * @undocumented
         */
        "pendingLabel": string;
        /**
          * @undocumented
         */
        "scheduleHeaderText": string;
        /**
          * @undocumented
         */
        "setOpen": (open: boolean) => void;
        /**
          * @undocumented
         */
        "upcomingPaymentLabel": string;
        /**
          * @undocumented
         */
        "w9TaxLabel": string;
    }
    interface SqpRewardsCell {
        "baseUnits": string[];
        "expiringText": string;
        "fuelTankText": string;
        "hideDetails": boolean;
        "locale": string;
        "pendingForText": string;
        "rewardDeniedText": string;
        "rewardPaidOutText": string;
        "rewardPayoutFailedText": string;
        "rewardPayoutInProgressText": string;
        "rewardReceivedText": string;
        "rewards": Reward[];
        "statusLongText": string;
        "statusText": string;
    }
    interface SqpRewardsColumn {
        /**
          * @uiName Column title
         */
        "columnTitle": string;
        /**
          * Shown in the dropdown details when a reward has an expiry date.
          * @uiName Reward expiring text
         */
        "expiringText": string;
        /**
          * Shown in the dropdown details when a reward has an associated fuel tank code.
          * @uiName Fuel tank code text
         */
        "fuelTankText": string;
        /**
          * @uiName Hide dropdown details of reward
          * @default
         */
        "hideDetails": boolean;
        /**
          * @undocumented
         */
        "integrationDomain": string;
        /**
          * Shown in the dropdown details when a reward is pending.
          * @uiName Reward pending text
         */
        "pendingForText": string;
        "renderCell": (data: Referral, locale: string, mintRenderer: any) => Promise<any>;
        "renderLabel": () => Promise<string>;
        "renderReferrerCell": (data: Referrer, mintRenderer: any) => Promise<any>;
        /**
          * Shown in the dropdown details when a reward was blocked during payout.
          * @uiName Reward blocked text
         */
        "rewardBlockedText": string;
        /**
          * Shown in the dropdown details when a reward was denied during payout.
          * @uiName Reward denied text
         */
        "rewardDeniedText": string;
        /**
          * Shown in the dropdown details when a reward was placed on hold during payout.
          * @uiName Reward on hold text
         */
        "rewardOnHoldText": string;
        /**
          * Shown in the dropdown details when a reward has been paid out.
          * @uiName Reward paid out text
         */
        "rewardPaidOutText": string;
        /**
          * Shown in the dropdown details when a reward payout has failed.
          * @uiName Reward payout failed text
         */
        "rewardPayoutFailedText": string;
        /**
          * Shown in the dropdown details when a reward is being paid out.
          * @uiName Reward payout in progress text
         */
        "rewardPayoutInProgressText": string;
        /**
          * Shown in the dropdown details when a reward has been received.
          * @uiName Reward received text
         */
        "rewardReceivedText": string;
        /**
          * Shown in the dropdown details when a reward was refunded after payout.
          * @uiName Reward refunded text
         */
        "rewardRefundedText": string;
        /**
          * Shown in the dropdown details when a reward was returned after payout.
          * @uiName Reward returned text
         */
        "rewardReturnedText": string;
        /**
          * Shown in the dropdown details when a rewards payout was reversed.
          * @uiName Reward reversed text
         */
        "rewardReversedText": string;
        /**
          * Shown in the dropdown details when a reward was paid out but is unclaimed.
          * @uiName Reward unclaimed text
         */
        "rewardUnclaimedText": string;
        /**
          * Additional status text shown in the details drop down.
          * @uiName Reward status long text
          * @uiWidget textArea
         */
        "statusLongText": string;
        /**
          * Define the text shown in the reward status badge.
          * @uiName Reward status text
          * @uiWidget textArea
         */
        "statusText": string;
    }
    interface SqpStatusCell {
        "baseUnits": string[];
        "expiryText": string;
        "locale": string;
        "pendingScheduled": string;
        "pendingUnhandled": string;
        "pendingUsTax": string;
        "reward": Reward;
        "rewardBlockedText": string;
        "rewardDeniedText": string;
        "rewardOnHoldText": string;
        "rewardPaidOutText": string;
        "rewardPayoutFailedText": string;
        "rewardPayoutInProgressText": string;
        "rewardRefundedText": string;
        "rewardReturnedText": string;
        "rewardReversedText": string;
        "rewardUnclaimedText": string;
        "statusText": string;
    }
    interface SqpStatusColumn {
        /**
          * @uiName Column title
         */
        "columnTitle": string;
        /**
          * Text shown before the date of an expiring reward. Example: Expires on {date}.
          * @uiName Expiry date prefix
         */
        "expiryText": string;
        /**
          * @undocumented
         */
        "integrationDomain": string;
        /**
          * Text shown before the available date of a pending reward. Example: Pending until {date}.
          * @uiName Pending date prefix
         */
        "pendingScheduled": string;
        /**
          * Shown below the status when a fulfillment error occured when creating a reward.
          * @uiName Unhandled error text
         */
        "pendingUnhandled": string;
        /**
          * Shown below the status when a reward is pending due to W-9 compliance.
          * @uiName W-9 pending text
         */
        "pendingUsTax": string;
        "renderCell": (data: Reward, locale: string, mintRenderer: any) => Promise<any>;
        "renderLabel": () => Promise<string>;
        /**
          * Shown below the status when a reward was blocked during payout.
          * @uiName Reward blocked text
         */
        "rewardBlockedText": string;
        /**
          * Shown below the status pill when a reward was denied during payout.
          * @uiName Reward denied text
         */
        "rewardDeniedText": string;
        /**
          * Shown below the status when a reward was placed on hold during payout.
          * @uiName Reward on hold text
         */
        "rewardOnHoldText": string;
        /**
          * Shown below the status pill when a reward has been paid out.
          * @uiName Reward paid out text
         */
        "rewardPaidOutText": string;
        /**
          * Shown below the status when a reward has failed.
          * @uiName Reward payout failed text
         */
        "rewardPayoutFailedText": string;
        /**
          * Shown below the status when a reward is being paid out.
          * @uiName Reward payout in progress text
         */
        "rewardPayoutInProgressText": string;
        /**
          * Shown below the status pill when a reward was refunded after payout.
          * @uiName Reward refunded text
         */
        "rewardRefundedText": string;
        /**
          * Shown below the status pill when a reward was returned after payout.
          * @uiName Reward returned text
         */
        "rewardReturnedText": string;
        /**
          * Shown below the status pill when a rewards payout was reversed.
          * @uiName Reward reversed text
         */
        "rewardReversedText": string;
        /**
          * Shown below the status pill when a reward was paid out but is unclaimed.
          * @uiName Reward unclaimed text
         */
        "rewardUnclaimedText": string;
        /**
          * Define the text shown in the reward status badge.
          * @uiName Reward status text
          * @uiWidget textArea
         */
        "statusText": string;
    }
    interface SqpStencilbook {
    }
}
declare global {
    interface HTMLSqmTitledSectionElement extends Components.SqmTitledSection, HTMLStencilElement {
    }
    var HTMLSqmTitledSectionElement: {
        prototype: HTMLSqmTitledSectionElement;
        new (): HTMLSqmTitledSectionElement;
    };
    interface HTMLSqpAccountDetailsElement extends Components.SqpAccountDetails, HTMLStencilElement {
    }
    var HTMLSqpAccountDetailsElement: {
        prototype: HTMLSqpAccountDetailsElement;
        new (): HTMLSqpAccountDetailsElement;
    };
    interface HTMLSqpGraphqlClientProviderElement extends Components.SqpGraphqlClientProvider, HTMLStencilElement {
    }
    var HTMLSqpGraphqlClientProviderElement: {
        prototype: HTMLSqpGraphqlClientProviderElement;
        new (): HTMLSqpGraphqlClientProviderElement;
    };
    interface HTMLSqpHookStoryContainerElement extends Components.SqpHookStoryContainer, HTMLStencilElement {
    }
    var HTMLSqpHookStoryContainerElement: {
        prototype: HTMLSqpHookStoryContainerElement;
        new (): HTMLSqpHookStoryContainerElement;
    };
    interface HTMLSqpPaypalDetailsElement extends Components.SqpPaypalDetails, HTMLStencilElement {
    }
    var HTMLSqpPaypalDetailsElement: {
        prototype: HTMLSqpPaypalDetailsElement;
        new (): HTMLSqpPaypalDetailsElement;
    };
    interface HTMLSqpRewardsCellElement extends Components.SqpRewardsCell, HTMLStencilElement {
    }
    var HTMLSqpRewardsCellElement: {
        prototype: HTMLSqpRewardsCellElement;
        new (): HTMLSqpRewardsCellElement;
    };
    interface HTMLSqpRewardsColumnElement extends Components.SqpRewardsColumn, HTMLStencilElement {
    }
    var HTMLSqpRewardsColumnElement: {
        prototype: HTMLSqpRewardsColumnElement;
        new (): HTMLSqpRewardsColumnElement;
    };
    interface HTMLSqpStatusCellElement extends Components.SqpStatusCell, HTMLStencilElement {
    }
    var HTMLSqpStatusCellElement: {
        prototype: HTMLSqpStatusCellElement;
        new (): HTMLSqpStatusCellElement;
    };
    interface HTMLSqpStatusColumnElement extends Components.SqpStatusColumn, HTMLStencilElement {
    }
    var HTMLSqpStatusColumnElement: {
        prototype: HTMLSqpStatusColumnElement;
        new (): HTMLSqpStatusColumnElement;
    };
    interface HTMLSqpStencilbookElement extends Components.SqpStencilbook, HTMLStencilElement {
    }
    var HTMLSqpStencilbookElement: {
        prototype: HTMLSqpStencilbookElement;
        new (): HTMLSqpStencilbookElement;
    };
    interface HTMLElementTagNameMap {
        "sqm-titled-section": HTMLSqmTitledSectionElement;
        "sqp-account-details": HTMLSqpAccountDetailsElement;
        "sqp-graphql-client-provider": HTMLSqpGraphqlClientProviderElement;
        "sqp-hook-story-container": HTMLSqpHookStoryContainerElement;
        "sqp-paypal-details": HTMLSqpPaypalDetailsElement;
        "sqp-rewards-cell": HTMLSqpRewardsCellElement;
        "sqp-rewards-column": HTMLSqpRewardsColumnElement;
        "sqp-status-cell": HTMLSqpStatusCellElement;
        "sqp-status-column": HTMLSqpStatusColumnElement;
        "sqp-stencilbook": HTMLSqpStencilbookElement;
    }
}
declare namespace LocalJSX {
    interface SqmTitledSection {
        /**
          * Text value shown when there is no label slot declared.
          * @uiName Label
         */
        "label"?: string;
        /**
          * Margin applied to the bottom of the label slot
          * @uiName Label Bottom Margin
          * @uiType string
          * @uiEnum ["none", "xxx-small", "xx-small", "x-small", "small", "medium", "large", "x-large", "xx-large", "xxx-large", "xxxx-large"]
          * @uiEnumNames ["None", "XXX-Small", "XX-Small", "X-Small", "Small", "Medium", "Large", "X-Large", "XX-Large", "XXX-Large", "XXXX-Large"]
         */
        "labelMargin"?: Spacing;
        /**
          * Padding applied to all 4 sides of the container
          * @uiName Section Padding
          * @uiType string
          * @uiEnum ["none", "xxx-small", "xx-small", "x-small", "small", "medium", "large", "x-large", "xx-large", "xxx-large", "xxxx-large"]
          * @uiEnumNames ["None", "XXX-Small", "XX-Small", "X-Small", "Small", "Medium", "Large", "X-Large", "XX-Large", "XXX-Large", "XXXX-Large"]
         */
        "padding"?: Spacing;
        /**
          * @uiName Text Alignment
          * @uiType string
          * @uiEnum ["left", "center", "right"]
          * @uiEnumNames ["Left", "Center", "Right"]
         */
        "textAlign"?: "left" | "center" | "right";
    }
    interface SqpAccountDetails {
        /**
          * @uiName Cancel button label
          * @uiGroup Account settings modal
         */
        "cancelText"?: string;
        /**
          * Label for the input shown when a participant is connecting their account.
          * @uiName Confirm email label
          * @uiGroup Account settings modal
         */
        "confirmPayPalEmailLabel"?: string;
        /**
          * @uiName Change account button label
          * @uiGroup Account settings modal
         */
        "connectAccountModalButtonText"?: string;
        /**
          * Header for the section in the modal that allows a participant to change their connected PayPal account.
          * @uiName Edit account header
          * @uiGroup Account settings modal
         */
        "connectAccountModalHeaderText"?: string;
        /**
          * @uiName Connect button label
          * @uiGroup Account not connected
         */
        "connectPayPalAccountButtonText"?: string;
        /**
          * Let your participants know they need to connect their PayPal account to receive payouts.
          * @uiName Subheader text
          * @uiGroup Account not connected
          * @uiWidget textArea
         */
        "connectPayPalDescriptionText"?: string;
        /**
          * @undocumented 
          * @uiType object
         */
        "demoData"?: DemoData<AccountDetailsViewProps & AccountFormViewProps>;
        /**
          * @uiName Payout details label
         */
        "detailsHeaderText"?: string;
        /**
          * @uiName Disconnect account button label
          * @uiGroup Account settings modal
         */
        "disconnectAccountButtonText"?: string;
        /**
          * Description for the section in the modal that allows a participant to disconnect their PayPal account.
          * @uiName Disconnect account description
          * @uiGroup Account settings modal
          * @uiWidget textArea
         */
        "disconnectAccountDescriptionText"?: string;
        /**
          * Header for the section in the modal that allows a participant to disconnect their PayPal account.
          * @uiName Disconnect account header
          * @uiGroup Account settings modal
         */
        "disconnectAccountHeaderText"?: string;
        /**
          * Allows a participant to edit their account connection.
          * @uiName Edit button label
          * @uiGroup Account connected
         */
        "editText"?: string;
        /**
          * @uiName Header
          * @uiGroup Account connected
         */
        "headerText"?: string;
        /**
          * @undocumented
         */
        "integrationDisabled"?: boolean;
        /**
          * @uiName Integration disabled alert header
          * @uiGroup Integration disabled alert
          * @uiWidget textArea
         */
        "integrationDisabledHeader"?: string;
        /**
          * @uiName Integration disabled alert description
          * @uiGroup Integration disabled alert
          * @uiWidget textArea
         */
        "integrationDisabledText"?: string;
        /**
          * @undocumented
         */
        "integrationDomain"?: string;
        /**
          * @undocumented
         */
        "integrationPaused"?: boolean;
        /**
          * @uiName Integration paused alert header
          * @uiGroup Integration disabled alert
          * @uiWidget textArea
         */
        "integrationPausedHeader"?: string;
        /**
          * @uiName Integration paused alert description
          * @uiGroup Integration disabled alert
          * @uiWidget textArea
         */
        "integrationPausedText"?: string;
        /**
          * Header for the modal shown when a participant is connecting their acccount.
          * @uiName Connect account header
          * @uiGroup Account settings modal
         */
        "modalConnectPayPalAccountHeader"?: string;
        /**
          * Badge label on a payout card to indicate that this is their next scheduled payout.
          * @uiName Next payout badge
          * @uiGroup Account connected
         */
        "nextPayoutLabel"?: string;
        /**
          * Text on payout card to indicate that this has rewards with multiple currencies.
          * @uiName Other currencies label
          * @uiGroup Account connected
         */
        "otherCurrenciesLabel"?: string;
        /**
          * @uiName Header
          * @uiGroup Account not connected
         */
        "payPalAccountHeaderText"?: string;
        /**
          * Label for the input shown when a participant is connecting their account.
          * @uiName PayPal email label
          * @uiGroup Account settings modal
         */
        "payPalEmailLabel"?: string;
        /**
          * Shown under the PayPal email input field.
          * @uiName Email help text
          * @uiGroup Account settings modal
          * @uiWidget textArea
         */
        "payPalEmailLabelHelpText"?: string;
        /**
          * @uiName Pending reward label
          * @uiGroup Account connected
         */
        "pendingDetailedStatusText"?: string;
        /**
          * @uiName Pending label
          * @uiGroup Account connected
         */
        "pendingLabel"?: string;
        /**
          * @uiName Scheduled payout(s) label
         */
        "scheduleHeaderText"?: string;
        /**
          * @uiName Submit button label
          * @uiGroup Account settings modal
         */
        "submitPayPalAccountButtonText"?: string;
        /**
          * Alert message shown when a participant successfully connects, changes, or disconnects their PayPal account.
          * @uiName Success message
          * @uiGroup Account settings modal
         */
        "successMessage"?: string;
        /**
          * Badge label on a payout card to indicate that this is scheduled after their next payout.
          * @uiName Upcoming payout badge
          * @uiGroup Account connected
         */
        "upcomingPaymentLabel"?: string;
        /**
          * Text on a payout card to indicate that this reward is pending due to tax reasons.
          * @uiName W9 tax label
          * @uiGroup Account connected
         */
        "w9TaxLabel"?: string;
    }
    interface SqpGraphqlClientProvider {
        /**
          * @uiName Domain
         */
        "domain"?: string;
    }
    interface SqpHookStoryContainer {
        "hookStory"?: FunctionalComponent;
    }
    interface SqpPaypalDetails {
        /**
          * @undocumented
         */
        "connectPayPalAccountButtonText"?: string;
        /**
          * @undocumented
         */
        "connectPayPalDescriptionText"?: string;
        /**
          * @undocumented
         */
        "detailsHeaderText"?: string;
        /**
          * @undocumented
         */
        "editText"?: string;
        /**
          * @undocumented
         */
        "hasAccount"?: boolean;
        /**
          * @undocumented
         */
        "integrationDisabled"?: boolean;
        /**
          * @undocumented
         */
        "integrationDisabledHeader"?: string;
        /**
          * @undocumented
         */
        "integrationDisabledText"?: string;
        /**
          * @undocumented
         */
        "integrationPaused"?: boolean;
        /**
          * @undocumented
         */
        "integrationPausedHeader"?: string;
        /**
          * @undocumented
         */
        "integrationPausedText"?: string;
        /**
          * @undocumented
         */
        "loading"?: boolean;
        /**
          * @undocumented
         */
        "nextPayoutLabel"?: string;
        /**
          * @undocumented
         */
        "otherCurrenciesLabel"?: string;
        /**
          * @undocumented
         */
        "payPalAccountHeaderText"?: string;
        /**
          * @undocumented
         */
        "pendingDetailedStatusText"?: string;
        /**
          * @undocumented
         */
        "pendingLabel"?: string;
        /**
          * @undocumented
         */
        "scheduleHeaderText"?: string;
        /**
          * @undocumented
         */
        "setOpen"?: (open: boolean) => void;
        /**
          * @undocumented
         */
        "upcomingPaymentLabel"?: string;
        /**
          * @undocumented
         */
        "w9TaxLabel"?: string;
    }
    interface SqpRewardsCell {
        "baseUnits"?: string[];
        "expiringText"?: string;
        "fuelTankText"?: string;
        "hideDetails"?: boolean;
        "locale"?: string;
        "pendingForText"?: string;
        "rewardDeniedText"?: string;
        "rewardPaidOutText"?: string;
        "rewardPayoutFailedText"?: string;
        "rewardPayoutInProgressText"?: string;
        "rewardReceivedText"?: string;
        "rewards"?: Reward[];
        "statusLongText"?: string;
        "statusText"?: string;
    }
    interface SqpRewardsColumn {
        /**
          * @uiName Column title
         */
        "columnTitle"?: string;
        /**
          * Shown in the dropdown details when a reward has an expiry date.
          * @uiName Reward expiring text
         */
        "expiringText"?: string;
        /**
          * Shown in the dropdown details when a reward has an associated fuel tank code.
          * @uiName Fuel tank code text
         */
        "fuelTankText"?: string;
        /**
          * @uiName Hide dropdown details of reward
          * @default
         */
        "hideDetails"?: boolean;
        /**
          * @undocumented
         */
        "integrationDomain"?: string;
        /**
          * Shown in the dropdown details when a reward is pending.
          * @uiName Reward pending text
         */
        "pendingForText"?: string;
        /**
          * Shown in the dropdown details when a reward was blocked during payout.
          * @uiName Reward blocked text
         */
        "rewardBlockedText"?: string;
        /**
          * Shown in the dropdown details when a reward was denied during payout.
          * @uiName Reward denied text
         */
        "rewardDeniedText"?: string;
        /**
          * Shown in the dropdown details when a reward was placed on hold during payout.
          * @uiName Reward on hold text
         */
        "rewardOnHoldText"?: string;
        /**
          * Shown in the dropdown details when a reward has been paid out.
          * @uiName Reward paid out text
         */
        "rewardPaidOutText"?: string;
        /**
          * Shown in the dropdown details when a reward payout has failed.
          * @uiName Reward payout failed text
         */
        "rewardPayoutFailedText"?: string;
        /**
          * Shown in the dropdown details when a reward is being paid out.
          * @uiName Reward payout in progress text
         */
        "rewardPayoutInProgressText"?: string;
        /**
          * Shown in the dropdown details when a reward has been received.
          * @uiName Reward received text
         */
        "rewardReceivedText"?: string;
        /**
          * Shown in the dropdown details when a reward was refunded after payout.
          * @uiName Reward refunded text
         */
        "rewardRefundedText"?: string;
        /**
          * Shown in the dropdown details when a reward was returned after payout.
          * @uiName Reward returned text
         */
        "rewardReturnedText"?: string;
        /**
          * Shown in the dropdown details when a rewards payout was reversed.
          * @uiName Reward reversed text
         */
        "rewardReversedText"?: string;
        /**
          * Shown in the dropdown details when a reward was paid out but is unclaimed.
          * @uiName Reward unclaimed text
         */
        "rewardUnclaimedText"?: string;
        /**
          * Additional status text shown in the details drop down.
          * @uiName Reward status long text
          * @uiWidget textArea
         */
        "statusLongText"?: string;
        /**
          * Define the text shown in the reward status badge.
          * @uiName Reward status text
          * @uiWidget textArea
         */
        "statusText"?: string;
    }
    interface SqpStatusCell {
        "baseUnits"?: string[];
        "expiryText"?: string;
        "locale"?: string;
        "pendingScheduled"?: string;
        "pendingUnhandled"?: string;
        "pendingUsTax"?: string;
        "reward"?: Reward;
        "rewardBlockedText"?: string;
        "rewardDeniedText"?: string;
        "rewardOnHoldText"?: string;
        "rewardPaidOutText"?: string;
        "rewardPayoutFailedText"?: string;
        "rewardPayoutInProgressText"?: string;
        "rewardRefundedText"?: string;
        "rewardReturnedText"?: string;
        "rewardReversedText"?: string;
        "rewardUnclaimedText"?: string;
        "statusText"?: string;
    }
    interface SqpStatusColumn {
        /**
          * @uiName Column title
         */
        "columnTitle"?: string;
        /**
          * Text shown before the date of an expiring reward. Example: Expires on {date}.
          * @uiName Expiry date prefix
         */
        "expiryText"?: string;
        /**
          * @undocumented
         */
        "integrationDomain"?: string;
        /**
          * Text shown before the available date of a pending reward. Example: Pending until {date}.
          * @uiName Pending date prefix
         */
        "pendingScheduled"?: string;
        /**
          * Shown below the status when a fulfillment error occured when creating a reward.
          * @uiName Unhandled error text
         */
        "pendingUnhandled"?: string;
        /**
          * Shown below the status when a reward is pending due to W-9 compliance.
          * @uiName W-9 pending text
         */
        "pendingUsTax"?: string;
        /**
          * Shown below the status when a reward was blocked during payout.
          * @uiName Reward blocked text
         */
        "rewardBlockedText"?: string;
        /**
          * Shown below the status pill when a reward was denied during payout.
          * @uiName Reward denied text
         */
        "rewardDeniedText"?: string;
        /**
          * Shown below the status when a reward was placed on hold during payout.
          * @uiName Reward on hold text
         */
        "rewardOnHoldText"?: string;
        /**
          * Shown below the status pill when a reward has been paid out.
          * @uiName Reward paid out text
         */
        "rewardPaidOutText"?: string;
        /**
          * Shown below the status when a reward has failed.
          * @uiName Reward payout failed text
         */
        "rewardPayoutFailedText"?: string;
        /**
          * Shown below the status when a reward is being paid out.
          * @uiName Reward payout in progress text
         */
        "rewardPayoutInProgressText"?: string;
        /**
          * Shown below the status pill when a reward was refunded after payout.
          * @uiName Reward refunded text
         */
        "rewardRefundedText"?: string;
        /**
          * Shown below the status pill when a reward was returned after payout.
          * @uiName Reward returned text
         */
        "rewardReturnedText"?: string;
        /**
          * Shown below the status pill when a rewards payout was reversed.
          * @uiName Reward reversed text
         */
        "rewardReversedText"?: string;
        /**
          * Shown below the status pill when a reward was paid out but is unclaimed.
          * @uiName Reward unclaimed text
         */
        "rewardUnclaimedText"?: string;
        /**
          * Define the text shown in the reward status badge.
          * @uiName Reward status text
          * @uiWidget textArea
         */
        "statusText"?: string;
    }
    interface SqpStencilbook {
    }
    interface IntrinsicElements {
        "sqm-titled-section": SqmTitledSection;
        "sqp-account-details": SqpAccountDetails;
        "sqp-graphql-client-provider": SqpGraphqlClientProvider;
        "sqp-hook-story-container": SqpHookStoryContainer;
        "sqp-paypal-details": SqpPaypalDetails;
        "sqp-rewards-cell": SqpRewardsCell;
        "sqp-rewards-column": SqpRewardsColumn;
        "sqp-status-cell": SqpStatusCell;
        "sqp-status-column": SqpStatusColumn;
        "sqp-stencilbook": SqpStencilbook;
    }
}
export { LocalJSX as JSX };
declare module "@stencil/core" {
    export namespace JSX {
        interface IntrinsicElements {
            "sqm-titled-section": LocalJSX.SqmTitledSection & JSXBase.HTMLAttributes<HTMLSqmTitledSectionElement>;
            "sqp-account-details": LocalJSX.SqpAccountDetails & JSXBase.HTMLAttributes<HTMLSqpAccountDetailsElement>;
            "sqp-graphql-client-provider": LocalJSX.SqpGraphqlClientProvider & JSXBase.HTMLAttributes<HTMLSqpGraphqlClientProviderElement>;
            "sqp-hook-story-container": LocalJSX.SqpHookStoryContainer & JSXBase.HTMLAttributes<HTMLSqpHookStoryContainerElement>;
            "sqp-paypal-details": LocalJSX.SqpPaypalDetails & JSXBase.HTMLAttributes<HTMLSqpPaypalDetailsElement>;
            "sqp-rewards-cell": LocalJSX.SqpRewardsCell & JSXBase.HTMLAttributes<HTMLSqpRewardsCellElement>;
            "sqp-rewards-column": LocalJSX.SqpRewardsColumn & JSXBase.HTMLAttributes<HTMLSqpRewardsColumnElement>;
            "sqp-status-cell": LocalJSX.SqpStatusCell & JSXBase.HTMLAttributes<HTMLSqpStatusCellElement>;
            "sqp-status-column": LocalJSX.SqpStatusColumn & JSXBase.HTMLAttributes<HTMLSqpStatusColumnElement>;
            "sqp-stencilbook": LocalJSX.SqpStencilbook & JSXBase.HTMLAttributes<HTMLSqpStencilbookElement>;
        }
    }
}
