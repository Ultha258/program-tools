/* eslint-disable */
/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */
import { HTMLStencilElement, JSXBase } from "@stencil/core/internal";
import { FunctionalComponent } from "@stencil/core";
import { DemoData } from "./global/demo";
import { GenericTableViewProps } from "./tables/GenericTableView";
export namespace Components {
    interface SqmTextSpan {
        /**
          * @uiName Text
         */
        "text": string;
        /**
          * @uiName Type
          * @uiType string
          * @uiEnum ["p", "subtext", "h1", "h2", "h3", "h4"]
          * @uiEnumNames ["Paragraph", "Subtext", "Header 1", "Header 2", "Header 3", "Header 4"]
         */
        "type": "p" | "subtext" | "h1" | "h2" | "h3" | "h4";
    }
    interface SqpHookStoryContainer {
        "hookStory": FunctionalComponent;
    }
    interface SqpRewardsTable {
        /**
          * @undocumented 
          * @uiType object
         */
        "demoData"?: DemoData<GenericTableViewProps>;
        /**
          * Provide the column numbers (0 indexed) that should not be displayed in mobile views. Ex. 0,2,3
          * @uiName Mobile Hidden Columns
         */
        "hiddenColumns"?: string;
        /**
          * @uiName Hide Column Labels
         */
        "hideLabels"?: boolean;
        /**
          * @uiName Tablet Breakpoint
         */
        "mdBreakpoint"?: number;
        /**
          * @uiName View More button text
         */
        "moreLabel"?: string;
        /**
          * @uiName Number of rewards per page
         */
        "perPage": number;
        /**
          * @uiName Previous button text
         */
        "prevLabel"?: string;
        /**
          * Filters to only show rewards in this program. Will default to filtering by the program context where this table lives. If no program ID is set or provided by context, then shows all rewards from all programs.
          * @uiName Program
          * @uiWidget programSelector
         */
        "programId": string;
        /**
          * @uiName Mobile Breakpoint
         */
        "smBreakpoint"?: number;
    }
    interface SqpRewardsTableCustomerNoteCell {
        "locale": string;
        "note": string;
    }
    interface SqpRewardsTableCustomerNoteColumn {
        /**
          * @uiName Column Title
         */
        "columnTitle": string;
        "renderCell": (data: Reward, locale: string) => Promise<any>;
        "renderLabel": () => Promise<string>;
    }
    interface SqpRewardsTableDateCell {
        "date": number;
        "locale": string;
    }
    interface SqpRewardsTableDateColumn {
        /**
          * @uiName Date Column Title
         */
        "columnTitle": string;
        /**
          * @uiName Date Displayed
          * @uiType string
          * @uiEnum ["dateGiven", "dateExpires", "dateCancelled", "dateRedeemed", "dateScheduledFor"]
          * @uiEnumNames ["Date Given", "Date Expires", "Date Cancelled", "Date Redeemed", "Date Scheduled For"]
         */
        "dateShown": string;
        "renderCell": (data: Reward, locale: string) => Promise<any>;
        "renderLabel": () => Promise<string>;
    }
    interface SqpRewardsTableRewardCell {
        "availableText": string;
        "copyText": string;
        "locale": string;
        "redeemedText": string;
        "reward": Reward;
    }
    interface SqpRewardsTableRewardColumn {
        /**
          * @uiName Remaining Amount Text
         */
        "availableText": string;
        /**
          * @uiName Reward Column Title
         */
        "columnTitle": string;
        /**
          * @uiName Copied Fuel Tank Text
         */
        "copyText": string;
        /**
          * @uiName Redeemed Amount Text
         */
        "redeemedText": string;
        "renderCell": (data: Reward, locale: string) => Promise<any>;
        "renderLabel": () => Promise<string>;
    }
    interface SqpRewardsTableSourceCell {
        "anonymousUserText": string;
        "deletedUserText": string;
        "locale": string;
        "referralText": string;
        "reward": Reward;
        "rewardExchangeText": string;
        "rewardSourceText": string;
    }
    interface SqpRewardsTableSourceColumn {
        /**
          * Name displayed for unknown users
          * @uiName Anonymous User Text
         */
        "anonymousUser": string;
        /**
          * @uiName Soruce Column Title
         */
        "columnTitle": string;
        /**
          * Name displayed for deleted users
          * @uiName Deleted User Text
         */
        "deletedUser": string;
        /**
          * Shown when a reward has been created by a referral
          * @uiName Referral Text
          * @uiWidget textArea
         */
        "referralText": string;
        "renderCell": (data: Reward, locale: any) => Promise<any>;
        "renderLabel": () => Promise<string>;
        /**
          * @uiName Reward Exchange Label
         */
        "rewardExchangeText": string;
        /**
          * Shown when a reward has been created by a source other than a referral.
          * @uiName Reward Source Text
          * @uiWidget textArea
         */
        "rewardSourceText": string;
    }
    interface SqpRewardsTableStatusCell {
        "expiryText": string;
        "locale": string;
        "pendingScheduled": string;
        "pendingUnhandled": string;
        "pendingUsTax": string;
        "reward": Reward;
        "statusText": string;
    }
    interface SqpRewardsTableStatusColumn {
        /**
          * @uiName Column Title
         */
        "columnTitle": string;
        /**
          * Text shown before the date of an expiring reward.
          * @uiName Expiry Date Prefix
         */
        "expiryText": string;
        /**
          * Text shown before the available date of a pending reward.
          * @uiName Pending Date Prefix
         */
        "pendingScheduled": string;
        /**
          * Displayed when fulfillment error occured when creating a reward.
          * @uiName Unhandled Error Text
         */
        "pendingUnhandled": string;
        /**
          * Displayed when a reward is pending due to W9 compliance.
          * @uiName W9 Pending Text
         */
        "pendingUsTax": string;
        "renderCell": (data: Reward, locale: string) => Promise<any>;
        "renderLabel": () => Promise<string>;
        /**
          * @uiName Reward Status Text
          * @uiWidget textArea
         */
        "statusText": string;
    }
    interface SqpStencilbook {
    }
}
declare global {
    interface HTMLSqmTextSpanElement extends Components.SqmTextSpan, HTMLStencilElement {
    }
    var HTMLSqmTextSpanElement: {
        prototype: HTMLSqmTextSpanElement;
        new (): HTMLSqmTextSpanElement;
    };
    interface HTMLSqpHookStoryContainerElement extends Components.SqpHookStoryContainer, HTMLStencilElement {
    }
    var HTMLSqpHookStoryContainerElement: {
        prototype: HTMLSqpHookStoryContainerElement;
        new (): HTMLSqpHookStoryContainerElement;
    };
    interface HTMLSqpRewardsTableElement extends Components.SqpRewardsTable, HTMLStencilElement {
    }
    var HTMLSqpRewardsTableElement: {
        prototype: HTMLSqpRewardsTableElement;
        new (): HTMLSqpRewardsTableElement;
    };
    interface HTMLSqpRewardsTableCustomerNoteCellElement extends Components.SqpRewardsTableCustomerNoteCell, HTMLStencilElement {
    }
    var HTMLSqpRewardsTableCustomerNoteCellElement: {
        prototype: HTMLSqpRewardsTableCustomerNoteCellElement;
        new (): HTMLSqpRewardsTableCustomerNoteCellElement;
    };
    interface HTMLSqpRewardsTableCustomerNoteColumnElement extends Components.SqpRewardsTableCustomerNoteColumn, HTMLStencilElement {
    }
    var HTMLSqpRewardsTableCustomerNoteColumnElement: {
        prototype: HTMLSqpRewardsTableCustomerNoteColumnElement;
        new (): HTMLSqpRewardsTableCustomerNoteColumnElement;
    };
    interface HTMLSqpRewardsTableDateCellElement extends Components.SqpRewardsTableDateCell, HTMLStencilElement {
    }
    var HTMLSqpRewardsTableDateCellElement: {
        prototype: HTMLSqpRewardsTableDateCellElement;
        new (): HTMLSqpRewardsTableDateCellElement;
    };
    interface HTMLSqpRewardsTableDateColumnElement extends Components.SqpRewardsTableDateColumn, HTMLStencilElement {
    }
    var HTMLSqpRewardsTableDateColumnElement: {
        prototype: HTMLSqpRewardsTableDateColumnElement;
        new (): HTMLSqpRewardsTableDateColumnElement;
    };
    interface HTMLSqpRewardsTableRewardCellElement extends Components.SqpRewardsTableRewardCell, HTMLStencilElement {
    }
    var HTMLSqpRewardsTableRewardCellElement: {
        prototype: HTMLSqpRewardsTableRewardCellElement;
        new (): HTMLSqpRewardsTableRewardCellElement;
    };
    interface HTMLSqpRewardsTableRewardColumnElement extends Components.SqpRewardsTableRewardColumn, HTMLStencilElement {
    }
    var HTMLSqpRewardsTableRewardColumnElement: {
        prototype: HTMLSqpRewardsTableRewardColumnElement;
        new (): HTMLSqpRewardsTableRewardColumnElement;
    };
    interface HTMLSqpRewardsTableSourceCellElement extends Components.SqpRewardsTableSourceCell, HTMLStencilElement {
    }
    var HTMLSqpRewardsTableSourceCellElement: {
        prototype: HTMLSqpRewardsTableSourceCellElement;
        new (): HTMLSqpRewardsTableSourceCellElement;
    };
    interface HTMLSqpRewardsTableSourceColumnElement extends Components.SqpRewardsTableSourceColumn, HTMLStencilElement {
    }
    var HTMLSqpRewardsTableSourceColumnElement: {
        prototype: HTMLSqpRewardsTableSourceColumnElement;
        new (): HTMLSqpRewardsTableSourceColumnElement;
    };
    interface HTMLSqpRewardsTableStatusCellElement extends Components.SqpRewardsTableStatusCell, HTMLStencilElement {
    }
    var HTMLSqpRewardsTableStatusCellElement: {
        prototype: HTMLSqpRewardsTableStatusCellElement;
        new (): HTMLSqpRewardsTableStatusCellElement;
    };
    interface HTMLSqpRewardsTableStatusColumnElement extends Components.SqpRewardsTableStatusColumn, HTMLStencilElement {
    }
    var HTMLSqpRewardsTableStatusColumnElement: {
        prototype: HTMLSqpRewardsTableStatusColumnElement;
        new (): HTMLSqpRewardsTableStatusColumnElement;
    };
    interface HTMLSqpStencilbookElement extends Components.SqpStencilbook, HTMLStencilElement {
    }
    var HTMLSqpStencilbookElement: {
        prototype: HTMLSqpStencilbookElement;
        new (): HTMLSqpStencilbookElement;
    };
    interface HTMLElementTagNameMap {
        "sqm-text-span": HTMLSqmTextSpanElement;
        "sqp-hook-story-container": HTMLSqpHookStoryContainerElement;
        "sqp-rewards-table": HTMLSqpRewardsTableElement;
        "sqp-rewards-table-customer-note-cell": HTMLSqpRewardsTableCustomerNoteCellElement;
        "sqp-rewards-table-customer-note-column": HTMLSqpRewardsTableCustomerNoteColumnElement;
        "sqp-rewards-table-date-cell": HTMLSqpRewardsTableDateCellElement;
        "sqp-rewards-table-date-column": HTMLSqpRewardsTableDateColumnElement;
        "sqp-rewards-table-reward-cell": HTMLSqpRewardsTableRewardCellElement;
        "sqp-rewards-table-reward-column": HTMLSqpRewardsTableRewardColumnElement;
        "sqp-rewards-table-source-cell": HTMLSqpRewardsTableSourceCellElement;
        "sqp-rewards-table-source-column": HTMLSqpRewardsTableSourceColumnElement;
        "sqp-rewards-table-status-cell": HTMLSqpRewardsTableStatusCellElement;
        "sqp-rewards-table-status-column": HTMLSqpRewardsTableStatusColumnElement;
        "sqp-stencilbook": HTMLSqpStencilbookElement;
    }
}
declare namespace LocalJSX {
    interface SqmTextSpan {
        /**
          * @uiName Text
         */
        "text"?: string;
        /**
          * @uiName Type
          * @uiType string
          * @uiEnum ["p", "subtext", "h1", "h2", "h3", "h4"]
          * @uiEnumNames ["Paragraph", "Subtext", "Header 1", "Header 2", "Header 3", "Header 4"]
         */
        "type"?: "p" | "subtext" | "h1" | "h2" | "h3" | "h4";
    }
    interface SqpHookStoryContainer {
        "hookStory"?: FunctionalComponent;
    }
    interface SqpRewardsTable {
        /**
          * @undocumented 
          * @uiType object
         */
        "demoData"?: DemoData<GenericTableViewProps>;
        /**
          * Provide the column numbers (0 indexed) that should not be displayed in mobile views. Ex. 0,2,3
          * @uiName Mobile Hidden Columns
         */
        "hiddenColumns"?: string;
        /**
          * @uiName Hide Column Labels
         */
        "hideLabels"?: boolean;
        /**
          * @uiName Tablet Breakpoint
         */
        "mdBreakpoint"?: number;
        /**
          * @uiName View More button text
         */
        "moreLabel"?: string;
        /**
          * @uiName Number of rewards per page
         */
        "perPage"?: number;
        /**
          * @uiName Previous button text
         */
        "prevLabel"?: string;
        /**
          * Filters to only show rewards in this program. Will default to filtering by the program context where this table lives. If no program ID is set or provided by context, then shows all rewards from all programs.
          * @uiName Program
          * @uiWidget programSelector
         */
        "programId"?: string;
        /**
          * @uiName Mobile Breakpoint
         */
        "smBreakpoint"?: number;
    }
    interface SqpRewardsTableCustomerNoteCell {
        "locale"?: string;
        "note"?: string;
    }
    interface SqpRewardsTableCustomerNoteColumn {
        /**
          * @uiName Column Title
         */
        "columnTitle"?: string;
    }
    interface SqpRewardsTableDateCell {
        "date"?: number;
        "locale"?: string;
    }
    interface SqpRewardsTableDateColumn {
        /**
          * @uiName Date Column Title
         */
        "columnTitle"?: string;
        /**
          * @uiName Date Displayed
          * @uiType string
          * @uiEnum ["dateGiven", "dateExpires", "dateCancelled", "dateRedeemed", "dateScheduledFor"]
          * @uiEnumNames ["Date Given", "Date Expires", "Date Cancelled", "Date Redeemed", "Date Scheduled For"]
         */
        "dateShown"?: string;
    }
    interface SqpRewardsTableRewardCell {
        "availableText"?: string;
        "copyText"?: string;
        "locale"?: string;
        "redeemedText"?: string;
        "reward"?: Reward;
    }
    interface SqpRewardsTableRewardColumn {
        /**
          * @uiName Remaining Amount Text
         */
        "availableText"?: string;
        /**
          * @uiName Reward Column Title
         */
        "columnTitle"?: string;
        /**
          * @uiName Copied Fuel Tank Text
         */
        "copyText"?: string;
        /**
          * @uiName Redeemed Amount Text
         */
        "redeemedText"?: string;
    }
    interface SqpRewardsTableSourceCell {
        "anonymousUserText"?: string;
        "deletedUserText"?: string;
        "locale"?: string;
        "referralText"?: string;
        "reward"?: Reward;
        "rewardExchangeText"?: string;
        "rewardSourceText"?: string;
    }
    interface SqpRewardsTableSourceColumn {
        /**
          * Name displayed for unknown users
          * @uiName Anonymous User Text
         */
        "anonymousUser"?: string;
        /**
          * @uiName Soruce Column Title
         */
        "columnTitle"?: string;
        /**
          * Name displayed for deleted users
          * @uiName Deleted User Text
         */
        "deletedUser"?: string;
        /**
          * Shown when a reward has been created by a referral
          * @uiName Referral Text
          * @uiWidget textArea
         */
        "referralText"?: string;
        /**
          * @uiName Reward Exchange Label
         */
        "rewardExchangeText"?: string;
        /**
          * Shown when a reward has been created by a source other than a referral.
          * @uiName Reward Source Text
          * @uiWidget textArea
         */
        "rewardSourceText"?: string;
    }
    interface SqpRewardsTableStatusCell {
        "expiryText"?: string;
        "locale"?: string;
        "pendingScheduled"?: string;
        "pendingUnhandled"?: string;
        "pendingUsTax"?: string;
        "reward"?: Reward;
        "statusText"?: string;
    }
    interface SqpRewardsTableStatusColumn {
        /**
          * @uiName Column Title
         */
        "columnTitle"?: string;
        /**
          * Text shown before the date of an expiring reward.
          * @uiName Expiry Date Prefix
         */
        "expiryText"?: string;
        /**
          * Text shown before the available date of a pending reward.
          * @uiName Pending Date Prefix
         */
        "pendingScheduled"?: string;
        /**
          * Displayed when fulfillment error occured when creating a reward.
          * @uiName Unhandled Error Text
         */
        "pendingUnhandled"?: string;
        /**
          * Displayed when a reward is pending due to W9 compliance.
          * @uiName W9 Pending Text
         */
        "pendingUsTax"?: string;
        /**
          * @uiName Reward Status Text
          * @uiWidget textArea
         */
        "statusText"?: string;
    }
    interface SqpStencilbook {
    }
    interface IntrinsicElements {
        "sqm-text-span": SqmTextSpan;
        "sqp-hook-story-container": SqpHookStoryContainer;
        "sqp-rewards-table": SqpRewardsTable;
        "sqp-rewards-table-customer-note-cell": SqpRewardsTableCustomerNoteCell;
        "sqp-rewards-table-customer-note-column": SqpRewardsTableCustomerNoteColumn;
        "sqp-rewards-table-date-cell": SqpRewardsTableDateCell;
        "sqp-rewards-table-date-column": SqpRewardsTableDateColumn;
        "sqp-rewards-table-reward-cell": SqpRewardsTableRewardCell;
        "sqp-rewards-table-reward-column": SqpRewardsTableRewardColumn;
        "sqp-rewards-table-source-cell": SqpRewardsTableSourceCell;
        "sqp-rewards-table-source-column": SqpRewardsTableSourceColumn;
        "sqp-rewards-table-status-cell": SqpRewardsTableStatusCell;
        "sqp-rewards-table-status-column": SqpRewardsTableStatusColumn;
        "sqp-stencilbook": SqpStencilbook;
    }
}
export { LocalJSX as JSX };
declare module "@stencil/core" {
    export namespace JSX {
        interface IntrinsicElements {
            "sqm-text-span": LocalJSX.SqmTextSpan & JSXBase.HTMLAttributes<HTMLSqmTextSpanElement>;
            "sqp-hook-story-container": LocalJSX.SqpHookStoryContainer & JSXBase.HTMLAttributes<HTMLSqpHookStoryContainerElement>;
            "sqp-rewards-table": LocalJSX.SqpRewardsTable & JSXBase.HTMLAttributes<HTMLSqpRewardsTableElement>;
            "sqp-rewards-table-customer-note-cell": LocalJSX.SqpRewardsTableCustomerNoteCell & JSXBase.HTMLAttributes<HTMLSqpRewardsTableCustomerNoteCellElement>;
            "sqp-rewards-table-customer-note-column": LocalJSX.SqpRewardsTableCustomerNoteColumn & JSXBase.HTMLAttributes<HTMLSqpRewardsTableCustomerNoteColumnElement>;
            "sqp-rewards-table-date-cell": LocalJSX.SqpRewardsTableDateCell & JSXBase.HTMLAttributes<HTMLSqpRewardsTableDateCellElement>;
            "sqp-rewards-table-date-column": LocalJSX.SqpRewardsTableDateColumn & JSXBase.HTMLAttributes<HTMLSqpRewardsTableDateColumnElement>;
            "sqp-rewards-table-reward-cell": LocalJSX.SqpRewardsTableRewardCell & JSXBase.HTMLAttributes<HTMLSqpRewardsTableRewardCellElement>;
            "sqp-rewards-table-reward-column": LocalJSX.SqpRewardsTableRewardColumn & JSXBase.HTMLAttributes<HTMLSqpRewardsTableRewardColumnElement>;
            "sqp-rewards-table-source-cell": LocalJSX.SqpRewardsTableSourceCell & JSXBase.HTMLAttributes<HTMLSqpRewardsTableSourceCellElement>;
            "sqp-rewards-table-source-column": LocalJSX.SqpRewardsTableSourceColumn & JSXBase.HTMLAttributes<HTMLSqpRewardsTableSourceColumnElement>;
            "sqp-rewards-table-status-cell": LocalJSX.SqpRewardsTableStatusCell & JSXBase.HTMLAttributes<HTMLSqpRewardsTableStatusCellElement>;
            "sqp-rewards-table-status-column": LocalJSX.SqpRewardsTableStatusColumn & JSXBase.HTMLAttributes<HTMLSqpRewardsTableStatusColumnElement>;
            "sqp-stencilbook": LocalJSX.SqpStencilbook & JSXBase.HTMLAttributes<HTMLSqpStencilbookElement>;
        }
    }
}
