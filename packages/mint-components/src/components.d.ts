/* eslint-disable */
/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */
import { HTMLStencilElement, JSXBase } from "@stencil/core/internal";
import { DemoData } from "./global/demo";
import { AssetCardViewProps } from "./components/sqm-asset-card/sqm-asset-card-view";
import { BigStatViewProps } from "./components/sqm-big-stat/sqm-big-stat-view";
import { EditProfileViewProps } from "./components/sqm-edit-profile/sqm-edit-profile-view";
import { Spacing } from "./global/mixins";
import { FunctionalComponent } from "@stencil/core";
import { LeaderboardViewProps } from "./components/sqm-leaderboard/sqm-leaderboard-view";
import { LeaderboardRankViewProps } from "./components/sqm-leaderboard-rank/sqm-leaderboard-rank-view";
import { NameFieldsViewProps } from "./components/sqm-name-fields/sqm-name-fields-view";
import { NavigationMenuViewProps } from "./components/sqm-navigation-menu/sqm-navigation-menu-view";
import { NavigationSidebarItemViewProps } from "./components/sqm-navigation-sidebar-item/sqm-navigation-sidebar-item-view";
import { PasswordFieldViewDemoProps } from "./components/sqm-password-field/sqm-password-field";
import { PortalChangePasswordViewProps } from "./components/sqm-portal-change-password/sqm-portal-change-password-view";
import { PortalEmailVerificationViewProps } from "./components/sqm-portal-email-verification/sqm-portal-email-verification-view";
import { PortalForgotPasswordViewProps } from "./components/sqm-portal-forgot-password/sqm-portal-forgot-password-view";
import { PortalFrameViewProps } from "./components/sqm-portal-frame/sqm-portal-frame-view";
import { PortalLoginViewProps } from "./components/sqm-portal-login/sqm-portal-login-view";
import { PortalProfileViewProps } from "./components/sqm-portal-profile/sqm-portal-profile-view";
import { PortalRegisterViewProps } from "./components/sqm-portal-register/sqm-portal-register-view";
import { PortalResetPasswordViewProps } from "./components/sqm-portal-reset-password/sqm-portal-reset-password-view";
import { PortalVerifyEmailViewProps } from "./components/sqm-portal-verify-email/sqm-portal-verify-email-view";
import { ReferralIframeViewProps } from "./components/sqm-referral-iframe/sqm-referral-iframe-view";
import { GenericTableViewProps } from "./tables/GenericTableView";
import { ReferralDates } from "./components/sqm-referral-table/useReferralTable";
import { RewardExchangeViewProps } from "./components/sqm-reward-exchange-list/sqm-reward-exchange-list-view";
import { ShareButtonViewProps } from "./components/sqm-share-button/sqm-share-button-view";
import { ShareLinkViewProps } from "./components/sqm-share-link/sqm-share-link-view";
import { TaskCardViewProps } from "./components/sqm-task-card/sqm-task-card-view";
import { UserNameViewProps } from "./components/sqm-user-name/sqm-user-name-view";
export namespace Components {
    interface SqmAssetCard {
        /**
          * @undocumented 
          * @uiType object
         */
        "demoData"?: DemoData<AssetCardViewProps>;
        /**
          * @uiName Banner image
         */
        "imgUrl": string;
        /**
          * @uiName Banner title
         */
        "titleText": string;
    }
    interface SqmBigStat {
        /**
          * @uiName Alignment - controls the alignment of the flexbox
          * @uiType string
          * @uiEnum ["left", "right", "center"]
         */
        "alignment"?: "left" | "right" | "center";
        /**
          * @undocumented 
          * @uiType object
         */
        "demoData"?: DemoData<BigStatViewProps>;
        /**
          * @uiName Flex Reverse - controls the order of the stat value & description column
         */
        "flexReverse"?: boolean;
        /**
          * The ID of the program that is used to scope stats. Defaults to the program context when no ID is specified.
          * @uiName Program ID
         */
        "programId"?: string;
        /**
          * Select what type of stat to display. Manual paths are also supported.
          * @uiWidget StatTypeSelectWidget
          * @uiName Stat Type
          * @uiOptions {"version": 1.1}
         */
        "statType": string;
    }
    interface SqmBrand {
        /**
          * The background color for the portal
          * @uiName Page Background Color
          * @uiWidget color
         */
        "background": string;
        /**
          * Controls the primary brand color used in the Mint Components library. Note that this does not affect vanilla components or other component libraries.
          * @uiName Brand Color
          * @uiWidget color
         */
        "brandColor": string;
        /**
          * The brand font that you want to use
          * @uiName Brand Font
         */
        "brandFont": string;
    }
    interface SqmCardFeed {
        /**
          * @uiName Column Gap
          * @uiType number
         */
        "gap": number;
        /**
          * @uiName Card Width
         */
        "width": number;
    }
    interface SqmDividedLayout {
        /**
          * @uiName Direction
          * @uiType string
          * @uiEnum ["row", "column"]
         */
        "direction": "row" | "column";
        /**
          * Uses CSS border style syntax
          * @uiName Border style
         */
        "dividerStyle": string;
    }
    interface SqmEditProfile {
        /**
          * @uiName Cancel button text
         */
        "canceltext": string;
        /**
          * @uiName Region field label
         */
        "currentregiontext": string;
        /**
          * @undocumented 
          * @uiType object
         */
        "demoData"?: DemoData<EditProfileViewProps>;
        /**
          * @uiName Heading
         */
        "editprofileheader": string;
        /**
          * @uiName Enable editing button text
         */
        "editprofiletext": string;
        /**
          * @uiName First name field label
         */
        "firstnametext": string;
        /**
          * @uiName Last name field label
         */
        "lastnametext": string;
        /**
          * @uiName Show or hide current region
         */
        "showregion": boolean;
        /**
          * @uiName Update info button text
         */
        "updatetext": string;
    }
    interface SqmEmpty {
        /**
          * @uiName Empty State Title
         */
        "emptyStateHeader": string;
        /**
          * @uiWidget ImageUpload
          * @uiName Empty State Image Link
         */
        "emptyStateImage": string;
        /**
          * @uiName Empty State Text
         */
        "emptyStateText": string;
        /**
          * @uiName Table Empty State
         */
        "table": boolean;
    }
    interface SqmFormMessage {
        /**
          * @uiName Icon to use in alert
         */
        "icon"?: string;
        /**
          * @uiName Type of alert
         */
        "type": string;
    }
    interface SqmGraphqlClientProvider {
        /**
          * @uiName Domain
         */
        "domain": string;
    }
    interface SqmHero {
        /**
          * @uiName Background image or color
         */
        "background"?: string;
        /**
          * @uiName Number of columns in the layout
         */
        "columns": 1 | 2;
        /**
          * @uiName Padding size
         */
        "paddingSize": "none" | "small" | "medium" | "large";
        /**
          * @uiName Secondary background image or color (for use in right column)
         */
        "secondaryBackground"?: string;
        /**
          * @uiName Wrap direction
         */
        "wrapDirection": "wrap" | "wrap-reverse";
    }
    interface SqmHeroImage {
        /**
          * @uiName Background Color
          * @uiWidget color
         */
        "backgroundColor"?: string;
        /**
          * @uiName CTA Button Link
         */
        "buttonLink"?: string;
        /**
          * @uiName CTA Button Link Open in New Tab
         */
        "buttonNewTab"?: boolean;
        /**
          * @uiName CTA Button Text
         */
        "buttonText"?: string;
        /**
          * @uiName Description Text
         */
        "description"?: string;
        /**
          * @uiName Title Text
         */
        "header"?: string;
        /**
          * @uiName Image Mobile Position
          * @uiType string
          * @uiEnum ["top", "bottom"]
         */
        "imageMobilePos": "top" | "bottom";
        /**
          * @uiName Image Percentage
          * @uiType number
         */
        "imagePercentage": number;
        /**
          * @uiName Image Position
          * @uiType string
          * @uiEnum ["left", "center", "right"]
         */
        "imagePos": "left" | "center" | "right";
        /**
          * @uiWidget ImageUpload
          * @uiName Image Link
         */
        "imageUrl": string;
        /**
          * @uiName Image Layout
          * @uiType string
          * @uiEnum ["overlay", "columns"]
         */
        "layout": "overlay" | "columns";
        /**
          * @uiName Overlay Color
          * @uiWidget color
         */
        "overlayColor": string;
        /**
          * @uiName Overlay Opacity
         */
        "overlayOpacity": string;
        /**
          * @uiName Image Padding
          * @uiType string
          * @uiEnum ["none", "xxx-small", "xx-small", "x-small", "small", "medium", "large", "x-large", "xx-large", "xxx-large", "xxxx-large"]
         */
        "paddingImage": Spacing;
        /**
          * @uiName Text Padding
          * @uiType string
          * @uiEnum ["none", "xxx-small", "xx-small", "x-small", "small", "medium", "large", "x-large", "xx-large", "xxx-large", "xxxx-large"]
         */
        "paddingText": Spacing;
        /**
          * @uiName Text Color
          * @uiWidget color
         */
        "textColor"?: string;
    }
    interface SqmHookStoryContainer {
        "hookStory": FunctionalComponent;
    }
    interface SqmImage {
        /**
          * @uiName Position Alignment
          * @uiType string
          * @uiEnum ["left", "center", "right"]
         */
        "alignment": "left" | "center" | "right";
        /**
          * @uiName Background Color
          * @uiWidget color
         */
        "backgroundColor": string;
        /**
          * @uiWidget ImageUpload
          * @uiName Image Link
         */
        "imageUrl": string;
        /**
          * (optional) Helps with constraining minimum size
          * @uiName Minimum Height
         */
        "minHeight"?: string;
    }
    interface SqmLeaderboard {
        /**
          * @uiName Title displayed for users without names
         */
        "anonymousUser": string;
        /**
          * @undocumented 
          * @uiType object
         */
        "demoData"?: DemoData<LeaderboardViewProps>;
        /**
          * @uiName Leaderboard time interval
          * @uiWidget DateRange
          * @uiOptions {"allowPastDates":true, "months": 1}
         */
        "interval": string;
        /**
          * @uiName Leaderboard type
          * @uiType string
          * @uiEnum ["topStartedReferrers", "topConvertedReferrers"]
         */
        "leaderboardType": "topStartedReferrers" | "topConvertedReferrers";
        /**
          * @uiName Rank type
          * @uiType string
          * @uiEnum ["rowNumber", "rank", "denseRank"]
         */
        "rankType": "rowNumber" | "rank" | "denseRank";
        /**
          * @uiName Rank Heading
         */
        "rankheading": string;
        /**
          * @uiName Show leaderboard rank
         */
        "showRank": boolean;
        /**
          * Shows the current user's leaderboard information even if they are not in the top 10
          * @uiName Show viewing user
         */
        "showUser": boolean;
        /**
          * @uiName Stats Column Heading
         */
        "statsheading": string;
        /**
          * @uiName User Column Heading
         */
        "usersheading": string;
    }
    interface SqmLeaderboardRank {
        /**
          * @undocumented 
          * @uiType object
         */
        "demoData"?: DemoData<LeaderboardRankViewProps>;
        /**
          * @uiName Leaderboard time interval
          * @uiWidget DateRange
          * @uiOptions {"allowPastDates":true, "months": 1}
         */
        "interval": string;
        /**
          * @uiName Leaderboard type
          * @uiType string
          * @uiEnum ["topStartedReferrers", "topConvertedReferrers"]
         */
        "leaderboardType": "topStartedReferrers" | "topConvertedReferrers";
        /**
          * @uiName Rank Text
         */
        "rankText": string;
        /**
          * @uiName Default rank
          * @uiType string
          * @uiEnum ["rowNumber", "rank", "denseRank"]
         */
        "rankType": "rowNumber" | "rank" | "denseRank";
        /**
          * @uiName Unranked Text
         */
        "unrankedText": string;
    }
    interface SqmNameFields {
        /**
          * @undocumented
         */
        "demoData"?: DemoData<NameFieldsViewProps>;
        /**
          * @uiName First name field label
         */
        "firstNameLabel": string;
        /**
          * @uiName Last name field label
         */
        "lastNameLabel": string;
    }
    interface SqmNavigationMenu {
        /**
          * @undocumented 
          * @uiType object
         */
        "demoData"?: DemoData<NavigationMenuViewProps>;
        /**
          * @uiName Include dropdown menu
         */
        "includeDropdown": boolean;
        /**
          * @uiName Label on the header menu
         */
        "menuLabel": string;
    }
    interface SqmNavigationSidebar {
    }
    interface SqmNavigationSidebarItem {
        /**
          * @undocumented 
          * @uiType object
         */
        "demoData"?: DemoData<NavigationSidebarItemViewProps>;
        /**
          * Options available at https://shoelace.style/components/icon
          * @uiName Icon
         */
        "icon": string;
        /**
          * @uiName Label
         */
        "label": string;
        /**
          * @uiName Navigation path
         */
        "path": string;
    }
    interface SqmPasswordField {
        /**
          * @undocumented 
          * @uiType object
         */
        "demoData"?: PasswordFieldViewDemoProps;
        /**
          * @uiName Enable live password validation
         */
        "enableValidation": boolean;
        /**
          * @uiName Label for password field
         */
        "fieldLabel": string;
    }
    interface SqmPopupContainer {
        /**
          * @uiName Display a close button on the popup
         */
        "closeButton": boolean;
        /**
          * @uiName Text to be used as the close button
         */
        "closeButtonText": string;
        /**
          * @uiName Specify padding on the popup contents when in embedded mode
          * @uiType string
          * @uiEnum ["none", "small", "medium", "large"]
         */
        "embedPadding"?: "none" | "small" | "medium" | "large";
        /**
          * @uiName Specify padding on the popup contents when in popup mode
          * @uiType string
          * @uiEnum ["none", "small", "medium", "large"]
         */
        "popupPadding"?: "none" | "small" | "medium" | "large";
        /**
          * @uiName Show SaaSquatch Powered By messaging
         */
        "poweredBy": boolean;
    }
    interface SqmPortalChangePassword {
        /**
          * @uiName Modal cancel password change button text
         */
        "cancelText": string;
        /**
          * @uiName Modal change password button text
         */
        "changePasswordButtonText": string;
        /**
          * @uiName Password confirmation input field label
         */
        "confirmPasswordFieldLabel": string;
        /**
          * @undocumented 
          * @uiType object
         */
        "demoData"?: DemoData<PortalChangePasswordViewProps>;
        /**
          * @uiName Change password modal header
         */
        "modalChangePasswordHeader": string;
        /**
          * @uiName Password input field label
         */
        "passwordFieldLabel": string;
        /**
          * @uiName Portal change password button text
         */
        "portalChangePasswordButtonText": string;
        /**
          * @uiName Portal change password section header
         */
        "portalChangePasswordHeader": string;
        /**
          * @uiName Successful password change message
         */
        "successMessage": string;
    }
    interface SqmPortalContainer {
        /**
          * @uiName Center content
         */
        "center": boolean;
        /**
          * @uiName Direction
          * @uiType string
          * @uiEnum ["row", "column"]
         */
        "direction": "row" | "column";
        /**
          * @uiName Display
          * @uiType string
          * @uiEnum ["grid", "flex"]
         */
        "display": "grid" | "flex";
        /**
          * @uiName Gap
          * @uiType string
          * @uiEnum ["none", "xxx-small", "xx-small", "x-small", "small", "medium", "large", "x-large", "xx-large", "xxx-large", "xxxx-large"]
         */
        "gap": Spacing;
        /**
          * @uiName Maximum width
         */
        "maxWidth"?: string;
        /**
          * @uiName Minimum width
         */
        "minWidth"?: string;
        /**
          * @uiName Padding
          * @uiType string
          * @uiEnum ["none", "xxx-small", "xx-small", "x-small", "small", "medium", "large", "x-large", "xx-large", "xxx-large", "xxxx-large"]
         */
        "padding": Spacing;
    }
    interface SqmPortalEmailVerification {
        /**
          * @undocumented 
          * @uiType object
         */
        "demoData"?: DemoData<PortalEmailVerificationViewProps>;
        /**
          * @uiName Email verification header text
         */
        "emailVerificationHeader": string;
        /**
          * The page that users are redirected to from the verification email.
          * @uiName Email redirection base path
         */
        "redirectPath": string;
        /**
          * @uiName Re-send email button text
         */
        "resendEmailButtonText": string;
        /**
          * @uiName Email verification body text
         */
        "verifyMessage": string;
    }
    interface SqmPortalFooter {
        /**
          * @uiName FAQ Link
         */
        "faqLink"?: string;
        /**
          * @uiName FAQ Text
         */
        "faqText"?: string;
        /**
          * @uiName Padding Bottom
         */
        "paddingBottom": string;
        /**
          * @uiName Padding Left
         */
        "paddingLeft": string;
        /**
          * @uiName Padding Right
         */
        "paddingRight": string;
        /**
          * @uiName Padding Top
         */
        "paddingTop": string;
        /**
          * @uiName Powered By Link
         */
        "poweredByLink": string;
        /**
          * @uiName Show Powered By SaaSquatch
         */
        "showPoweredBy": boolean;
        /**
          * @uiName Support Email
         */
        "supportEmail": string;
        /**
          * @uiName Support Text
         */
        "supportText": string;
        /**
          * @uiName Terms and Conditions Link
         */
        "termsLink"?: string;
        /**
          * @uiName Terms and Conditions Text
         */
        "termsText"?: string;
    }
    interface SqmPortalForgotPassword {
        /**
          * @undocumented 
          * @uiType object
         */
        "demoData"?: DemoData<PortalForgotPasswordViewProps>;
        /**
          * @uiName Email label
         */
        "emailLabel": string;
        /**
          * @uiName Routing path to login page
         */
        "loginPath": string;
        /**
          * The page that users are redirected to from the password reset email.
          * @uiName Email redirection base path
         */
        "redirectPath": string;
        /**
          * @uiName Password reset button text
         */
        "submitLabel": string;
    }
    interface SqmPortalFrame {
        /**
          * @undocumented 
          * @uiType object
         */
        "demoData"?: DemoData<PortalFrameViewProps>;
    }
    interface SqmPortalLogin {
        /**
          * @undocumented 
          * @uiType object
         */
        "demoData"?: DemoData<PortalLoginViewProps>;
        /**
          * @uiName Label for email field
         */
        "emailLabel": string;
        /**
          * @uiName Label for forgotten password button
         */
        "forgotPasswordLabel": string;
        /**
          * @uiName Forgot password button redirect path
         */
        "forgotPasswordPath": string;
        /**
          * @uiName Page navigated to after sign-in
         */
        "nextPage": string;
        /**
          * @uiName Heading label
         */
        "pageLabel": string;
        /**
          * @uiName Label for password field
         */
        "passwordLabel": string;
        /**
          * @uiName Label for register navigation button
         */
        "registerLabel": string;
        /**
          * @uiName Register button redirection path
         */
        "registerPath": string;
        /**
          * @uiName Label for submit button
         */
        "submitLabel": string;
    }
    interface SqmPortalLogout {
        /**
          * @uiName Next Page path
         */
        "nextPage": string;
    }
    interface SqmPortalProfile {
        /**
          * @uiName Country input field label
         */
        "countrytext": string;
        /**
          * @undocumented 
          * @uiType object
         */
        "demoData"?: DemoData<PortalProfileViewProps>;
        /**
          * @uiName Edit profile header
         */
        "editProfileHeader": string;
        /**
          * @uiName Edit profile sub header
         */
        "editProfileSubHeader": string;
        /**
          * @uiName Email input field label
         */
        "emailtext": string;
        /**
          * @uiName First name input field label
         */
        "firstnametext": string;
        /**
          * @uiName Last name input field label
         */
        "lastnametext": string;
        /**
          * @uiName Show or hide country field
         */
        "showCountry": boolean;
        /**
          * @uiName Text for the submit changes button
         */
        "submitChangeButtonText": string;
    }
    interface SqmPortalProtectedRoute {
        /**
          * @uiName Redirect Path
         */
        "redirectTo": string;
        /**
          * @uiName Redirect unverified users path
         */
        "redirectToUnverified": string;
        /**
          * @uiName Require Email Verification
         */
        "requireEmailVerification": boolean;
    }
    interface SqmPortalRegister {
        /**
          * @uiName Show confirm password field
         */
        "confirmPassword": boolean;
        /**
          * @uiName Label for confirm password field
         */
        "confirmPasswordLabel": string;
        /**
          * @undocumented 
          * @uiType object
         */
        "demoData"?: DemoData<PortalRegisterViewProps>;
        /**
          * @uiName Label for email field
         */
        "emailLabel": string;
        /**
          * @uiName Use password field with live validation
         */
        "enablePasswordValidation": boolean;
        /**
          * @uiName Hide default input fields to use custom fields
         */
        "hideInputs": boolean;
        /**
          * @uiName Label for login navigation button
         */
        "loginLabel": string;
        /**
          * @uiName Sign in button redirection path
         */
        "loginPath": string;
        /**
          * @uiName Page navigated to after registration
         */
        "nextPage": string;
        /**
          * @uiName Heading label
         */
        "pageLabel": string;
        /**
          * @uiName Label for password field
         */
        "passwordLabel": string;
        /**
          * The page that users are redirected to from the verification email.
          * @uiName Email redirection base path
         */
        "redirectPath": string;
        /**
          * @uiName Label for submit button
         */
        "submitLabel": string;
    }
    interface SqmPortalResetPassword {
        /**
          * @uiName Show confirm password
         */
        "confirmPassword": boolean;
        /**
          * @uiName Confirm password field label
         */
        "confirmPasswordFieldLabel": string;
        /**
          * Displayed after a successful password reset
          * @uiName Continue button text
         */
        "continueButtonText": string;
        /**
          * @undocumented 
          * @uiType object
         */
        "demoData"?: DemoData<PortalResetPasswordViewProps>;
        /**
          * The page that users are redirected to if the reset fails due to outdated password reset attempt.
          * @uiName Failed page redirection path
         */
        "failedPage": string;
        /**
          * The page that users are redirected to when the password reset succeeds.
          * @uiName Next page path
         */
        "nextPage": string;
        /**
          * @uiName Password field label
         */
        "passwordFieldLabel": string;
        /**
          * Displayed after a successful password reset
          * @uiName Password reset header text
         */
        "passwordResetHeader": string;
        /**
          * @uiName Password reset button text
         */
        "resetPasswordButtonText": string;
        /**
          * @uiName Password reset header text
         */
        "resetPasswordHeader": string;
    }
    interface SqmPortalVerifyEmail {
        /**
          * @undocumented 
          * @uiType object
         */
        "demoData"?: DemoData<PortalVerifyEmailViewProps>;
        /**
          * The page that users are redirected to if verification fails due to outdated verification attempt.
          * @uiName Failed page redirection path
         */
        "failedPage": string;
        /**
          * The page that users are redirected to when the verification succeeds.
          * @uiName Next page path
         */
        "nextPage": string;
    }
    interface SqmProgramExplainer {
        /**
          * @uiName Header Background Color
          * @uiWidget color
         */
        "backgroundColor": string;
        /**
          * @uiName Header Text
         */
        "header": string;
        /**
          * @uiName Header Text Color
          * @uiWidget color
         */
        "textColor": string;
    }
    interface SqmProgramExplainerStep {
        /**
          * @uiName Background Color
          * @uiWidget color
         */
        "backgroundColor": string;
        /**
          * @uiName Description
         */
        "description": string;
        /**
          * @uiName Title
         */
        "header": string;
        /**
          * Options available at https://shoelace.style/components/icon
          * @uiName Icon
         */
        "icon"?: string;
        /**
          * Displayed in place of an icon
          * @uiName Image Url
         */
        "imageUrl"?: string;
        /**
          * @uiName Text Color
          * @uiWidget color
         */
        "textColor": string;
    }
    interface SqmProgramMenu {
    }
    interface SqmReferralCard {
        /**
          * @uiName Vertical Aligment
          * @uiType string
          * @uiEnum ["start", "center", "end"]
         */
        "verticalAlignment": "start" | "center" | "end";
    }
    interface SqmReferralIframe {
        /**
          * @undocumented 
          * @uiType object
         */
        "demoData"?: DemoData<ReferralIframeViewProps>;
        /**
          * @uiName Height of the iframe container
         */
        "iframeHeight": string;
        /**
          * @uiName URL of iframe to display
          * @uiRequired
         */
        "iframeSrc": string;
        /**
          * @uiName Width of the iframe container
         */
        "iframeWidth": string;
    }
    interface SqmReferralTable {
        /**
          * @undocumented 
          * @uiType object
         */
        "demoData"?: DemoData<GenericTableViewProps>;
        /**
          * @uiName Hide Column Labels (Mobile View)
         */
        "hiddenColumns"?: string;
        /**
          * @uiName Hide Columns (Mobile View)
         */
        "mdBreakpoint"?: number;
        /**
          * @uiName View More button text
         */
        "moreLabel"?: string;
        /**
          * @uiName Number of referrals per page
         */
        "perPage": number;
        /**
          * @uiName Previous button text
         */
        "prevLabel"?: string;
        /**
          * Filters to only show referrals in this program. Will default to filtering by the program context where this table lives. If no program ID is set or provided by context, then shows all referrals from all programs. If program ID is "classic", shows classic-only referrals
          * @uiName Program
         */
        "programId": string;
        /**
          * @uiName Show column labels
         */
        "showLabels"?: boolean;
        /**
          * @uiName Show Referred by user in table
         */
        "showReferrer"?: boolean;
        /**
          * @uiName Hide Columns (Mobile View)
         */
        "smBreakpoint"?: number;
    }
    interface SqmReferralTableCell {
        "innerTemplate": string;
    }
    interface SqmReferralTableColumn {
        /**
          * @uiName Column Title
         */
        "columnTitle": string;
        "renderCell": (_: Referral) => Promise<any>;
        "renderLabel": () => Promise<string>;
    }
    interface SqmReferralTableDateCell {
        "date": number;
        "locale": string;
    }
    interface SqmReferralTableDateColumn {
        /**
          * @uiName Date Column Title
         */
        "columnTitle": string;
        /**
          * @uiName Date Displayed
          * @uiType string
          * @uiEnum ["dateConverted", "dateReferralStarted", "dateFraudChecksCompleted", "dateModerated", "dateModified", "dateReferralEnded", "dateReferralPaid", "dateUserModified"]
         */
        "dateShown": ReferralDates;
        "renderCell": (data: Referral, locale: string) => Promise<any>;
        "renderLabel": () => Promise<string>;
        "renderReferrerCell": (data: Referrer) => Promise<any>;
    }
    interface SqmReferralTableRewardsCell {
        "expiringText": string;
        "fuelTankText": string;
        "hideDetails": boolean;
        "locale": string;
        "pendingForText": string;
        "rewardReceivedText": string;
        "rewards": Reward[];
        "statusLongText": string;
        "statusText": string;
    }
    interface SqmReferralTableRewardsColumn {
        /**
          * @uiName Reward column title
         */
        "columnTitle": string;
        /**
          * @uiName Reward Expiring Text
         */
        "expiringText": string;
        /**
          * @uiName Fuel Tank Code Text
         */
        "fuelTankText": string;
        /**
          * @uiName Hide dropdown details of reward
         */
        "hideDetails": boolean;
        /**
          * @uiName Reward Pending Text
         */
        "pendingForText": string;
        "renderCell": (data: Referral, locale: string) => Promise<any>;
        "renderLabel": () => Promise<string>;
        "renderReferrerCell": (data: Referrer) => Promise<any>;
        /**
          * @uiName Reward Received Text
         */
        "rewardReceivedText": string;
        /**
          * @uiName Reward Status Long Text
         */
        "statusLongText": string;
        /**
          * @uiName Reward Status Text
         */
        "statusText": string;
    }
    interface SqmReferralTableStatusCell {
        "converted": boolean;
        "statusText": string;
    }
    interface SqmReferralTableStatusColumn {
        /**
          * @uiName Column Title
         */
        "columnTitle": string;
        /**
          * @uiName Converted Status Text
         */
        "convertedStatusText": string;
        /**
          * @uiName In Progress Status Text
         */
        "inProgressStatusText": string;
        "renderCell": (data: Referral) => Promise<any>;
        "renderLabel": () => Promise<string>;
        "renderReferrerCell": (data: Referrer) => Promise<any>;
    }
    interface SqmReferralTableUserCell {
        "name": string;
    }
    interface SqmReferralTableUserColumn {
        /**
          * @uiName Name displayed for anonymous users
         */
        "anonymousUser": string;
        /**
          * @uiName User Column Title
         */
        "columnTitle": string;
        /**
          * @uiName Name displayed for deleted users
         */
        "deletedUser": string;
        "renderCell": (data: Referral) => Promise<any>;
        "renderLabel": () => Promise<string>;
        "renderReferrerCell": (data: Referrer) => Promise<any>;
    }
    interface SqmRefreshButton {
        /**
          * @uiName Icon to show in the slot
         */
        "icon"?: string;
    }
    interface SqmRewardExchangeList {
        /**
          * @uiName Back Button Text
         */
        "backText": string;
        /**
          * @uiName Exchange button text
         */
        "buttonText": string;
        /**
          * @uiName Cancel Button Text
         */
        "cancelText": string;
        /**
          * @uiName Choose Amount Progress Title
         */
        "chooseAmountTitle": string;
        /**
          * @uiName Choose Reward Progress Title
         */
        "chooseRewardTitle": string;
        /**
          * @uiName Confirmation Progress Title
         */
        "confirmationTitle": string;
        /**
          * @uiName Continue Button Text
         */
        "continueText": string;
        /**
          * @uiName Continue to Confirmation Button Text
         */
        "continueToConfirmationText": string;
        /**
          * Shown in the confirmation state.
          * @uiName Cost Row Title
         */
        "costTitle": string;
        /**
          * @undocumented 
          * @uiType object
         */
        "demoData"?: DemoData<RewardExchangeViewProps>;
        /**
          * @uiName Done Text
         */
        "doneText": string;
        /**
          * @uiName Exchange button text
         */
        "notAvailableError": string;
        /**
          * @uiName Not Enough Available Error Message
         */
        "notEnoughError": string;
        /**
          * @uiName Promo Code Text
         */
        "promoCode": string;
        /**
          * @uiName Reward List Error Message
         */
        "queryError": string;
        /**
          * @uiName Redeem Button Text
         */
        "redeemText": string;
        /**
          * @uiName Confirmation Title Text
         */
        "redeemTitle": string;
        /**
          * @uiName Redemption Error Message
         */
        "redemptionError": string;
        /**
          * @uiName Redemption Success Message
         */
        "redemptionSuccessText": string;
        /**
          * Shown in the confirmation state.
          * @uiName Reward Amount Row Title
         */
        "rewardAmountTitle": string;
        /**
          * Shown in the confirmation state.
          * @uiName Reward Row Title
         */
        "rewardNameTitle": string;
        /**
          * @uiName Reward Title Text
         */
        "rewardTitle": string;
        /**
          * @uiName Select Amount Text
         */
        "selectText": string;
        /**
          * @uiName Number of Skeleton Cards
         */
        "skeletonCardNum": number;
        /**
          * @uiName Reward Exchange Amount Text
         */
        "sourceAmountMessage": string;
        /**
          * Shown when a user copies a fuel tank code
          * @uiName Tool Tip Text
         */
        "tooltiptext": string;
    }
    interface SqmRewardsTable {
        /**
          * @undocumented 
          * @uiType object
         */
        "demoData"?: DemoData<GenericTableViewProps>;
        /**
          * @uiName Hide Columns (Mobile View)
         */
        "hiddenColumns"?: string;
        /**
          * @uiName Hide Columns (Mobile View)
         */
        "mdBreakpoint"?: number;
        /**
          * @uiName View More button text
         */
        "moreLabel"?: string;
        /**
          * @uiName Number of rewards per page
         */
        "perPage": number;
        /**
          * @uiName Previous button text
         */
        "prevLabel"?: string;
        /**
          * Filters to only show rewards in this program. Will default to filtering by the program context where this table lives. If no program ID is set or provided by context, then shows all rewards from all programs.
          * @uiName Program
         */
        "programId": string;
        /**
          * @uiName Show column labels
         */
        "showLabels"?: boolean;
        /**
          * @uiName Hide Columns (Mobile View)
         */
        "smBreakpoint"?: number;
    }
    interface SqmRewardsTableDateCell {
        "date": number;
        "locale": string;
    }
    interface SqmRewardsTableDateColumn {
        /**
          * @uiName Date Column Title
         */
        "columnTitle": string;
        /**
          * @uiName Date Displayed
          * @uiType string
          * @uiEnum ["dateGiven", "dateExpires", "dateCancelled", "dateRedeemed", "dateScheduledFor"]
         */
        "dateShown": string;
        "renderCell": (data: Reward[], locale: string) => Promise<any>;
        "renderLabel": () => Promise<string>;
    }
    interface SqmRewardsTableRewardCell {
        "availableText": string;
        "locale": string;
        "redeemedText": string;
        "reward": Reward;
    }
    interface SqmRewardsTableRewardColumn {
        /**
          * @uiName Remaining Amount Text
         */
        "availableText": string;
        /**
          * @uiName Reward column title
         */
        "columnTitle": string;
        /**
          * @uiName Redeemed Amount Text
         */
        "redeemedText": string;
        "renderCell": (data: Reward[], locale: string) => Promise<any>;
        "renderLabel": () => Promise<string>;
    }
    interface SqmRewardsTableSourceCell {
        "anonymousUserText": string;
        "deletedUserText": string;
        "locale": string;
        "referralText": string;
        "reward": Reward;
        "rewardExchangeText": string;
        "rewardSourceText": string;
    }
    interface SqmRewardsTableSourceColumn {
        /**
          * @uiName Name displayed for anonymous users
         */
        "anonymousUser": string;
        /**
          * @uiName User Column Title
         */
        "columnTitle": string;
        /**
          * @uiName Name displayed for deleted users
         */
        "deletedUser": string;
        /**
          * Shown when a reward has been created by a referral
          * @uiName Referral Text
         */
        "referralText": string;
        "renderCell": (data: Reward[], locale: any) => Promise<any>;
        "renderLabel": () => Promise<string>;
        /**
          * @uiName Reward Exchange label
         */
        "rewardExchangeText": string;
        /**
          * @uiName Reward Source Text
         */
        "rewardSourceText": string;
    }
    interface SqmRewardsTableStatusCell {
        "expiryText": string;
        "locale": string;
        "pendingScheduled": string;
        "pendingUnhandled": string;
        "pendingUsTax": string;
        "reward": Reward;
        "statusText": string;
    }
    interface SqmRewardsTableStatusColumn {
        /**
          * @uiName Column Title
         */
        "columnTitle": string;
        /**
          * @uiName Expired Status Text
         */
        "expiryText": string;
        "renderCell": (data: Reward[], locale: string) => Promise<any>;
        "renderLabel": () => Promise<string>;
        /**
          * @uiName Reward Status Text
         */
        "statusText": string;
    }
    interface SqmRoute {
        /**
          * @uiName Navigation path name
         */
        "path": string;
    }
    interface SqmRouter {
    }
    interface SqmScroll {
        "buttonText": string;
        "buttonType": string;
        "scrollAnimation": "smooth" | "auto";
        "scrollId"?: string;
        "scrollTagName"?: string;
    }
    interface SqmShareButton {
        /**
          * @uiName Button background color
          * @uiWidget color
         */
        "backgroundcolor"?: string;
        /**
          * @uiName Configure border radius with pixel amount
         */
        "borderradius"?: number;
        /**
          * @undocumented 
          * @uiType object
         */
        "demoData"?: DemoData<ShareButtonViewProps>;
        /**
          * @uiName Disabled
         */
        "disabled"?: boolean;
        /**
          * @uiName Hide the icon
         */
        "hideicon"?: boolean;
        /**
          * @uiName Hide the text
         */
        "hidetext"?: boolean;
        /**
          * Options available at https://shoelace.style/components/icon
          * @uiName Icon used in button. Will try to select an icon based on the share medium if left empty.
         */
        "icon"?: string;
        /**
          * @uiName Icon Location
          * @uiType string
          * @uiEnum ["prefix", "suffix" ]
          * @uiEnumNames ["Prefix", "Suffix"]
         */
        "iconslot"?: "prefix" | "suffix";
        /**
          * The social medium to share on. Share messages and links will be pulled from your program config and tagged for analytics.
          * @uiName Share Medium
          * @uiType string
          * @uiEnum ["facebook", "twitter", "email", "direct", "linkedin", "sms", "fbmessenger", "whatsapp", "linemessenger", "pinterest" ]
          * @uiEnumNames ["Facebook", "Twitter", "Email", "Web Share Sheet", "Linkedin", "SMS", "Facebook Messenger", "Whatsapp", "Line Messenger", "Pinterest"]
         */
        "medium": | "facebook"
    | "twitter"
    | "email"
    | "direct"
    | "linkedin"
    | "sms"
    | "fbmessenger"
    | "whatsapp"
    | "linemessenger"
    | "pinterest"
    | "reminder"
    | "unknown";
        /**
          * @uiName Display as pill
         */
        "pill"?: boolean;
        /**
          * Optional programId, or uses the programId context where this button is rendered.
          * @uiName Program ID
         */
        "programId"?: string;
        /**
          * @uiName Text used for native sharing (mobile only)
         */
        "sharetext"?: string;
        /**
          * @uiName Title used for native sharing (mobile only)
         */
        "sharetitle"?: string;
        /**
          * @uiName Button Size
          * @uiType string
          * @uiEnum ["small", "medium", "large" ]
          * @uiEnumNames ["Small", "Medium", "Large"]
         */
        "size"?: "small" | "medium" | "large";
        /**
          * @uiName Button text color
          * @uiWidget color
         */
        "textcolor"?: string;
        /**
          * @uiType string
          * @uiName Button Style
          * @uiEnum ["primary" , "success", "info", "warning", "danger", "default", "text" ]
         */
        "type"?: | "primary"
    | "success"
    | "info"
    | "warning"
    | "danger"
    | "default"
    | "text";
    }
    interface SqmShareCode {
        /**
          * @undocumented 
          * @uiType object
         */
        "demoData"?: DemoData<ShareLinkViewProps>;
        /**
          * The ID of the program that should generate the code. Defaults to the program ID in context where this widget is loaded.
          * @uiName Program ID
         */
        "programId"?: string;
        /**
          * The number of milliseconds that the tooltip will appear for
          * @uiName Tooltip lifespan
         */
        "tooltiplifespan": number;
        /**
          * This is shown after someone has successfully copied the cpde to the clipboard.
          * @uiName Tooltip text
         */
        "tooltiptext": string;
    }
    interface SqmShareLink {
        /**
          * @undocumented 
          * @uiType object
         */
        "demoData"?: DemoData<ShareLinkViewProps>;
        /**
          * The ID of the program that should generate the link. Defaults to the program ID in context where this widget is loaded.
          * @uiName Program ID
         */
        "programId"?: string;
        /**
          * The number of milliseconds that the tooltip will appear for
          * @uiName Tooltip lifespan
         */
        "tooltiplifespan": number;
        /**
          * This is shown after someone has successfully copied the link to the clipboard.
          * @uiName Tooltip text
         */
        "tooltiptext": string;
    }
    interface SqmStatContainer {
        /**
          * @uiName Space between stats
          * @uiType string
          * @uiEnum ["none", "xxx-small", "xx-small", "x-small", "small", "medium", "large", "x-large", "xx-large", "xxx-large", "xxxx-large"]
         */
        "space": Spacing;
    }
    interface SqmStencilbook {
    }
    interface SqmTab {
        "header": string;
    }
    interface SqmTableCell {
        "colspan": number;
        "padding": string;
    }
    interface SqmTableRow {
        "border": string;
    }
    interface SqmTabs {
        /**
          * Used to specify the placement of the tabs
          * @uiName Tabs Placement
          * @uiEnum ["left", "right", "bottom", null]
         */
        "placement"?: "left" | "right" | "bottom" | null;
    }
    interface SqmTaskCard {
        /**
          * @uiName CTA Button Link
         */
        "buttonLink": string;
        /**
          * @uiName CTA Button Text
         */
        "buttonText": string;
        /**
          * @uiName Title Text
         */
        "cardTitle": string;
        /**
          * Displays the amount of times that a user has completed a repeatable task.
          * @uiName Completed Count Text
         */
        "completedText": string;
        /**
          * @undocumented 
          * @uiType object
         */
        "demoData"?: DemoData<TaskCardViewProps | BigStatViewProps>;
        /**
          * @uiName Description Text
         */
        "description": string;
        /**
          * Timeframe that the task card will be shown
          * @uiName Display Duration
          * @uiWidget DateRange
          * @uiOptions {"allowPastDates":true, "months": 1}
         */
        "displayDuration": string;
        /**
          * Shown to users after the end of the task duration.
          * @uiName Ended Date Message
         */
        "endedMessage": string;
        /**
          * @uiName Event key of task card button
         */
        "eventKey"?: string;
        /**
          * @uiName Expiry Date Message
         */
        "expiryMessage": string;
        /**
          * The number of times a reward can be earned.  Use zero for no limit (the default).
          * @uiName Repeat Amount
         */
        "finite": number;
        /**
          * @uiName Goal Completion Number
         */
        "goal": number;
        /**
          * @uiName CTA Button Link Open in New Tab
         */
        "openNewTab": boolean;
        /**
          * @uiName Program ID override
         */
        "programId"?: string;
        /**
          * @uiName Progress Bar Unit
         */
        "progressBarUnit": string;
        /**
          * @uiName Goal Repeatable
         */
        "repeatable": boolean;
        /**
          * @uiName Reward Amount
         */
        "rewardAmount": string;
        /**
          * @uiName Reward Duration
          * @uiWidget DateRange
          * @uiOptions {"allowPastDates":true, "months": 1}
         */
        "rewardDuration": string;
        /**
          * @uiName Reward Unit
         */
        "rewardUnit": string;
        /**
          * @uiName Show Progress Bar
         */
        "showProgressBar": boolean;
        /**
          * Shown to users before the start of the task duration.
          * @uiName Start Date Message
         */
        "startsOnMessage": string;
        /**
          * Select what type of stat to display for the goal. Manual paths are also supported.
          * @uiWidget StatTypeSelectWidget
          * @uiName Goal Progress Source
          * @uiOptions {"version": 1.1}
         */
        "statType": string;
        /**
          * @uiName Progress Bar Steps
         */
        "steps": boolean;
    }
    interface SqmText {
    }
    interface SqmTextSpan {
        /**
          * @uiName Text
         */
        "text": string;
        /**
          * @uiName Text
          * @uiType string
          * @uiEnum ["p", "subtext", "h1", "h2", "h3", "h4"]
         */
        "type": "p" | "subtext" | "h1" | "h2" | "h3" | "h4";
    }
    interface SqmTimeline {
        /**
          * @uiName Icon
          * @uiType string
          * @uiEnum ["gift", "circle"]
         */
        "icon": string;
    }
    interface SqmTimelineEntry {
        /**
          * @uiName Description
         */
        "desc": string;
        /**
          * @uiName Icon
          * @uiType string
          * @uiEnum ["gift", "circle"]
         */
        "icon": string;
        /**
          * @undocumented
         */
        "line"?: boolean;
        /**
          * @uiName Reward Amount
         */
        "reward": string;
        /**
          * @uiName Reward Unit
         */
        "unit": string;
    }
    interface SqmTitledSection {
        /**
          * Label for the section unless overwritten via the label slot.
          * @uiName Label
         */
        "label": string;
        /**
          * @uiName Label margin style
          * @uiType string
          * @uiEnum ["none", "xxx-small", "xx-small", "x-small", "small", "medium", "large", "x-large", "xx-large", "xxx-large", "xxxx-large"]
         */
        "labelMargin": Spacing;
        /**
          * @uiName Section padding
          * @uiType string
          * @uiEnum ["none", "xxx-small", "xx-small", "x-small", "small", "medium", "large", "x-large", "xx-large", "xxx-large", "xxxx-large"]
         */
        "padding": Spacing;
        /**
          * @uiName Text Align
          * @uiType string
          * @uiEnum ["left", "center", "right"]
         */
        "textAlign": "left" | "center" | "right";
    }
    interface SqmUserName {
        /**
          * @undocumented 
          * @uiType object
         */
        "demoData"?: DemoData<UserNameViewProps>;
        /**
          * @uiName Fallback name for nameless users
         */
        "fallback": string;
        /**
          * @uiName Loading text
         */
        "loadingText": string;
    }
}
declare global {
    interface HTMLSqmAssetCardElement extends Components.SqmAssetCard, HTMLStencilElement {
    }
    var HTMLSqmAssetCardElement: {
        prototype: HTMLSqmAssetCardElement;
        new (): HTMLSqmAssetCardElement;
    };
    interface HTMLSqmBigStatElement extends Components.SqmBigStat, HTMLStencilElement {
    }
    var HTMLSqmBigStatElement: {
        prototype: HTMLSqmBigStatElement;
        new (): HTMLSqmBigStatElement;
    };
    interface HTMLSqmBrandElement extends Components.SqmBrand, HTMLStencilElement {
    }
    var HTMLSqmBrandElement: {
        prototype: HTMLSqmBrandElement;
        new (): HTMLSqmBrandElement;
    };
    interface HTMLSqmCardFeedElement extends Components.SqmCardFeed, HTMLStencilElement {
    }
    var HTMLSqmCardFeedElement: {
        prototype: HTMLSqmCardFeedElement;
        new (): HTMLSqmCardFeedElement;
    };
    interface HTMLSqmDividedLayoutElement extends Components.SqmDividedLayout, HTMLStencilElement {
    }
    var HTMLSqmDividedLayoutElement: {
        prototype: HTMLSqmDividedLayoutElement;
        new (): HTMLSqmDividedLayoutElement;
    };
    interface HTMLSqmEditProfileElement extends Components.SqmEditProfile, HTMLStencilElement {
    }
    var HTMLSqmEditProfileElement: {
        prototype: HTMLSqmEditProfileElement;
        new (): HTMLSqmEditProfileElement;
    };
    interface HTMLSqmEmptyElement extends Components.SqmEmpty, HTMLStencilElement {
    }
    var HTMLSqmEmptyElement: {
        prototype: HTMLSqmEmptyElement;
        new (): HTMLSqmEmptyElement;
    };
    interface HTMLSqmFormMessageElement extends Components.SqmFormMessage, HTMLStencilElement {
    }
    var HTMLSqmFormMessageElement: {
        prototype: HTMLSqmFormMessageElement;
        new (): HTMLSqmFormMessageElement;
    };
    interface HTMLSqmGraphqlClientProviderElement extends Components.SqmGraphqlClientProvider, HTMLStencilElement {
    }
    var HTMLSqmGraphqlClientProviderElement: {
        prototype: HTMLSqmGraphqlClientProviderElement;
        new (): HTMLSqmGraphqlClientProviderElement;
    };
    interface HTMLSqmHeroElement extends Components.SqmHero, HTMLStencilElement {
    }
    var HTMLSqmHeroElement: {
        prototype: HTMLSqmHeroElement;
        new (): HTMLSqmHeroElement;
    };
    interface HTMLSqmHeroImageElement extends Components.SqmHeroImage, HTMLStencilElement {
    }
    var HTMLSqmHeroImageElement: {
        prototype: HTMLSqmHeroImageElement;
        new (): HTMLSqmHeroImageElement;
    };
    interface HTMLSqmHookStoryContainerElement extends Components.SqmHookStoryContainer, HTMLStencilElement {
    }
    var HTMLSqmHookStoryContainerElement: {
        prototype: HTMLSqmHookStoryContainerElement;
        new (): HTMLSqmHookStoryContainerElement;
    };
    interface HTMLSqmImageElement extends Components.SqmImage, HTMLStencilElement {
    }
    var HTMLSqmImageElement: {
        prototype: HTMLSqmImageElement;
        new (): HTMLSqmImageElement;
    };
    interface HTMLSqmLeaderboardElement extends Components.SqmLeaderboard, HTMLStencilElement {
    }
    var HTMLSqmLeaderboardElement: {
        prototype: HTMLSqmLeaderboardElement;
        new (): HTMLSqmLeaderboardElement;
    };
    interface HTMLSqmLeaderboardRankElement extends Components.SqmLeaderboardRank, HTMLStencilElement {
    }
    var HTMLSqmLeaderboardRankElement: {
        prototype: HTMLSqmLeaderboardRankElement;
        new (): HTMLSqmLeaderboardRankElement;
    };
    interface HTMLSqmNameFieldsElement extends Components.SqmNameFields, HTMLStencilElement {
    }
    var HTMLSqmNameFieldsElement: {
        prototype: HTMLSqmNameFieldsElement;
        new (): HTMLSqmNameFieldsElement;
    };
    interface HTMLSqmNavigationMenuElement extends Components.SqmNavigationMenu, HTMLStencilElement {
    }
    var HTMLSqmNavigationMenuElement: {
        prototype: HTMLSqmNavigationMenuElement;
        new (): HTMLSqmNavigationMenuElement;
    };
    interface HTMLSqmNavigationSidebarElement extends Components.SqmNavigationSidebar, HTMLStencilElement {
    }
    var HTMLSqmNavigationSidebarElement: {
        prototype: HTMLSqmNavigationSidebarElement;
        new (): HTMLSqmNavigationSidebarElement;
    };
    interface HTMLSqmNavigationSidebarItemElement extends Components.SqmNavigationSidebarItem, HTMLStencilElement {
    }
    var HTMLSqmNavigationSidebarItemElement: {
        prototype: HTMLSqmNavigationSidebarItemElement;
        new (): HTMLSqmNavigationSidebarItemElement;
    };
    interface HTMLSqmPasswordFieldElement extends Components.SqmPasswordField, HTMLStencilElement {
    }
    var HTMLSqmPasswordFieldElement: {
        prototype: HTMLSqmPasswordFieldElement;
        new (): HTMLSqmPasswordFieldElement;
    };
    interface HTMLSqmPopupContainerElement extends Components.SqmPopupContainer, HTMLStencilElement {
    }
    var HTMLSqmPopupContainerElement: {
        prototype: HTMLSqmPopupContainerElement;
        new (): HTMLSqmPopupContainerElement;
    };
    interface HTMLSqmPortalChangePasswordElement extends Components.SqmPortalChangePassword, HTMLStencilElement {
    }
    var HTMLSqmPortalChangePasswordElement: {
        prototype: HTMLSqmPortalChangePasswordElement;
        new (): HTMLSqmPortalChangePasswordElement;
    };
    interface HTMLSqmPortalContainerElement extends Components.SqmPortalContainer, HTMLStencilElement {
    }
    var HTMLSqmPortalContainerElement: {
        prototype: HTMLSqmPortalContainerElement;
        new (): HTMLSqmPortalContainerElement;
    };
    interface HTMLSqmPortalEmailVerificationElement extends Components.SqmPortalEmailVerification, HTMLStencilElement {
    }
    var HTMLSqmPortalEmailVerificationElement: {
        prototype: HTMLSqmPortalEmailVerificationElement;
        new (): HTMLSqmPortalEmailVerificationElement;
    };
    interface HTMLSqmPortalFooterElement extends Components.SqmPortalFooter, HTMLStencilElement {
    }
    var HTMLSqmPortalFooterElement: {
        prototype: HTMLSqmPortalFooterElement;
        new (): HTMLSqmPortalFooterElement;
    };
    interface HTMLSqmPortalForgotPasswordElement extends Components.SqmPortalForgotPassword, HTMLStencilElement {
    }
    var HTMLSqmPortalForgotPasswordElement: {
        prototype: HTMLSqmPortalForgotPasswordElement;
        new (): HTMLSqmPortalForgotPasswordElement;
    };
    interface HTMLSqmPortalFrameElement extends Components.SqmPortalFrame, HTMLStencilElement {
    }
    var HTMLSqmPortalFrameElement: {
        prototype: HTMLSqmPortalFrameElement;
        new (): HTMLSqmPortalFrameElement;
    };
    interface HTMLSqmPortalLoginElement extends Components.SqmPortalLogin, HTMLStencilElement {
    }
    var HTMLSqmPortalLoginElement: {
        prototype: HTMLSqmPortalLoginElement;
        new (): HTMLSqmPortalLoginElement;
    };
    interface HTMLSqmPortalLogoutElement extends Components.SqmPortalLogout, HTMLStencilElement {
    }
    var HTMLSqmPortalLogoutElement: {
        prototype: HTMLSqmPortalLogoutElement;
        new (): HTMLSqmPortalLogoutElement;
    };
    interface HTMLSqmPortalProfileElement extends Components.SqmPortalProfile, HTMLStencilElement {
    }
    var HTMLSqmPortalProfileElement: {
        prototype: HTMLSqmPortalProfileElement;
        new (): HTMLSqmPortalProfileElement;
    };
    interface HTMLSqmPortalProtectedRouteElement extends Components.SqmPortalProtectedRoute, HTMLStencilElement {
    }
    var HTMLSqmPortalProtectedRouteElement: {
        prototype: HTMLSqmPortalProtectedRouteElement;
        new (): HTMLSqmPortalProtectedRouteElement;
    };
    interface HTMLSqmPortalRegisterElement extends Components.SqmPortalRegister, HTMLStencilElement {
    }
    var HTMLSqmPortalRegisterElement: {
        prototype: HTMLSqmPortalRegisterElement;
        new (): HTMLSqmPortalRegisterElement;
    };
    interface HTMLSqmPortalResetPasswordElement extends Components.SqmPortalResetPassword, HTMLStencilElement {
    }
    var HTMLSqmPortalResetPasswordElement: {
        prototype: HTMLSqmPortalResetPasswordElement;
        new (): HTMLSqmPortalResetPasswordElement;
    };
    interface HTMLSqmPortalVerifyEmailElement extends Components.SqmPortalVerifyEmail, HTMLStencilElement {
    }
    var HTMLSqmPortalVerifyEmailElement: {
        prototype: HTMLSqmPortalVerifyEmailElement;
        new (): HTMLSqmPortalVerifyEmailElement;
    };
    interface HTMLSqmProgramExplainerElement extends Components.SqmProgramExplainer, HTMLStencilElement {
    }
    var HTMLSqmProgramExplainerElement: {
        prototype: HTMLSqmProgramExplainerElement;
        new (): HTMLSqmProgramExplainerElement;
    };
    interface HTMLSqmProgramExplainerStepElement extends Components.SqmProgramExplainerStep, HTMLStencilElement {
    }
    var HTMLSqmProgramExplainerStepElement: {
        prototype: HTMLSqmProgramExplainerStepElement;
        new (): HTMLSqmProgramExplainerStepElement;
    };
    interface HTMLSqmProgramMenuElement extends Components.SqmProgramMenu, HTMLStencilElement {
    }
    var HTMLSqmProgramMenuElement: {
        prototype: HTMLSqmProgramMenuElement;
        new (): HTMLSqmProgramMenuElement;
    };
    interface HTMLSqmReferralCardElement extends Components.SqmReferralCard, HTMLStencilElement {
    }
    var HTMLSqmReferralCardElement: {
        prototype: HTMLSqmReferralCardElement;
        new (): HTMLSqmReferralCardElement;
    };
    interface HTMLSqmReferralIframeElement extends Components.SqmReferralIframe, HTMLStencilElement {
    }
    var HTMLSqmReferralIframeElement: {
        prototype: HTMLSqmReferralIframeElement;
        new (): HTMLSqmReferralIframeElement;
    };
    interface HTMLSqmReferralTableElement extends Components.SqmReferralTable, HTMLStencilElement {
    }
    var HTMLSqmReferralTableElement: {
        prototype: HTMLSqmReferralTableElement;
        new (): HTMLSqmReferralTableElement;
    };
    interface HTMLSqmReferralTableCellElement extends Components.SqmReferralTableCell, HTMLStencilElement {
    }
    var HTMLSqmReferralTableCellElement: {
        prototype: HTMLSqmReferralTableCellElement;
        new (): HTMLSqmReferralTableCellElement;
    };
    interface HTMLSqmReferralTableColumnElement extends Components.SqmReferralTableColumn, HTMLStencilElement {
    }
    var HTMLSqmReferralTableColumnElement: {
        prototype: HTMLSqmReferralTableColumnElement;
        new (): HTMLSqmReferralTableColumnElement;
    };
    interface HTMLSqmReferralTableDateCellElement extends Components.SqmReferralTableDateCell, HTMLStencilElement {
    }
    var HTMLSqmReferralTableDateCellElement: {
        prototype: HTMLSqmReferralTableDateCellElement;
        new (): HTMLSqmReferralTableDateCellElement;
    };
    interface HTMLSqmReferralTableDateColumnElement extends Components.SqmReferralTableDateColumn, HTMLStencilElement {
    }
    var HTMLSqmReferralTableDateColumnElement: {
        prototype: HTMLSqmReferralTableDateColumnElement;
        new (): HTMLSqmReferralTableDateColumnElement;
    };
    interface HTMLSqmReferralTableRewardsCellElement extends Components.SqmReferralTableRewardsCell, HTMLStencilElement {
    }
    var HTMLSqmReferralTableRewardsCellElement: {
        prototype: HTMLSqmReferralTableRewardsCellElement;
        new (): HTMLSqmReferralTableRewardsCellElement;
    };
    interface HTMLSqmReferralTableRewardsColumnElement extends Components.SqmReferralTableRewardsColumn, HTMLStencilElement {
    }
    var HTMLSqmReferralTableRewardsColumnElement: {
        prototype: HTMLSqmReferralTableRewardsColumnElement;
        new (): HTMLSqmReferralTableRewardsColumnElement;
    };
    interface HTMLSqmReferralTableStatusCellElement extends Components.SqmReferralTableStatusCell, HTMLStencilElement {
    }
    var HTMLSqmReferralTableStatusCellElement: {
        prototype: HTMLSqmReferralTableStatusCellElement;
        new (): HTMLSqmReferralTableStatusCellElement;
    };
    interface HTMLSqmReferralTableStatusColumnElement extends Components.SqmReferralTableStatusColumn, HTMLStencilElement {
    }
    var HTMLSqmReferralTableStatusColumnElement: {
        prototype: HTMLSqmReferralTableStatusColumnElement;
        new (): HTMLSqmReferralTableStatusColumnElement;
    };
    interface HTMLSqmReferralTableUserCellElement extends Components.SqmReferralTableUserCell, HTMLStencilElement {
    }
    var HTMLSqmReferralTableUserCellElement: {
        prototype: HTMLSqmReferralTableUserCellElement;
        new (): HTMLSqmReferralTableUserCellElement;
    };
    interface HTMLSqmReferralTableUserColumnElement extends Components.SqmReferralTableUserColumn, HTMLStencilElement {
    }
    var HTMLSqmReferralTableUserColumnElement: {
        prototype: HTMLSqmReferralTableUserColumnElement;
        new (): HTMLSqmReferralTableUserColumnElement;
    };
    interface HTMLSqmRefreshButtonElement extends Components.SqmRefreshButton, HTMLStencilElement {
    }
    var HTMLSqmRefreshButtonElement: {
        prototype: HTMLSqmRefreshButtonElement;
        new (): HTMLSqmRefreshButtonElement;
    };
    interface HTMLSqmRewardExchangeListElement extends Components.SqmRewardExchangeList, HTMLStencilElement {
    }
    var HTMLSqmRewardExchangeListElement: {
        prototype: HTMLSqmRewardExchangeListElement;
        new (): HTMLSqmRewardExchangeListElement;
    };
    interface HTMLSqmRewardsTableElement extends Components.SqmRewardsTable, HTMLStencilElement {
    }
    var HTMLSqmRewardsTableElement: {
        prototype: HTMLSqmRewardsTableElement;
        new (): HTMLSqmRewardsTableElement;
    };
    interface HTMLSqmRewardsTableDateCellElement extends Components.SqmRewardsTableDateCell, HTMLStencilElement {
    }
    var HTMLSqmRewardsTableDateCellElement: {
        prototype: HTMLSqmRewardsTableDateCellElement;
        new (): HTMLSqmRewardsTableDateCellElement;
    };
    interface HTMLSqmRewardsTableDateColumnElement extends Components.SqmRewardsTableDateColumn, HTMLStencilElement {
    }
    var HTMLSqmRewardsTableDateColumnElement: {
        prototype: HTMLSqmRewardsTableDateColumnElement;
        new (): HTMLSqmRewardsTableDateColumnElement;
    };
    interface HTMLSqmRewardsTableRewardCellElement extends Components.SqmRewardsTableRewardCell, HTMLStencilElement {
    }
    var HTMLSqmRewardsTableRewardCellElement: {
        prototype: HTMLSqmRewardsTableRewardCellElement;
        new (): HTMLSqmRewardsTableRewardCellElement;
    };
    interface HTMLSqmRewardsTableRewardColumnElement extends Components.SqmRewardsTableRewardColumn, HTMLStencilElement {
    }
    var HTMLSqmRewardsTableRewardColumnElement: {
        prototype: HTMLSqmRewardsTableRewardColumnElement;
        new (): HTMLSqmRewardsTableRewardColumnElement;
    };
    interface HTMLSqmRewardsTableSourceCellElement extends Components.SqmRewardsTableSourceCell, HTMLStencilElement {
    }
    var HTMLSqmRewardsTableSourceCellElement: {
        prototype: HTMLSqmRewardsTableSourceCellElement;
        new (): HTMLSqmRewardsTableSourceCellElement;
    };
    interface HTMLSqmRewardsTableSourceColumnElement extends Components.SqmRewardsTableSourceColumn, HTMLStencilElement {
    }
    var HTMLSqmRewardsTableSourceColumnElement: {
        prototype: HTMLSqmRewardsTableSourceColumnElement;
        new (): HTMLSqmRewardsTableSourceColumnElement;
    };
    interface HTMLSqmRewardsTableStatusCellElement extends Components.SqmRewardsTableStatusCell, HTMLStencilElement {
    }
    var HTMLSqmRewardsTableStatusCellElement: {
        prototype: HTMLSqmRewardsTableStatusCellElement;
        new (): HTMLSqmRewardsTableStatusCellElement;
    };
    interface HTMLSqmRewardsTableStatusColumnElement extends Components.SqmRewardsTableStatusColumn, HTMLStencilElement {
    }
    var HTMLSqmRewardsTableStatusColumnElement: {
        prototype: HTMLSqmRewardsTableStatusColumnElement;
        new (): HTMLSqmRewardsTableStatusColumnElement;
    };
    interface HTMLSqmRouteElement extends Components.SqmRoute, HTMLStencilElement {
    }
    var HTMLSqmRouteElement: {
        prototype: HTMLSqmRouteElement;
        new (): HTMLSqmRouteElement;
    };
    interface HTMLSqmRouterElement extends Components.SqmRouter, HTMLStencilElement {
    }
    var HTMLSqmRouterElement: {
        prototype: HTMLSqmRouterElement;
        new (): HTMLSqmRouterElement;
    };
    interface HTMLSqmScrollElement extends Components.SqmScroll, HTMLStencilElement {
    }
    var HTMLSqmScrollElement: {
        prototype: HTMLSqmScrollElement;
        new (): HTMLSqmScrollElement;
    };
    interface HTMLSqmShareButtonElement extends Components.SqmShareButton, HTMLStencilElement {
    }
    var HTMLSqmShareButtonElement: {
        prototype: HTMLSqmShareButtonElement;
        new (): HTMLSqmShareButtonElement;
    };
    interface HTMLSqmShareCodeElement extends Components.SqmShareCode, HTMLStencilElement {
    }
    var HTMLSqmShareCodeElement: {
        prototype: HTMLSqmShareCodeElement;
        new (): HTMLSqmShareCodeElement;
    };
    interface HTMLSqmShareLinkElement extends Components.SqmShareLink, HTMLStencilElement {
    }
    var HTMLSqmShareLinkElement: {
        prototype: HTMLSqmShareLinkElement;
        new (): HTMLSqmShareLinkElement;
    };
    interface HTMLSqmStatContainerElement extends Components.SqmStatContainer, HTMLStencilElement {
    }
    var HTMLSqmStatContainerElement: {
        prototype: HTMLSqmStatContainerElement;
        new (): HTMLSqmStatContainerElement;
    };
    interface HTMLSqmStencilbookElement extends Components.SqmStencilbook, HTMLStencilElement {
    }
    var HTMLSqmStencilbookElement: {
        prototype: HTMLSqmStencilbookElement;
        new (): HTMLSqmStencilbookElement;
    };
    interface HTMLSqmTabElement extends Components.SqmTab, HTMLStencilElement {
    }
    var HTMLSqmTabElement: {
        prototype: HTMLSqmTabElement;
        new (): HTMLSqmTabElement;
    };
    interface HTMLSqmTableCellElement extends Components.SqmTableCell, HTMLStencilElement {
    }
    var HTMLSqmTableCellElement: {
        prototype: HTMLSqmTableCellElement;
        new (): HTMLSqmTableCellElement;
    };
    interface HTMLSqmTableRowElement extends Components.SqmTableRow, HTMLStencilElement {
    }
    var HTMLSqmTableRowElement: {
        prototype: HTMLSqmTableRowElement;
        new (): HTMLSqmTableRowElement;
    };
    interface HTMLSqmTabsElement extends Components.SqmTabs, HTMLStencilElement {
    }
    var HTMLSqmTabsElement: {
        prototype: HTMLSqmTabsElement;
        new (): HTMLSqmTabsElement;
    };
    interface HTMLSqmTaskCardElement extends Components.SqmTaskCard, HTMLStencilElement {
    }
    var HTMLSqmTaskCardElement: {
        prototype: HTMLSqmTaskCardElement;
        new (): HTMLSqmTaskCardElement;
    };
    interface HTMLSqmTextElement extends Components.SqmText, HTMLStencilElement {
    }
    var HTMLSqmTextElement: {
        prototype: HTMLSqmTextElement;
        new (): HTMLSqmTextElement;
    };
    interface HTMLSqmTextSpanElement extends Components.SqmTextSpan, HTMLStencilElement {
    }
    var HTMLSqmTextSpanElement: {
        prototype: HTMLSqmTextSpanElement;
        new (): HTMLSqmTextSpanElement;
    };
    interface HTMLSqmTimelineElement extends Components.SqmTimeline, HTMLStencilElement {
    }
    var HTMLSqmTimelineElement: {
        prototype: HTMLSqmTimelineElement;
        new (): HTMLSqmTimelineElement;
    };
    interface HTMLSqmTimelineEntryElement extends Components.SqmTimelineEntry, HTMLStencilElement {
    }
    var HTMLSqmTimelineEntryElement: {
        prototype: HTMLSqmTimelineEntryElement;
        new (): HTMLSqmTimelineEntryElement;
    };
    interface HTMLSqmTitledSectionElement extends Components.SqmTitledSection, HTMLStencilElement {
    }
    var HTMLSqmTitledSectionElement: {
        prototype: HTMLSqmTitledSectionElement;
        new (): HTMLSqmTitledSectionElement;
    };
    interface HTMLSqmUserNameElement extends Components.SqmUserName, HTMLStencilElement {
    }
    var HTMLSqmUserNameElement: {
        prototype: HTMLSqmUserNameElement;
        new (): HTMLSqmUserNameElement;
    };
    interface HTMLElementTagNameMap {
        "sqm-asset-card": HTMLSqmAssetCardElement;
        "sqm-big-stat": HTMLSqmBigStatElement;
        "sqm-brand": HTMLSqmBrandElement;
        "sqm-card-feed": HTMLSqmCardFeedElement;
        "sqm-divided-layout": HTMLSqmDividedLayoutElement;
        "sqm-edit-profile": HTMLSqmEditProfileElement;
        "sqm-empty": HTMLSqmEmptyElement;
        "sqm-form-message": HTMLSqmFormMessageElement;
        "sqm-graphql-client-provider": HTMLSqmGraphqlClientProviderElement;
        "sqm-hero": HTMLSqmHeroElement;
        "sqm-hero-image": HTMLSqmHeroImageElement;
        "sqm-hook-story-container": HTMLSqmHookStoryContainerElement;
        "sqm-image": HTMLSqmImageElement;
        "sqm-leaderboard": HTMLSqmLeaderboardElement;
        "sqm-leaderboard-rank": HTMLSqmLeaderboardRankElement;
        "sqm-name-fields": HTMLSqmNameFieldsElement;
        "sqm-navigation-menu": HTMLSqmNavigationMenuElement;
        "sqm-navigation-sidebar": HTMLSqmNavigationSidebarElement;
        "sqm-navigation-sidebar-item": HTMLSqmNavigationSidebarItemElement;
        "sqm-password-field": HTMLSqmPasswordFieldElement;
        "sqm-popup-container": HTMLSqmPopupContainerElement;
        "sqm-portal-change-password": HTMLSqmPortalChangePasswordElement;
        "sqm-portal-container": HTMLSqmPortalContainerElement;
        "sqm-portal-email-verification": HTMLSqmPortalEmailVerificationElement;
        "sqm-portal-footer": HTMLSqmPortalFooterElement;
        "sqm-portal-forgot-password": HTMLSqmPortalForgotPasswordElement;
        "sqm-portal-frame": HTMLSqmPortalFrameElement;
        "sqm-portal-login": HTMLSqmPortalLoginElement;
        "sqm-portal-logout": HTMLSqmPortalLogoutElement;
        "sqm-portal-profile": HTMLSqmPortalProfileElement;
        "sqm-portal-protected-route": HTMLSqmPortalProtectedRouteElement;
        "sqm-portal-register": HTMLSqmPortalRegisterElement;
        "sqm-portal-reset-password": HTMLSqmPortalResetPasswordElement;
        "sqm-portal-verify-email": HTMLSqmPortalVerifyEmailElement;
        "sqm-program-explainer": HTMLSqmProgramExplainerElement;
        "sqm-program-explainer-step": HTMLSqmProgramExplainerStepElement;
        "sqm-program-menu": HTMLSqmProgramMenuElement;
        "sqm-referral-card": HTMLSqmReferralCardElement;
        "sqm-referral-iframe": HTMLSqmReferralIframeElement;
        "sqm-referral-table": HTMLSqmReferralTableElement;
        "sqm-referral-table-cell": HTMLSqmReferralTableCellElement;
        "sqm-referral-table-column": HTMLSqmReferralTableColumnElement;
        "sqm-referral-table-date-cell": HTMLSqmReferralTableDateCellElement;
        "sqm-referral-table-date-column": HTMLSqmReferralTableDateColumnElement;
        "sqm-referral-table-rewards-cell": HTMLSqmReferralTableRewardsCellElement;
        "sqm-referral-table-rewards-column": HTMLSqmReferralTableRewardsColumnElement;
        "sqm-referral-table-status-cell": HTMLSqmReferralTableStatusCellElement;
        "sqm-referral-table-status-column": HTMLSqmReferralTableStatusColumnElement;
        "sqm-referral-table-user-cell": HTMLSqmReferralTableUserCellElement;
        "sqm-referral-table-user-column": HTMLSqmReferralTableUserColumnElement;
        "sqm-refresh-button": HTMLSqmRefreshButtonElement;
        "sqm-reward-exchange-list": HTMLSqmRewardExchangeListElement;
        "sqm-rewards-table": HTMLSqmRewardsTableElement;
        "sqm-rewards-table-date-cell": HTMLSqmRewardsTableDateCellElement;
        "sqm-rewards-table-date-column": HTMLSqmRewardsTableDateColumnElement;
        "sqm-rewards-table-reward-cell": HTMLSqmRewardsTableRewardCellElement;
        "sqm-rewards-table-reward-column": HTMLSqmRewardsTableRewardColumnElement;
        "sqm-rewards-table-source-cell": HTMLSqmRewardsTableSourceCellElement;
        "sqm-rewards-table-source-column": HTMLSqmRewardsTableSourceColumnElement;
        "sqm-rewards-table-status-cell": HTMLSqmRewardsTableStatusCellElement;
        "sqm-rewards-table-status-column": HTMLSqmRewardsTableStatusColumnElement;
        "sqm-route": HTMLSqmRouteElement;
        "sqm-router": HTMLSqmRouterElement;
        "sqm-scroll": HTMLSqmScrollElement;
        "sqm-share-button": HTMLSqmShareButtonElement;
        "sqm-share-code": HTMLSqmShareCodeElement;
        "sqm-share-link": HTMLSqmShareLinkElement;
        "sqm-stat-container": HTMLSqmStatContainerElement;
        "sqm-stencilbook": HTMLSqmStencilbookElement;
        "sqm-tab": HTMLSqmTabElement;
        "sqm-table-cell": HTMLSqmTableCellElement;
        "sqm-table-row": HTMLSqmTableRowElement;
        "sqm-tabs": HTMLSqmTabsElement;
        "sqm-task-card": HTMLSqmTaskCardElement;
        "sqm-text": HTMLSqmTextElement;
        "sqm-text-span": HTMLSqmTextSpanElement;
        "sqm-timeline": HTMLSqmTimelineElement;
        "sqm-timeline-entry": HTMLSqmTimelineEntryElement;
        "sqm-titled-section": HTMLSqmTitledSectionElement;
        "sqm-user-name": HTMLSqmUserNameElement;
    }
}
declare namespace LocalJSX {
    interface SqmAssetCard {
        /**
          * @undocumented 
          * @uiType object
         */
        "demoData"?: DemoData<AssetCardViewProps>;
        /**
          * @uiName Banner image
         */
        "imgUrl"?: string;
        /**
          * @uiName Banner title
         */
        "titleText"?: string;
    }
    interface SqmBigStat {
        /**
          * @uiName Alignment - controls the alignment of the flexbox
          * @uiType string
          * @uiEnum ["left", "right", "center"]
         */
        "alignment"?: "left" | "right" | "center";
        /**
          * @undocumented 
          * @uiType object
         */
        "demoData"?: DemoData<BigStatViewProps>;
        /**
          * @uiName Flex Reverse - controls the order of the stat value & description column
         */
        "flexReverse"?: boolean;
        /**
          * The ID of the program that is used to scope stats. Defaults to the program context when no ID is specified.
          * @uiName Program ID
         */
        "programId"?: string;
        /**
          * Select what type of stat to display. Manual paths are also supported.
          * @uiWidget StatTypeSelectWidget
          * @uiName Stat Type
          * @uiOptions {"version": 1.1}
         */
        "statType"?: string;
    }
    interface SqmBrand {
        /**
          * The background color for the portal
          * @uiName Page Background Color
          * @uiWidget color
         */
        "background"?: string;
        /**
          * Controls the primary brand color used in the Mint Components library. Note that this does not affect vanilla components or other component libraries.
          * @uiName Brand Color
          * @uiWidget color
         */
        "brandColor"?: string;
        /**
          * The brand font that you want to use
          * @uiName Brand Font
         */
        "brandFont"?: string;
    }
    interface SqmCardFeed {
        /**
          * @uiName Column Gap
          * @uiType number
         */
        "gap"?: number;
        /**
          * @uiName Card Width
         */
        "width"?: number;
    }
    interface SqmDividedLayout {
        /**
          * @uiName Direction
          * @uiType string
          * @uiEnum ["row", "column"]
         */
        "direction"?: "row" | "column";
        /**
          * Uses CSS border style syntax
          * @uiName Border style
         */
        "dividerStyle"?: string;
    }
    interface SqmEditProfile {
        /**
          * @uiName Cancel button text
         */
        "canceltext"?: string;
        /**
          * @uiName Region field label
         */
        "currentregiontext"?: string;
        /**
          * @undocumented 
          * @uiType object
         */
        "demoData"?: DemoData<EditProfileViewProps>;
        /**
          * @uiName Heading
         */
        "editprofileheader"?: string;
        /**
          * @uiName Enable editing button text
         */
        "editprofiletext"?: string;
        /**
          * @uiName First name field label
         */
        "firstnametext"?: string;
        /**
          * @uiName Last name field label
         */
        "lastnametext"?: string;
        /**
          * @uiName Show or hide current region
         */
        "showregion"?: boolean;
        /**
          * @uiName Update info button text
         */
        "updatetext"?: string;
    }
    interface SqmEmpty {
        /**
          * @uiName Empty State Title
         */
        "emptyStateHeader"?: string;
        /**
          * @uiWidget ImageUpload
          * @uiName Empty State Image Link
         */
        "emptyStateImage"?: string;
        /**
          * @uiName Empty State Text
         */
        "emptyStateText"?: string;
        /**
          * @uiName Table Empty State
         */
        "table"?: boolean;
    }
    interface SqmFormMessage {
        /**
          * @uiName Icon to use in alert
         */
        "icon"?: string;
        /**
          * @uiName Type of alert
         */
        "type"?: string;
    }
    interface SqmGraphqlClientProvider {
        /**
          * @uiName Domain
         */
        "domain"?: string;
    }
    interface SqmHero {
        /**
          * @uiName Background image or color
         */
        "background"?: string;
        /**
          * @uiName Number of columns in the layout
         */
        "columns"?: 1 | 2;
        /**
          * @uiName Padding size
         */
        "paddingSize"?: "none" | "small" | "medium" | "large";
        /**
          * @uiName Secondary background image or color (for use in right column)
         */
        "secondaryBackground"?: string;
        /**
          * @uiName Wrap direction
         */
        "wrapDirection"?: "wrap" | "wrap-reverse";
    }
    interface SqmHeroImage {
        /**
          * @uiName Background Color
          * @uiWidget color
         */
        "backgroundColor"?: string;
        /**
          * @uiName CTA Button Link
         */
        "buttonLink"?: string;
        /**
          * @uiName CTA Button Link Open in New Tab
         */
        "buttonNewTab"?: boolean;
        /**
          * @uiName CTA Button Text
         */
        "buttonText"?: string;
        /**
          * @uiName Description Text
         */
        "description"?: string;
        /**
          * @uiName Title Text
         */
        "header"?: string;
        /**
          * @uiName Image Mobile Position
          * @uiType string
          * @uiEnum ["top", "bottom"]
         */
        "imageMobilePos"?: "top" | "bottom";
        /**
          * @uiName Image Percentage
          * @uiType number
         */
        "imagePercentage"?: number;
        /**
          * @uiName Image Position
          * @uiType string
          * @uiEnum ["left", "center", "right"]
         */
        "imagePos"?: "left" | "center" | "right";
        /**
          * @uiWidget ImageUpload
          * @uiName Image Link
         */
        "imageUrl"?: string;
        /**
          * @uiName Image Layout
          * @uiType string
          * @uiEnum ["overlay", "columns"]
         */
        "layout"?: "overlay" | "columns";
        /**
          * @uiName Overlay Color
          * @uiWidget color
         */
        "overlayColor"?: string;
        /**
          * @uiName Overlay Opacity
         */
        "overlayOpacity"?: string;
        /**
          * @uiName Image Padding
          * @uiType string
          * @uiEnum ["none", "xxx-small", "xx-small", "x-small", "small", "medium", "large", "x-large", "xx-large", "xxx-large", "xxxx-large"]
         */
        "paddingImage"?: Spacing;
        /**
          * @uiName Text Padding
          * @uiType string
          * @uiEnum ["none", "xxx-small", "xx-small", "x-small", "small", "medium", "large", "x-large", "xx-large", "xxx-large", "xxxx-large"]
         */
        "paddingText"?: Spacing;
        /**
          * @uiName Text Color
          * @uiWidget color
         */
        "textColor"?: string;
    }
    interface SqmHookStoryContainer {
        "hookStory"?: FunctionalComponent;
    }
    interface SqmImage {
        /**
          * @uiName Position Alignment
          * @uiType string
          * @uiEnum ["left", "center", "right"]
         */
        "alignment"?: "left" | "center" | "right";
        /**
          * @uiName Background Color
          * @uiWidget color
         */
        "backgroundColor"?: string;
        /**
          * @uiWidget ImageUpload
          * @uiName Image Link
         */
        "imageUrl"?: string;
        /**
          * (optional) Helps with constraining minimum size
          * @uiName Minimum Height
         */
        "minHeight"?: string;
    }
    interface SqmLeaderboard {
        /**
          * @uiName Title displayed for users without names
         */
        "anonymousUser"?: string;
        /**
          * @undocumented 
          * @uiType object
         */
        "demoData"?: DemoData<LeaderboardViewProps>;
        /**
          * @uiName Leaderboard time interval
          * @uiWidget DateRange
          * @uiOptions {"allowPastDates":true, "months": 1}
         */
        "interval"?: string;
        /**
          * @uiName Leaderboard type
          * @uiType string
          * @uiEnum ["topStartedReferrers", "topConvertedReferrers"]
         */
        "leaderboardType"?: "topStartedReferrers" | "topConvertedReferrers";
        /**
          * @uiName Rank type
          * @uiType string
          * @uiEnum ["rowNumber", "rank", "denseRank"]
         */
        "rankType"?: "rowNumber" | "rank" | "denseRank";
        /**
          * @uiName Rank Heading
         */
        "rankheading"?: string;
        /**
          * @uiName Show leaderboard rank
         */
        "showRank"?: boolean;
        /**
          * Shows the current user's leaderboard information even if they are not in the top 10
          * @uiName Show viewing user
         */
        "showUser"?: boolean;
        /**
          * @uiName Stats Column Heading
         */
        "statsheading"?: string;
        /**
          * @uiName User Column Heading
         */
        "usersheading"?: string;
    }
    interface SqmLeaderboardRank {
        /**
          * @undocumented 
          * @uiType object
         */
        "demoData"?: DemoData<LeaderboardRankViewProps>;
        /**
          * @uiName Leaderboard time interval
          * @uiWidget DateRange
          * @uiOptions {"allowPastDates":true, "months": 1}
         */
        "interval"?: string;
        /**
          * @uiName Leaderboard type
          * @uiType string
          * @uiEnum ["topStartedReferrers", "topConvertedReferrers"]
         */
        "leaderboardType"?: "topStartedReferrers" | "topConvertedReferrers";
        /**
          * @uiName Rank Text
         */
        "rankText"?: string;
        /**
          * @uiName Default rank
          * @uiType string
          * @uiEnum ["rowNumber", "rank", "denseRank"]
         */
        "rankType"?: "rowNumber" | "rank" | "denseRank";
        /**
          * @uiName Unranked Text
         */
        "unrankedText"?: string;
    }
    interface SqmNameFields {
        /**
          * @undocumented
         */
        "demoData"?: DemoData<NameFieldsViewProps>;
        /**
          * @uiName First name field label
         */
        "firstNameLabel"?: string;
        /**
          * @uiName Last name field label
         */
        "lastNameLabel"?: string;
    }
    interface SqmNavigationMenu {
        /**
          * @undocumented 
          * @uiType object
         */
        "demoData"?: DemoData<NavigationMenuViewProps>;
        /**
          * @uiName Include dropdown menu
         */
        "includeDropdown"?: boolean;
        /**
          * @uiName Label on the header menu
         */
        "menuLabel"?: string;
    }
    interface SqmNavigationSidebar {
    }
    interface SqmNavigationSidebarItem {
        /**
          * @undocumented 
          * @uiType object
         */
        "demoData"?: DemoData<NavigationSidebarItemViewProps>;
        /**
          * Options available at https://shoelace.style/components/icon
          * @uiName Icon
         */
        "icon"?: string;
        /**
          * @uiName Label
         */
        "label"?: string;
        /**
          * @uiName Navigation path
         */
        "path"?: string;
    }
    interface SqmPasswordField {
        /**
          * @undocumented 
          * @uiType object
         */
        "demoData"?: PasswordFieldViewDemoProps;
        /**
          * @uiName Enable live password validation
         */
        "enableValidation"?: boolean;
        /**
          * @uiName Label for password field
         */
        "fieldLabel"?: string;
    }
    interface SqmPopupContainer {
        /**
          * @uiName Display a close button on the popup
         */
        "closeButton"?: boolean;
        /**
          * @uiName Text to be used as the close button
         */
        "closeButtonText"?: string;
        /**
          * @uiName Specify padding on the popup contents when in embedded mode
          * @uiType string
          * @uiEnum ["none", "small", "medium", "large"]
         */
        "embedPadding"?: "none" | "small" | "medium" | "large";
        /**
          * @uiName Specify padding on the popup contents when in popup mode
          * @uiType string
          * @uiEnum ["none", "small", "medium", "large"]
         */
        "popupPadding"?: "none" | "small" | "medium" | "large";
        /**
          * @uiName Show SaaSquatch Powered By messaging
         */
        "poweredBy"?: boolean;
    }
    interface SqmPortalChangePassword {
        /**
          * @uiName Modal cancel password change button text
         */
        "cancelText"?: string;
        /**
          * @uiName Modal change password button text
         */
        "changePasswordButtonText"?: string;
        /**
          * @uiName Password confirmation input field label
         */
        "confirmPasswordFieldLabel"?: string;
        /**
          * @undocumented 
          * @uiType object
         */
        "demoData"?: DemoData<PortalChangePasswordViewProps>;
        /**
          * @uiName Change password modal header
         */
        "modalChangePasswordHeader"?: string;
        /**
          * @uiName Password input field label
         */
        "passwordFieldLabel"?: string;
        /**
          * @uiName Portal change password button text
         */
        "portalChangePasswordButtonText"?: string;
        /**
          * @uiName Portal change password section header
         */
        "portalChangePasswordHeader"?: string;
        /**
          * @uiName Successful password change message
         */
        "successMessage"?: string;
    }
    interface SqmPortalContainer {
        /**
          * @uiName Center content
         */
        "center"?: boolean;
        /**
          * @uiName Direction
          * @uiType string
          * @uiEnum ["row", "column"]
         */
        "direction"?: "row" | "column";
        /**
          * @uiName Display
          * @uiType string
          * @uiEnum ["grid", "flex"]
         */
        "display"?: "grid" | "flex";
        /**
          * @uiName Gap
          * @uiType string
          * @uiEnum ["none", "xxx-small", "xx-small", "x-small", "small", "medium", "large", "x-large", "xx-large", "xxx-large", "xxxx-large"]
         */
        "gap"?: Spacing;
        /**
          * @uiName Maximum width
         */
        "maxWidth"?: string;
        /**
          * @uiName Minimum width
         */
        "minWidth"?: string;
        /**
          * @uiName Padding
          * @uiType string
          * @uiEnum ["none", "xxx-small", "xx-small", "x-small", "small", "medium", "large", "x-large", "xx-large", "xxx-large", "xxxx-large"]
         */
        "padding"?: Spacing;
    }
    interface SqmPortalEmailVerification {
        /**
          * @undocumented 
          * @uiType object
         */
        "demoData"?: DemoData<PortalEmailVerificationViewProps>;
        /**
          * @uiName Email verification header text
         */
        "emailVerificationHeader"?: string;
        /**
          * The page that users are redirected to from the verification email.
          * @uiName Email redirection base path
         */
        "redirectPath"?: string;
        /**
          * @uiName Re-send email button text
         */
        "resendEmailButtonText"?: string;
        /**
          * @uiName Email verification body text
         */
        "verifyMessage"?: string;
    }
    interface SqmPortalFooter {
        /**
          * @uiName FAQ Link
         */
        "faqLink"?: string;
        /**
          * @uiName FAQ Text
         */
        "faqText"?: string;
        /**
          * @uiName Padding Bottom
         */
        "paddingBottom"?: string;
        /**
          * @uiName Padding Left
         */
        "paddingLeft"?: string;
        /**
          * @uiName Padding Right
         */
        "paddingRight"?: string;
        /**
          * @uiName Padding Top
         */
        "paddingTop"?: string;
        /**
          * @uiName Powered By Link
         */
        "poweredByLink"?: string;
        /**
          * @uiName Show Powered By SaaSquatch
         */
        "showPoweredBy"?: boolean;
        /**
          * @uiName Support Email
         */
        "supportEmail"?: string;
        /**
          * @uiName Support Text
         */
        "supportText"?: string;
        /**
          * @uiName Terms and Conditions Link
         */
        "termsLink"?: string;
        /**
          * @uiName Terms and Conditions Text
         */
        "termsText"?: string;
    }
    interface SqmPortalForgotPassword {
        /**
          * @undocumented 
          * @uiType object
         */
        "demoData"?: DemoData<PortalForgotPasswordViewProps>;
        /**
          * @uiName Email label
         */
        "emailLabel"?: string;
        /**
          * @uiName Routing path to login page
         */
        "loginPath"?: string;
        /**
          * The page that users are redirected to from the password reset email.
          * @uiName Email redirection base path
         */
        "redirectPath"?: string;
        /**
          * @uiName Password reset button text
         */
        "submitLabel"?: string;
    }
    interface SqmPortalFrame {
        /**
          * @undocumented 
          * @uiType object
         */
        "demoData"?: DemoData<PortalFrameViewProps>;
    }
    interface SqmPortalLogin {
        /**
          * @undocumented 
          * @uiType object
         */
        "demoData"?: DemoData<PortalLoginViewProps>;
        /**
          * @uiName Label for email field
         */
        "emailLabel"?: string;
        /**
          * @uiName Label for forgotten password button
         */
        "forgotPasswordLabel"?: string;
        /**
          * @uiName Forgot password button redirect path
         */
        "forgotPasswordPath"?: string;
        /**
          * @uiName Page navigated to after sign-in
         */
        "nextPage"?: string;
        /**
          * @uiName Heading label
         */
        "pageLabel"?: string;
        /**
          * @uiName Label for password field
         */
        "passwordLabel"?: string;
        /**
          * @uiName Label for register navigation button
         */
        "registerLabel"?: string;
        /**
          * @uiName Register button redirection path
         */
        "registerPath"?: string;
        /**
          * @uiName Label for submit button
         */
        "submitLabel"?: string;
    }
    interface SqmPortalLogout {
        /**
          * @uiName Next Page path
         */
        "nextPage"?: string;
    }
    interface SqmPortalProfile {
        /**
          * @uiName Country input field label
         */
        "countrytext"?: string;
        /**
          * @undocumented 
          * @uiType object
         */
        "demoData"?: DemoData<PortalProfileViewProps>;
        /**
          * @uiName Edit profile header
         */
        "editProfileHeader"?: string;
        /**
          * @uiName Edit profile sub header
         */
        "editProfileSubHeader"?: string;
        /**
          * @uiName Email input field label
         */
        "emailtext"?: string;
        /**
          * @uiName First name input field label
         */
        "firstnametext"?: string;
        /**
          * @uiName Last name input field label
         */
        "lastnametext"?: string;
        /**
          * @uiName Show or hide country field
         */
        "showCountry"?: boolean;
        /**
          * @uiName Text for the submit changes button
         */
        "submitChangeButtonText"?: string;
    }
    interface SqmPortalProtectedRoute {
        /**
          * @uiName Redirect Path
         */
        "redirectTo"?: string;
        /**
          * @uiName Redirect unverified users path
         */
        "redirectToUnverified"?: string;
        /**
          * @uiName Require Email Verification
         */
        "requireEmailVerification"?: boolean;
    }
    interface SqmPortalRegister {
        /**
          * @uiName Show confirm password field
         */
        "confirmPassword"?: boolean;
        /**
          * @uiName Label for confirm password field
         */
        "confirmPasswordLabel"?: string;
        /**
          * @undocumented 
          * @uiType object
         */
        "demoData"?: DemoData<PortalRegisterViewProps>;
        /**
          * @uiName Label for email field
         */
        "emailLabel"?: string;
        /**
          * @uiName Use password field with live validation
         */
        "enablePasswordValidation"?: boolean;
        /**
          * @uiName Hide default input fields to use custom fields
         */
        "hideInputs"?: boolean;
        /**
          * @uiName Label for login navigation button
         */
        "loginLabel"?: string;
        /**
          * @uiName Sign in button redirection path
         */
        "loginPath"?: string;
        /**
          * @uiName Page navigated to after registration
         */
        "nextPage"?: string;
        /**
          * @uiName Heading label
         */
        "pageLabel"?: string;
        /**
          * @uiName Label for password field
         */
        "passwordLabel"?: string;
        /**
          * The page that users are redirected to from the verification email.
          * @uiName Email redirection base path
         */
        "redirectPath"?: string;
        /**
          * @uiName Label for submit button
         */
        "submitLabel"?: string;
    }
    interface SqmPortalResetPassword {
        /**
          * @uiName Show confirm password
         */
        "confirmPassword"?: boolean;
        /**
          * @uiName Confirm password field label
         */
        "confirmPasswordFieldLabel"?: string;
        /**
          * Displayed after a successful password reset
          * @uiName Continue button text
         */
        "continueButtonText"?: string;
        /**
          * @undocumented 
          * @uiType object
         */
        "demoData"?: DemoData<PortalResetPasswordViewProps>;
        /**
          * The page that users are redirected to if the reset fails due to outdated password reset attempt.
          * @uiName Failed page redirection path
         */
        "failedPage"?: string;
        /**
          * The page that users are redirected to when the password reset succeeds.
          * @uiName Next page path
         */
        "nextPage"?: string;
        /**
          * @uiName Password field label
         */
        "passwordFieldLabel"?: string;
        /**
          * Displayed after a successful password reset
          * @uiName Password reset header text
         */
        "passwordResetHeader"?: string;
        /**
          * @uiName Password reset button text
         */
        "resetPasswordButtonText"?: string;
        /**
          * @uiName Password reset header text
         */
        "resetPasswordHeader"?: string;
    }
    interface SqmPortalVerifyEmail {
        /**
          * @undocumented 
          * @uiType object
         */
        "demoData"?: DemoData<PortalVerifyEmailViewProps>;
        /**
          * The page that users are redirected to if verification fails due to outdated verification attempt.
          * @uiName Failed page redirection path
         */
        "failedPage"?: string;
        /**
          * The page that users are redirected to when the verification succeeds.
          * @uiName Next page path
         */
        "nextPage"?: string;
    }
    interface SqmProgramExplainer {
        /**
          * @uiName Header Background Color
          * @uiWidget color
         */
        "backgroundColor"?: string;
        /**
          * @uiName Header Text
         */
        "header"?: string;
        /**
          * @uiName Header Text Color
          * @uiWidget color
         */
        "textColor"?: string;
    }
    interface SqmProgramExplainerStep {
        /**
          * @uiName Background Color
          * @uiWidget color
         */
        "backgroundColor"?: string;
        /**
          * @uiName Description
         */
        "description"?: string;
        /**
          * @uiName Title
         */
        "header"?: string;
        /**
          * Options available at https://shoelace.style/components/icon
          * @uiName Icon
         */
        "icon"?: string;
        /**
          * Displayed in place of an icon
          * @uiName Image Url
         */
        "imageUrl"?: string;
        /**
          * @uiName Text Color
          * @uiWidget color
         */
        "textColor"?: string;
    }
    interface SqmProgramMenu {
    }
    interface SqmReferralCard {
        /**
          * @uiName Vertical Aligment
          * @uiType string
          * @uiEnum ["start", "center", "end"]
         */
        "verticalAlignment"?: "start" | "center" | "end";
    }
    interface SqmReferralIframe {
        /**
          * @undocumented 
          * @uiType object
         */
        "demoData"?: DemoData<ReferralIframeViewProps>;
        /**
          * @uiName Height of the iframe container
         */
        "iframeHeight"?: string;
        /**
          * @uiName URL of iframe to display
          * @uiRequired
         */
        "iframeSrc"?: string;
        /**
          * @uiName Width of the iframe container
         */
        "iframeWidth"?: string;
    }
    interface SqmReferralTable {
        /**
          * @undocumented 
          * @uiType object
         */
        "demoData"?: DemoData<GenericTableViewProps>;
        /**
          * @uiName Hide Column Labels (Mobile View)
         */
        "hiddenColumns"?: string;
        /**
          * @uiName Hide Columns (Mobile View)
         */
        "mdBreakpoint"?: number;
        /**
          * @uiName View More button text
         */
        "moreLabel"?: string;
        /**
          * @uiName Number of referrals per page
         */
        "perPage"?: number;
        /**
          * @uiName Previous button text
         */
        "prevLabel"?: string;
        /**
          * Filters to only show referrals in this program. Will default to filtering by the program context where this table lives. If no program ID is set or provided by context, then shows all referrals from all programs. If program ID is "classic", shows classic-only referrals
          * @uiName Program
         */
        "programId"?: string;
        /**
          * @uiName Show column labels
         */
        "showLabels"?: boolean;
        /**
          * @uiName Show Referred by user in table
         */
        "showReferrer"?: boolean;
        /**
          * @uiName Hide Columns (Mobile View)
         */
        "smBreakpoint"?: number;
    }
    interface SqmReferralTableCell {
        "innerTemplate"?: string;
    }
    interface SqmReferralTableColumn {
        /**
          * @uiName Column Title
         */
        "columnTitle"?: string;
    }
    interface SqmReferralTableDateCell {
        "date"?: number;
        "locale"?: string;
    }
    interface SqmReferralTableDateColumn {
        /**
          * @uiName Date Column Title
         */
        "columnTitle"?: string;
        /**
          * @uiName Date Displayed
          * @uiType string
          * @uiEnum ["dateConverted", "dateReferralStarted", "dateFraudChecksCompleted", "dateModerated", "dateModified", "dateReferralEnded", "dateReferralPaid", "dateUserModified"]
         */
        "dateShown"?: ReferralDates;
    }
    interface SqmReferralTableRewardsCell {
        "expiringText"?: string;
        "fuelTankText"?: string;
        "hideDetails"?: boolean;
        "locale"?: string;
        "pendingForText"?: string;
        "rewardReceivedText"?: string;
        "rewards"?: Reward[];
        "statusLongText"?: string;
        "statusText"?: string;
    }
    interface SqmReferralTableRewardsColumn {
        /**
          * @uiName Reward column title
         */
        "columnTitle"?: string;
        /**
          * @uiName Reward Expiring Text
         */
        "expiringText"?: string;
        /**
          * @uiName Fuel Tank Code Text
         */
        "fuelTankText"?: string;
        /**
          * @uiName Hide dropdown details of reward
         */
        "hideDetails"?: boolean;
        /**
          * @uiName Reward Pending Text
         */
        "pendingForText"?: string;
        /**
          * @uiName Reward Received Text
         */
        "rewardReceivedText"?: string;
        /**
          * @uiName Reward Status Long Text
         */
        "statusLongText"?: string;
        /**
          * @uiName Reward Status Text
         */
        "statusText"?: string;
    }
    interface SqmReferralTableStatusCell {
        "converted"?: boolean;
        "statusText"?: string;
    }
    interface SqmReferralTableStatusColumn {
        /**
          * @uiName Column Title
         */
        "columnTitle"?: string;
        /**
          * @uiName Converted Status Text
         */
        "convertedStatusText"?: string;
        /**
          * @uiName In Progress Status Text
         */
        "inProgressStatusText"?: string;
    }
    interface SqmReferralTableUserCell {
        "name"?: string;
    }
    interface SqmReferralTableUserColumn {
        /**
          * @uiName Name displayed for anonymous users
         */
        "anonymousUser"?: string;
        /**
          * @uiName User Column Title
         */
        "columnTitle"?: string;
        /**
          * @uiName Name displayed for deleted users
         */
        "deletedUser"?: string;
    }
    interface SqmRefreshButton {
        /**
          * @uiName Icon to show in the slot
         */
        "icon"?: string;
    }
    interface SqmRewardExchangeList {
        /**
          * @uiName Back Button Text
         */
        "backText"?: string;
        /**
          * @uiName Exchange button text
         */
        "buttonText"?: string;
        /**
          * @uiName Cancel Button Text
         */
        "cancelText"?: string;
        /**
          * @uiName Choose Amount Progress Title
         */
        "chooseAmountTitle"?: string;
        /**
          * @uiName Choose Reward Progress Title
         */
        "chooseRewardTitle"?: string;
        /**
          * @uiName Confirmation Progress Title
         */
        "confirmationTitle"?: string;
        /**
          * @uiName Continue Button Text
         */
        "continueText"?: string;
        /**
          * @uiName Continue to Confirmation Button Text
         */
        "continueToConfirmationText"?: string;
        /**
          * Shown in the confirmation state.
          * @uiName Cost Row Title
         */
        "costTitle"?: string;
        /**
          * @undocumented 
          * @uiType object
         */
        "demoData"?: DemoData<RewardExchangeViewProps>;
        /**
          * @uiName Done Text
         */
        "doneText"?: string;
        /**
          * @uiName Exchange button text
         */
        "notAvailableError"?: string;
        /**
          * @uiName Not Enough Available Error Message
         */
        "notEnoughError"?: string;
        /**
          * @uiName Promo Code Text
         */
        "promoCode"?: string;
        /**
          * @uiName Reward List Error Message
         */
        "queryError"?: string;
        /**
          * @uiName Redeem Button Text
         */
        "redeemText"?: string;
        /**
          * @uiName Confirmation Title Text
         */
        "redeemTitle"?: string;
        /**
          * @uiName Redemption Error Message
         */
        "redemptionError"?: string;
        /**
          * @uiName Redemption Success Message
         */
        "redemptionSuccessText"?: string;
        /**
          * Shown in the confirmation state.
          * @uiName Reward Amount Row Title
         */
        "rewardAmountTitle"?: string;
        /**
          * Shown in the confirmation state.
          * @uiName Reward Row Title
         */
        "rewardNameTitle"?: string;
        /**
          * @uiName Reward Title Text
         */
        "rewardTitle"?: string;
        /**
          * @uiName Select Amount Text
         */
        "selectText"?: string;
        /**
          * @uiName Number of Skeleton Cards
         */
        "skeletonCardNum"?: number;
        /**
          * @uiName Reward Exchange Amount Text
         */
        "sourceAmountMessage"?: string;
        /**
          * Shown when a user copies a fuel tank code
          * @uiName Tool Tip Text
         */
        "tooltiptext"?: string;
    }
    interface SqmRewardsTable {
        /**
          * @undocumented 
          * @uiType object
         */
        "demoData"?: DemoData<GenericTableViewProps>;
        /**
          * @uiName Hide Columns (Mobile View)
         */
        "hiddenColumns"?: string;
        /**
          * @uiName Hide Columns (Mobile View)
         */
        "mdBreakpoint"?: number;
        /**
          * @uiName View More button text
         */
        "moreLabel"?: string;
        /**
          * @uiName Number of rewards per page
         */
        "perPage"?: number;
        /**
          * @uiName Previous button text
         */
        "prevLabel"?: string;
        /**
          * Filters to only show rewards in this program. Will default to filtering by the program context where this table lives. If no program ID is set or provided by context, then shows all rewards from all programs.
          * @uiName Program
         */
        "programId"?: string;
        /**
          * @uiName Show column labels
         */
        "showLabels"?: boolean;
        /**
          * @uiName Hide Columns (Mobile View)
         */
        "smBreakpoint"?: number;
    }
    interface SqmRewardsTableDateCell {
        "date"?: number;
        "locale"?: string;
    }
    interface SqmRewardsTableDateColumn {
        /**
          * @uiName Date Column Title
         */
        "columnTitle"?: string;
        /**
          * @uiName Date Displayed
          * @uiType string
          * @uiEnum ["dateGiven", "dateExpires", "dateCancelled", "dateRedeemed", "dateScheduledFor"]
         */
        "dateShown"?: string;
    }
    interface SqmRewardsTableRewardCell {
        "availableText"?: string;
        "locale"?: string;
        "redeemedText"?: string;
        "reward"?: Reward;
    }
    interface SqmRewardsTableRewardColumn {
        /**
          * @uiName Remaining Amount Text
         */
        "availableText"?: string;
        /**
          * @uiName Reward column title
         */
        "columnTitle"?: string;
        /**
          * @uiName Redeemed Amount Text
         */
        "redeemedText"?: string;
    }
    interface SqmRewardsTableSourceCell {
        "anonymousUserText"?: string;
        "deletedUserText"?: string;
        "locale"?: string;
        "referralText"?: string;
        "reward"?: Reward;
        "rewardExchangeText"?: string;
        "rewardSourceText"?: string;
    }
    interface SqmRewardsTableSourceColumn {
        /**
          * @uiName Name displayed for anonymous users
         */
        "anonymousUser"?: string;
        /**
          * @uiName User Column Title
         */
        "columnTitle"?: string;
        /**
          * @uiName Name displayed for deleted users
         */
        "deletedUser"?: string;
        /**
          * Shown when a reward has been created by a referral
          * @uiName Referral Text
         */
        "referralText"?: string;
        /**
          * @uiName Reward Exchange label
         */
        "rewardExchangeText"?: string;
        /**
          * @uiName Reward Source Text
         */
        "rewardSourceText"?: string;
    }
    interface SqmRewardsTableStatusCell {
        "expiryText"?: string;
        "locale"?: string;
        "pendingScheduled"?: string;
        "pendingUnhandled"?: string;
        "pendingUsTax"?: string;
        "reward"?: Reward;
        "statusText"?: string;
    }
    interface SqmRewardsTableStatusColumn {
        /**
          * @uiName Column Title
         */
        "columnTitle"?: string;
        /**
          * @uiName Expired Status Text
         */
        "expiryText"?: string;
        /**
          * @uiName Reward Status Text
         */
        "statusText"?: string;
    }
    interface SqmRoute {
        /**
          * @uiName Navigation path name
         */
        "path"?: string;
    }
    interface SqmRouter {
    }
    interface SqmScroll {
        "buttonText"?: string;
        "buttonType"?: string;
        "scrollAnimation"?: "smooth" | "auto";
        "scrollId"?: string;
        "scrollTagName"?: string;
    }
    interface SqmShareButton {
        /**
          * @uiName Button background color
          * @uiWidget color
         */
        "backgroundcolor"?: string;
        /**
          * @uiName Configure border radius with pixel amount
         */
        "borderradius"?: number;
        /**
          * @undocumented 
          * @uiType object
         */
        "demoData"?: DemoData<ShareButtonViewProps>;
        /**
          * @uiName Disabled
         */
        "disabled"?: boolean;
        /**
          * @uiName Hide the icon
         */
        "hideicon"?: boolean;
        /**
          * @uiName Hide the text
         */
        "hidetext"?: boolean;
        /**
          * Options available at https://shoelace.style/components/icon
          * @uiName Icon used in button. Will try to select an icon based on the share medium if left empty.
         */
        "icon"?: string;
        /**
          * @uiName Icon Location
          * @uiType string
          * @uiEnum ["prefix", "suffix" ]
          * @uiEnumNames ["Prefix", "Suffix"]
         */
        "iconslot"?: "prefix" | "suffix";
        /**
          * The social medium to share on. Share messages and links will be pulled from your program config and tagged for analytics.
          * @uiName Share Medium
          * @uiType string
          * @uiEnum ["facebook", "twitter", "email", "direct", "linkedin", "sms", "fbmessenger", "whatsapp", "linemessenger", "pinterest" ]
          * @uiEnumNames ["Facebook", "Twitter", "Email", "Web Share Sheet", "Linkedin", "SMS", "Facebook Messenger", "Whatsapp", "Line Messenger", "Pinterest"]
         */
        "medium"?: | "facebook"
    | "twitter"
    | "email"
    | "direct"
    | "linkedin"
    | "sms"
    | "fbmessenger"
    | "whatsapp"
    | "linemessenger"
    | "pinterest"
    | "reminder"
    | "unknown";
        /**
          * @uiName Display as pill
         */
        "pill"?: boolean;
        /**
          * Optional programId, or uses the programId context where this button is rendered.
          * @uiName Program ID
         */
        "programId"?: string;
        /**
          * @uiName Text used for native sharing (mobile only)
         */
        "sharetext"?: string;
        /**
          * @uiName Title used for native sharing (mobile only)
         */
        "sharetitle"?: string;
        /**
          * @uiName Button Size
          * @uiType string
          * @uiEnum ["small", "medium", "large" ]
          * @uiEnumNames ["Small", "Medium", "Large"]
         */
        "size"?: "small" | "medium" | "large";
        /**
          * @uiName Button text color
          * @uiWidget color
         */
        "textcolor"?: string;
        /**
          * @uiType string
          * @uiName Button Style
          * @uiEnum ["primary" , "success", "info", "warning", "danger", "default", "text" ]
         */
        "type"?: | "primary"
    | "success"
    | "info"
    | "warning"
    | "danger"
    | "default"
    | "text";
    }
    interface SqmShareCode {
        /**
          * @undocumented 
          * @uiType object
         */
        "demoData"?: DemoData<ShareLinkViewProps>;
        /**
          * The ID of the program that should generate the code. Defaults to the program ID in context where this widget is loaded.
          * @uiName Program ID
         */
        "programId"?: string;
        /**
          * The number of milliseconds that the tooltip will appear for
          * @uiName Tooltip lifespan
         */
        "tooltiplifespan"?: number;
        /**
          * This is shown after someone has successfully copied the cpde to the clipboard.
          * @uiName Tooltip text
         */
        "tooltiptext"?: string;
    }
    interface SqmShareLink {
        /**
          * @undocumented 
          * @uiType object
         */
        "demoData"?: DemoData<ShareLinkViewProps>;
        /**
          * The ID of the program that should generate the link. Defaults to the program ID in context where this widget is loaded.
          * @uiName Program ID
         */
        "programId"?: string;
        /**
          * The number of milliseconds that the tooltip will appear for
          * @uiName Tooltip lifespan
         */
        "tooltiplifespan"?: number;
        /**
          * This is shown after someone has successfully copied the link to the clipboard.
          * @uiName Tooltip text
         */
        "tooltiptext"?: string;
    }
    interface SqmStatContainer {
        /**
          * @uiName Space between stats
          * @uiType string
          * @uiEnum ["none", "xxx-small", "xx-small", "x-small", "small", "medium", "large", "x-large", "xx-large", "xxx-large", "xxxx-large"]
         */
        "space"?: Spacing;
    }
    interface SqmStencilbook {
    }
    interface SqmTab {
        "header"?: string;
    }
    interface SqmTableCell {
        "colspan"?: number;
        "padding"?: string;
    }
    interface SqmTableRow {
        "border"?: string;
    }
    interface SqmTabs {
        /**
          * Used to specify the placement of the tabs
          * @uiName Tabs Placement
          * @uiEnum ["left", "right", "bottom", null]
         */
        "placement"?: "left" | "right" | "bottom" | null;
    }
    interface SqmTaskCard {
        /**
          * @uiName CTA Button Link
         */
        "buttonLink"?: string;
        /**
          * @uiName CTA Button Text
         */
        "buttonText"?: string;
        /**
          * @uiName Title Text
         */
        "cardTitle"?: string;
        /**
          * Displays the amount of times that a user has completed a repeatable task.
          * @uiName Completed Count Text
         */
        "completedText"?: string;
        /**
          * @undocumented 
          * @uiType object
         */
        "demoData"?: DemoData<TaskCardViewProps | BigStatViewProps>;
        /**
          * @uiName Description Text
         */
        "description"?: string;
        /**
          * Timeframe that the task card will be shown
          * @uiName Display Duration
          * @uiWidget DateRange
          * @uiOptions {"allowPastDates":true, "months": 1}
         */
        "displayDuration"?: string;
        /**
          * Shown to users after the end of the task duration.
          * @uiName Ended Date Message
         */
        "endedMessage"?: string;
        /**
          * @uiName Event key of task card button
         */
        "eventKey"?: string;
        /**
          * @uiName Expiry Date Message
         */
        "expiryMessage"?: string;
        /**
          * The number of times a reward can be earned.  Use zero for no limit (the default).
          * @uiName Repeat Amount
         */
        "finite"?: number;
        /**
          * @uiName Goal Completion Number
         */
        "goal"?: number;
        /**
          * @uiName CTA Button Link Open in New Tab
         */
        "openNewTab"?: boolean;
        /**
          * @uiName Program ID override
         */
        "programId"?: string;
        /**
          * @uiName Progress Bar Unit
         */
        "progressBarUnit"?: string;
        /**
          * @uiName Goal Repeatable
         */
        "repeatable"?: boolean;
        /**
          * @uiName Reward Amount
         */
        "rewardAmount"?: string;
        /**
          * @uiName Reward Duration
          * @uiWidget DateRange
          * @uiOptions {"allowPastDates":true, "months": 1}
         */
        "rewardDuration"?: string;
        /**
          * @uiName Reward Unit
         */
        "rewardUnit"?: string;
        /**
          * @uiName Show Progress Bar
         */
        "showProgressBar"?: boolean;
        /**
          * Shown to users before the start of the task duration.
          * @uiName Start Date Message
         */
        "startsOnMessage"?: string;
        /**
          * Select what type of stat to display for the goal. Manual paths are also supported.
          * @uiWidget StatTypeSelectWidget
          * @uiName Goal Progress Source
          * @uiOptions {"version": 1.1}
         */
        "statType"?: string;
        /**
          * @uiName Progress Bar Steps
         */
        "steps"?: boolean;
    }
    interface SqmText {
    }
    interface SqmTextSpan {
        /**
          * @uiName Text
         */
        "text"?: string;
        /**
          * @uiName Text
          * @uiType string
          * @uiEnum ["p", "subtext", "h1", "h2", "h3", "h4"]
         */
        "type"?: "p" | "subtext" | "h1" | "h2" | "h3" | "h4";
    }
    interface SqmTimeline {
        /**
          * @uiName Icon
          * @uiType string
          * @uiEnum ["gift", "circle"]
         */
        "icon"?: string;
    }
    interface SqmTimelineEntry {
        /**
          * @uiName Description
         */
        "desc"?: string;
        /**
          * @uiName Icon
          * @uiType string
          * @uiEnum ["gift", "circle"]
         */
        "icon"?: string;
        /**
          * @undocumented
         */
        "line"?: boolean;
        /**
          * @uiName Reward Amount
         */
        "reward"?: string;
        /**
          * @uiName Reward Unit
         */
        "unit"?: string;
    }
    interface SqmTitledSection {
        /**
          * Label for the section unless overwritten via the label slot.
          * @uiName Label
         */
        "label"?: string;
        /**
          * @uiName Label margin style
          * @uiType string
          * @uiEnum ["none", "xxx-small", "xx-small", "x-small", "small", "medium", "large", "x-large", "xx-large", "xxx-large", "xxxx-large"]
         */
        "labelMargin"?: Spacing;
        /**
          * @uiName Section padding
          * @uiType string
          * @uiEnum ["none", "xxx-small", "xx-small", "x-small", "small", "medium", "large", "x-large", "xx-large", "xxx-large", "xxxx-large"]
         */
        "padding"?: Spacing;
        /**
          * @uiName Text Align
          * @uiType string
          * @uiEnum ["left", "center", "right"]
         */
        "textAlign"?: "left" | "center" | "right";
    }
    interface SqmUserName {
        /**
          * @undocumented 
          * @uiType object
         */
        "demoData"?: DemoData<UserNameViewProps>;
        /**
          * @uiName Fallback name for nameless users
         */
        "fallback"?: string;
        /**
          * @uiName Loading text
         */
        "loadingText"?: string;
    }
    interface IntrinsicElements {
        "sqm-asset-card": SqmAssetCard;
        "sqm-big-stat": SqmBigStat;
        "sqm-brand": SqmBrand;
        "sqm-card-feed": SqmCardFeed;
        "sqm-divided-layout": SqmDividedLayout;
        "sqm-edit-profile": SqmEditProfile;
        "sqm-empty": SqmEmpty;
        "sqm-form-message": SqmFormMessage;
        "sqm-graphql-client-provider": SqmGraphqlClientProvider;
        "sqm-hero": SqmHero;
        "sqm-hero-image": SqmHeroImage;
        "sqm-hook-story-container": SqmHookStoryContainer;
        "sqm-image": SqmImage;
        "sqm-leaderboard": SqmLeaderboard;
        "sqm-leaderboard-rank": SqmLeaderboardRank;
        "sqm-name-fields": SqmNameFields;
        "sqm-navigation-menu": SqmNavigationMenu;
        "sqm-navigation-sidebar": SqmNavigationSidebar;
        "sqm-navigation-sidebar-item": SqmNavigationSidebarItem;
        "sqm-password-field": SqmPasswordField;
        "sqm-popup-container": SqmPopupContainer;
        "sqm-portal-change-password": SqmPortalChangePassword;
        "sqm-portal-container": SqmPortalContainer;
        "sqm-portal-email-verification": SqmPortalEmailVerification;
        "sqm-portal-footer": SqmPortalFooter;
        "sqm-portal-forgot-password": SqmPortalForgotPassword;
        "sqm-portal-frame": SqmPortalFrame;
        "sqm-portal-login": SqmPortalLogin;
        "sqm-portal-logout": SqmPortalLogout;
        "sqm-portal-profile": SqmPortalProfile;
        "sqm-portal-protected-route": SqmPortalProtectedRoute;
        "sqm-portal-register": SqmPortalRegister;
        "sqm-portal-reset-password": SqmPortalResetPassword;
        "sqm-portal-verify-email": SqmPortalVerifyEmail;
        "sqm-program-explainer": SqmProgramExplainer;
        "sqm-program-explainer-step": SqmProgramExplainerStep;
        "sqm-program-menu": SqmProgramMenu;
        "sqm-referral-card": SqmReferralCard;
        "sqm-referral-iframe": SqmReferralIframe;
        "sqm-referral-table": SqmReferralTable;
        "sqm-referral-table-cell": SqmReferralTableCell;
        "sqm-referral-table-column": SqmReferralTableColumn;
        "sqm-referral-table-date-cell": SqmReferralTableDateCell;
        "sqm-referral-table-date-column": SqmReferralTableDateColumn;
        "sqm-referral-table-rewards-cell": SqmReferralTableRewardsCell;
        "sqm-referral-table-rewards-column": SqmReferralTableRewardsColumn;
        "sqm-referral-table-status-cell": SqmReferralTableStatusCell;
        "sqm-referral-table-status-column": SqmReferralTableStatusColumn;
        "sqm-referral-table-user-cell": SqmReferralTableUserCell;
        "sqm-referral-table-user-column": SqmReferralTableUserColumn;
        "sqm-refresh-button": SqmRefreshButton;
        "sqm-reward-exchange-list": SqmRewardExchangeList;
        "sqm-rewards-table": SqmRewardsTable;
        "sqm-rewards-table-date-cell": SqmRewardsTableDateCell;
        "sqm-rewards-table-date-column": SqmRewardsTableDateColumn;
        "sqm-rewards-table-reward-cell": SqmRewardsTableRewardCell;
        "sqm-rewards-table-reward-column": SqmRewardsTableRewardColumn;
        "sqm-rewards-table-source-cell": SqmRewardsTableSourceCell;
        "sqm-rewards-table-source-column": SqmRewardsTableSourceColumn;
        "sqm-rewards-table-status-cell": SqmRewardsTableStatusCell;
        "sqm-rewards-table-status-column": SqmRewardsTableStatusColumn;
        "sqm-route": SqmRoute;
        "sqm-router": SqmRouter;
        "sqm-scroll": SqmScroll;
        "sqm-share-button": SqmShareButton;
        "sqm-share-code": SqmShareCode;
        "sqm-share-link": SqmShareLink;
        "sqm-stat-container": SqmStatContainer;
        "sqm-stencilbook": SqmStencilbook;
        "sqm-tab": SqmTab;
        "sqm-table-cell": SqmTableCell;
        "sqm-table-row": SqmTableRow;
        "sqm-tabs": SqmTabs;
        "sqm-task-card": SqmTaskCard;
        "sqm-text": SqmText;
        "sqm-text-span": SqmTextSpan;
        "sqm-timeline": SqmTimeline;
        "sqm-timeline-entry": SqmTimelineEntry;
        "sqm-titled-section": SqmTitledSection;
        "sqm-user-name": SqmUserName;
    }
}
export { LocalJSX as JSX };
declare module "@stencil/core" {
    export namespace JSX {
        interface IntrinsicElements {
            "sqm-asset-card": LocalJSX.SqmAssetCard & JSXBase.HTMLAttributes<HTMLSqmAssetCardElement>;
            "sqm-big-stat": LocalJSX.SqmBigStat & JSXBase.HTMLAttributes<HTMLSqmBigStatElement>;
            "sqm-brand": LocalJSX.SqmBrand & JSXBase.HTMLAttributes<HTMLSqmBrandElement>;
            "sqm-card-feed": LocalJSX.SqmCardFeed & JSXBase.HTMLAttributes<HTMLSqmCardFeedElement>;
            "sqm-divided-layout": LocalJSX.SqmDividedLayout & JSXBase.HTMLAttributes<HTMLSqmDividedLayoutElement>;
            "sqm-edit-profile": LocalJSX.SqmEditProfile & JSXBase.HTMLAttributes<HTMLSqmEditProfileElement>;
            "sqm-empty": LocalJSX.SqmEmpty & JSXBase.HTMLAttributes<HTMLSqmEmptyElement>;
            "sqm-form-message": LocalJSX.SqmFormMessage & JSXBase.HTMLAttributes<HTMLSqmFormMessageElement>;
            "sqm-graphql-client-provider": LocalJSX.SqmGraphqlClientProvider & JSXBase.HTMLAttributes<HTMLSqmGraphqlClientProviderElement>;
            "sqm-hero": LocalJSX.SqmHero & JSXBase.HTMLAttributes<HTMLSqmHeroElement>;
            "sqm-hero-image": LocalJSX.SqmHeroImage & JSXBase.HTMLAttributes<HTMLSqmHeroImageElement>;
            "sqm-hook-story-container": LocalJSX.SqmHookStoryContainer & JSXBase.HTMLAttributes<HTMLSqmHookStoryContainerElement>;
            "sqm-image": LocalJSX.SqmImage & JSXBase.HTMLAttributes<HTMLSqmImageElement>;
            "sqm-leaderboard": LocalJSX.SqmLeaderboard & JSXBase.HTMLAttributes<HTMLSqmLeaderboardElement>;
            "sqm-leaderboard-rank": LocalJSX.SqmLeaderboardRank & JSXBase.HTMLAttributes<HTMLSqmLeaderboardRankElement>;
            "sqm-name-fields": LocalJSX.SqmNameFields & JSXBase.HTMLAttributes<HTMLSqmNameFieldsElement>;
            "sqm-navigation-menu": LocalJSX.SqmNavigationMenu & JSXBase.HTMLAttributes<HTMLSqmNavigationMenuElement>;
            "sqm-navigation-sidebar": LocalJSX.SqmNavigationSidebar & JSXBase.HTMLAttributes<HTMLSqmNavigationSidebarElement>;
            "sqm-navigation-sidebar-item": LocalJSX.SqmNavigationSidebarItem & JSXBase.HTMLAttributes<HTMLSqmNavigationSidebarItemElement>;
            "sqm-password-field": LocalJSX.SqmPasswordField & JSXBase.HTMLAttributes<HTMLSqmPasswordFieldElement>;
            "sqm-popup-container": LocalJSX.SqmPopupContainer & JSXBase.HTMLAttributes<HTMLSqmPopupContainerElement>;
            "sqm-portal-change-password": LocalJSX.SqmPortalChangePassword & JSXBase.HTMLAttributes<HTMLSqmPortalChangePasswordElement>;
            "sqm-portal-container": LocalJSX.SqmPortalContainer & JSXBase.HTMLAttributes<HTMLSqmPortalContainerElement>;
            "sqm-portal-email-verification": LocalJSX.SqmPortalEmailVerification & JSXBase.HTMLAttributes<HTMLSqmPortalEmailVerificationElement>;
            "sqm-portal-footer": LocalJSX.SqmPortalFooter & JSXBase.HTMLAttributes<HTMLSqmPortalFooterElement>;
            "sqm-portal-forgot-password": LocalJSX.SqmPortalForgotPassword & JSXBase.HTMLAttributes<HTMLSqmPortalForgotPasswordElement>;
            "sqm-portal-frame": LocalJSX.SqmPortalFrame & JSXBase.HTMLAttributes<HTMLSqmPortalFrameElement>;
            "sqm-portal-login": LocalJSX.SqmPortalLogin & JSXBase.HTMLAttributes<HTMLSqmPortalLoginElement>;
            "sqm-portal-logout": LocalJSX.SqmPortalLogout & JSXBase.HTMLAttributes<HTMLSqmPortalLogoutElement>;
            "sqm-portal-profile": LocalJSX.SqmPortalProfile & JSXBase.HTMLAttributes<HTMLSqmPortalProfileElement>;
            "sqm-portal-protected-route": LocalJSX.SqmPortalProtectedRoute & JSXBase.HTMLAttributes<HTMLSqmPortalProtectedRouteElement>;
            "sqm-portal-register": LocalJSX.SqmPortalRegister & JSXBase.HTMLAttributes<HTMLSqmPortalRegisterElement>;
            "sqm-portal-reset-password": LocalJSX.SqmPortalResetPassword & JSXBase.HTMLAttributes<HTMLSqmPortalResetPasswordElement>;
            "sqm-portal-verify-email": LocalJSX.SqmPortalVerifyEmail & JSXBase.HTMLAttributes<HTMLSqmPortalVerifyEmailElement>;
            "sqm-program-explainer": LocalJSX.SqmProgramExplainer & JSXBase.HTMLAttributes<HTMLSqmProgramExplainerElement>;
            "sqm-program-explainer-step": LocalJSX.SqmProgramExplainerStep & JSXBase.HTMLAttributes<HTMLSqmProgramExplainerStepElement>;
            "sqm-program-menu": LocalJSX.SqmProgramMenu & JSXBase.HTMLAttributes<HTMLSqmProgramMenuElement>;
            "sqm-referral-card": LocalJSX.SqmReferralCard & JSXBase.HTMLAttributes<HTMLSqmReferralCardElement>;
            "sqm-referral-iframe": LocalJSX.SqmReferralIframe & JSXBase.HTMLAttributes<HTMLSqmReferralIframeElement>;
            "sqm-referral-table": LocalJSX.SqmReferralTable & JSXBase.HTMLAttributes<HTMLSqmReferralTableElement>;
            "sqm-referral-table-cell": LocalJSX.SqmReferralTableCell & JSXBase.HTMLAttributes<HTMLSqmReferralTableCellElement>;
            "sqm-referral-table-column": LocalJSX.SqmReferralTableColumn & JSXBase.HTMLAttributes<HTMLSqmReferralTableColumnElement>;
            "sqm-referral-table-date-cell": LocalJSX.SqmReferralTableDateCell & JSXBase.HTMLAttributes<HTMLSqmReferralTableDateCellElement>;
            "sqm-referral-table-date-column": LocalJSX.SqmReferralTableDateColumn & JSXBase.HTMLAttributes<HTMLSqmReferralTableDateColumnElement>;
            "sqm-referral-table-rewards-cell": LocalJSX.SqmReferralTableRewardsCell & JSXBase.HTMLAttributes<HTMLSqmReferralTableRewardsCellElement>;
            "sqm-referral-table-rewards-column": LocalJSX.SqmReferralTableRewardsColumn & JSXBase.HTMLAttributes<HTMLSqmReferralTableRewardsColumnElement>;
            "sqm-referral-table-status-cell": LocalJSX.SqmReferralTableStatusCell & JSXBase.HTMLAttributes<HTMLSqmReferralTableStatusCellElement>;
            "sqm-referral-table-status-column": LocalJSX.SqmReferralTableStatusColumn & JSXBase.HTMLAttributes<HTMLSqmReferralTableStatusColumnElement>;
            "sqm-referral-table-user-cell": LocalJSX.SqmReferralTableUserCell & JSXBase.HTMLAttributes<HTMLSqmReferralTableUserCellElement>;
            "sqm-referral-table-user-column": LocalJSX.SqmReferralTableUserColumn & JSXBase.HTMLAttributes<HTMLSqmReferralTableUserColumnElement>;
            "sqm-refresh-button": LocalJSX.SqmRefreshButton & JSXBase.HTMLAttributes<HTMLSqmRefreshButtonElement>;
            "sqm-reward-exchange-list": LocalJSX.SqmRewardExchangeList & JSXBase.HTMLAttributes<HTMLSqmRewardExchangeListElement>;
            "sqm-rewards-table": LocalJSX.SqmRewardsTable & JSXBase.HTMLAttributes<HTMLSqmRewardsTableElement>;
            "sqm-rewards-table-date-cell": LocalJSX.SqmRewardsTableDateCell & JSXBase.HTMLAttributes<HTMLSqmRewardsTableDateCellElement>;
            "sqm-rewards-table-date-column": LocalJSX.SqmRewardsTableDateColumn & JSXBase.HTMLAttributes<HTMLSqmRewardsTableDateColumnElement>;
            "sqm-rewards-table-reward-cell": LocalJSX.SqmRewardsTableRewardCell & JSXBase.HTMLAttributes<HTMLSqmRewardsTableRewardCellElement>;
            "sqm-rewards-table-reward-column": LocalJSX.SqmRewardsTableRewardColumn & JSXBase.HTMLAttributes<HTMLSqmRewardsTableRewardColumnElement>;
            "sqm-rewards-table-source-cell": LocalJSX.SqmRewardsTableSourceCell & JSXBase.HTMLAttributes<HTMLSqmRewardsTableSourceCellElement>;
            "sqm-rewards-table-source-column": LocalJSX.SqmRewardsTableSourceColumn & JSXBase.HTMLAttributes<HTMLSqmRewardsTableSourceColumnElement>;
            "sqm-rewards-table-status-cell": LocalJSX.SqmRewardsTableStatusCell & JSXBase.HTMLAttributes<HTMLSqmRewardsTableStatusCellElement>;
            "sqm-rewards-table-status-column": LocalJSX.SqmRewardsTableStatusColumn & JSXBase.HTMLAttributes<HTMLSqmRewardsTableStatusColumnElement>;
            "sqm-route": LocalJSX.SqmRoute & JSXBase.HTMLAttributes<HTMLSqmRouteElement>;
            "sqm-router": LocalJSX.SqmRouter & JSXBase.HTMLAttributes<HTMLSqmRouterElement>;
            "sqm-scroll": LocalJSX.SqmScroll & JSXBase.HTMLAttributes<HTMLSqmScrollElement>;
            "sqm-share-button": LocalJSX.SqmShareButton & JSXBase.HTMLAttributes<HTMLSqmShareButtonElement>;
            "sqm-share-code": LocalJSX.SqmShareCode & JSXBase.HTMLAttributes<HTMLSqmShareCodeElement>;
            "sqm-share-link": LocalJSX.SqmShareLink & JSXBase.HTMLAttributes<HTMLSqmShareLinkElement>;
            "sqm-stat-container": LocalJSX.SqmStatContainer & JSXBase.HTMLAttributes<HTMLSqmStatContainerElement>;
            "sqm-stencilbook": LocalJSX.SqmStencilbook & JSXBase.HTMLAttributes<HTMLSqmStencilbookElement>;
            "sqm-tab": LocalJSX.SqmTab & JSXBase.HTMLAttributes<HTMLSqmTabElement>;
            "sqm-table-cell": LocalJSX.SqmTableCell & JSXBase.HTMLAttributes<HTMLSqmTableCellElement>;
            "sqm-table-row": LocalJSX.SqmTableRow & JSXBase.HTMLAttributes<HTMLSqmTableRowElement>;
            "sqm-tabs": LocalJSX.SqmTabs & JSXBase.HTMLAttributes<HTMLSqmTabsElement>;
            "sqm-task-card": LocalJSX.SqmTaskCard & JSXBase.HTMLAttributes<HTMLSqmTaskCardElement>;
            "sqm-text": LocalJSX.SqmText & JSXBase.HTMLAttributes<HTMLSqmTextElement>;
            "sqm-text-span": LocalJSX.SqmTextSpan & JSXBase.HTMLAttributes<HTMLSqmTextSpanElement>;
            "sqm-timeline": LocalJSX.SqmTimeline & JSXBase.HTMLAttributes<HTMLSqmTimelineElement>;
            "sqm-timeline-entry": LocalJSX.SqmTimelineEntry & JSXBase.HTMLAttributes<HTMLSqmTimelineEntryElement>;
            "sqm-titled-section": LocalJSX.SqmTitledSection & JSXBase.HTMLAttributes<HTMLSqmTitledSectionElement>;
            "sqm-user-name": LocalJSX.SqmUserName & JSXBase.HTMLAttributes<HTMLSqmUserNameElement>;
        }
    }
}
