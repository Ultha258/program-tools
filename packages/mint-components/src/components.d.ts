/* eslint-disable */
/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */
import { HTMLStencilElement, JSXBase } from "@stencil/core/internal";
import { DemoData } from "./global/demo";
import { AssetCardViewProps } from "./components/sqm-asset-card/sqm-asset-card-view";
import { BigStatViewProps } from "./components/sqm-big-stat/sqm-big-stat-view";
import { EditProfileViewProps } from "./components/sqm-edit-profile/sqm-edit-profile-view";
import { FunctionalComponent } from "@stencil/core";
import { LeaderboardViewProps } from "./components/sqm-leaderboard/sqm-leaderboard-view";
import { LeaderboardRankViewProps } from "./components/sqm-leaderboard-rank/sqm-leaderboard-rank-view";
import { NavigationMenuViewProps } from "./components/sqm-navigation-menu/sqm-navigation-menu-view";
import { NavigationSidebarItemViewProps } from "./components/sqm-navigation-sidebar-item/sqm-navigation-sidebar-item-view";
import { PortalChangePasswordViewProps } from "./components/sqm-portal-change-password/sqm-portal-change-password-view";
import { Spacing } from "./global/mixins";
import { PortalEmailVerificationViewProps } from "./components/sqm-portal-email-verification/sqm-portal-email-verification-view";
import { PortalForgotPasswordViewProps } from "./components/sqm-portal-forgot-password/sqm-portal-forgot-password-view";
import { PortalFrameViewProps } from "./components/sqm-portal-frame/sqm-portal-frame-view";
import { PortalLoginViewProps } from "./components/sqm-portal-login/sqm-portal-login-view";
import { PortalProfileViewProps } from "./components/sqm-portal-profile/sqm-portal-profile-view";
import { PortalRegisterViewProps } from "./components/sqm-portal-register/sqm-portal-register-view";
import { PortalResetPasswordViewProps } from "./components/sqm-portal-reset-password/sqm-portal-reset-password-view";
import { PortalVerifyEmailViewProps } from "./components/sqm-portal-verify-email/sqm-portal-verify-email-view";
import { ReferralTableViewProps } from "./components/sqm-referral-table/sqm-referral-table-view";
import { ShareButtonViewProps } from "./components/sqm-share-button/sqm-share-button-view";
import { ShareLinkViewProps } from "./components/sqm-share-link/sqm-share-link-view";
import { UserNameViewProps } from "./components/sqm-user-name/sqm-user-name-view";
export namespace Components {
    interface SqmAssetCard {
        /**
          * @undocumented
         */
        "demoData"?: DemoData<AssetCardViewProps>;
        /**
          * @uiName Banner image
         */
        "imgUrl": string;
        /**
          * @uiName Banner title
         */
        "titleText": string;
    }
    interface SqmBigStat {
        /**
          * @uiName Alignment - controls the alignment of the flexbox
         */
        "alignment"?: "left" | "right" | "center";
        /**
          * @undocumented
         */
        "demoData"?: DemoData<BigStatViewProps>;
        /**
          * @uiName Flex Reverse - controls the order of the stat value & description column
         */
        "flexReverse"?: boolean;
        /**
          * Select what type of stat to display. Manual paths are also supported.
          * @uiWidget StatTypeSelectWidget
          * @uiName Stat Type
          * @uiOptions {"version": 1.1}
         */
        "statType": string;
    }
    interface SqmDividedLayout {
        /**
          * @uiName Direction
         */
        "direction": "row" | "column";
    }
    interface SqmEditProfile {
        /**
          * @uiName Cancel button text
         */
        "canceltext": string;
        /**
          * @uiName Region field label
         */
        "currentregiontext": string;
        /**
          * @undocumented
         */
        "demoData"?: DemoData<EditProfileViewProps>;
        /**
          * @uiName Heading
         */
        "editprofileheader": string;
        /**
          * @uiName Enable editing button text
         */
        "editprofiletext": string;
        /**
          * @uiName First name field label
         */
        "firstnametext": string;
        /**
          * @uiName Last name field label
         */
        "lastnametext": string;
        /**
          * @uiName Show or hide current region
         */
        "showregion": boolean;
        /**
          * @uiName Update info button text
         */
        "updatetext": string;
    }
    interface SqmFormMessage {
        /**
          * @uiName Icon to use in alert
         */
        "icon"?: string;
        /**
          * @uiName Type of alert
         */
        "type": string;
    }
    interface SqmGraphqlClientProvider {
        "domain": string;
    }
    interface SqmHookStoryContainer {
        "hookStory": FunctionalComponent;
    }
    interface SqmLeaderboard {
        /**
          * @undocumented
         */
        "demoData"?: DemoData<LeaderboardViewProps>;
        /**
          * @uiName Leaderboard time interval
          * @uiWidget DateRange
          * @uiOptions {"allowPastDates":true, "months": 1}
         */
        "interval": string;
        /**
          * @uiName Leaderboard type
          * @uiType string
         */
        "leaderboardType": "topStartedReferrers" | "topConvertedReferrers";
        /**
          * @uiName Rank type
          * @uiType string
         */
        "rankType": "rowNumber" | "rank" | "denseRank";
        /**
          * @uiName Stats Column Heading
         */
        "statsheading": string;
        /**
          * @uiName User Column Heading
         */
        "usersheading": string;
    }
    interface SqmLeaderboardRank {
        /**
          * @undocumented
         */
        "demoData"?: DemoData<LeaderboardRankViewProps>;
        /**
          * @uiName Leaderboard time interval
          * @uiWidget DateRange
          * @uiOptions {"allowPastDates":true, "months": 1}
         */
        "interval": string;
        /**
          * @uiName Leaderboard type
          * @uiType string
         */
        "leaderboardType": "topStartedReferrers" | "topConvertedReferrers";
        "rankText": string;
        /**
          * @uiName Default rank
          * @uiType string
         */
        "rankType": "rowNumber" | "rank" | "denseRank";
        "unrankedText": string;
    }
    interface SqmNavigationMenu {
        /**
          * @undocumented
         */
        "demoData"?: DemoData<NavigationMenuViewProps>;
        /**
          * @uiName Include dropdown menu
         */
        "includeDropdown": boolean;
        /**
          * @uiName Label on the header menu
         */
        "menuLabel": string;
    }
    interface SqmNavigationSidebar {
    }
    interface SqmNavigationSidebarItem {
        /**
          * @undocumented
         */
        "demoData"?: DemoData<NavigationSidebarItemViewProps>;
        /**
          * @uiName Icon
         */
        "icon": string;
        /**
          * @uiName Label
         */
        "label": string;
        /**
          * @uiName Navigation path
         */
        "path": string;
    }
    interface SqmPopupContainer {
        /**
          * @uiName Display a close button on the popup
         */
        "closeButton": boolean;
        /**
          * @uiName Text to be used as the close button
         */
        "closeButtonText": string;
        /**
          * @uiName Specify padding on the popup contents when in embedded mode
          * @uiType string
         */
        "embedPadding"?: "none" | "small" | "medium" | "large";
        /**
          * @uiName Specify padding on the popup contents when in popup mode
          * @uiType string
         */
        "popupPadding"?: "none" | "small" | "medium" | "large";
        /**
          * @uiName Show SaaSquatch Powered By messaging
         */
        "poweredBy": boolean;
    }
    interface SqmPortalChangePassword {
        /**
          * @undocumented
         */
        "demoData"?: DemoData<PortalChangePasswordViewProps>;
    }
    interface SqmPortalContainer {
        /**
          * @uiName Direction
         */
        "direction": "row" | "column";
        /**
          * @uiName Gap
         */
        "gap": Spacing;
        /**
          * @uiName Gap
         */
        "minWidth"?: string;
        /**
          * @uiName Padding
         */
        "padding": Spacing;
    }
    interface SqmPortalEmailVerification {
        /**
          * @undocumented
         */
        "demoData"?: DemoData<PortalEmailVerificationViewProps>;
        "verifyMessage": string;
    }
    interface SqmPortalForgotPassword {
        /**
          * @undocumented
         */
        "demoData"?: DemoData<PortalForgotPasswordViewProps>;
        "emailLabel": string;
        "submitLabel": string;
    }
    interface SqmPortalFrame {
        /**
          * @undocumented
         */
        "demoData"?: DemoData<PortalFrameViewProps>;
    }
    interface SqmPortalLogin {
        /**
          * @undocumented
         */
        "demoData"?: DemoData<PortalLoginViewProps>;
        /**
          * @uiName Label for email field
         */
        "emailLabel": string;
        /**
          * @uiName Label for forgotten password button
         */
        "forgotPasswordLabel": string;
        /**
          * @uiName Page navigated to after sign-in
         */
        "nextPage": string;
        /**
          * @uiName Heading label
         */
        "pageLabel": string;
        /**
          * @uiName Label for password field
         */
        "passwordLabel": string;
        /**
          * @uiName Label for register navigation button
         */
        "registerLabel": string;
        /**
          * @uiName Label for submit button
         */
        "submitLabel": string;
    }
    interface SqmPortalLogout {
        "nextPage": string;
    }
    interface SqmPortalProfile {
        "countrytext": string;
        /**
          * @undocumented
         */
        "demoData"?: DemoData<PortalProfileViewProps>;
        "emailtext": string;
        "firstnametext": string;
        "lastnametext": string;
        "showCountry": boolean;
    }
    interface SqmPortalProtectedRoute {
        "redirectTo": string;
        "redirectToUnverified": string;
        "requireEmailVerification": boolean;
    }
    interface SqmPortalRegister {
        /**
          * @uiName Show confirm password field
         */
        "confirmPassword": boolean;
        /**
          * @undocumented
         */
        "demoData"?: DemoData<PortalRegisterViewProps>;
        /**
          * @uiName Label for email field
         */
        "emailLabel": string;
        /**
          * @uiName Hide default input fields to use custom fields
         */
        "hideInputs": boolean;
        /**
          * @uiName Label for login navigation button
         */
        "loginLabel": string;
        /**
          * @uiName Page navigated to after registration
         */
        "nextPage": string;
        /**
          * @uiName Heading label
         */
        "pageLabel": string;
        /**
          * @uiName Label for password field
         */
        "passwordLabel": string;
        /**
          * @uiName Label for submit button
         */
        "submitLabel": string;
    }
    interface SqmPortalResetPassword {
        "confirmPassword": boolean;
        /**
          * @undocumented
         */
        "demoData"?: DemoData<PortalResetPasswordViewProps>;
        "nextPage": string;
    }
    interface SqmPortalVerifyEmail {
        /**
          * @undocumented
         */
        "demoData"?: DemoData<PortalVerifyEmailViewProps>;
        "nextPage": string;
    }
    interface SqmProgramMenu {
        /**
          * @uiName Label on the header menu
         */
        "menuLabel": string;
    }
    interface SqmReferralTable {
        /**
          * @undocumented
         */
        "demoData"?: DemoData<ReferralTableViewProps>;
        /**
          * @uiName View More button text
         */
        "moreLabel"?: string;
        /**
          * @uiName Number of referrals per page
         */
        "perPage": number;
        /**
          * @uiName Previous button text
         */
        "prevLabel"?: string;
        /**
          * Filters to only show referrals in this program. Will default to filtering by the program context where this table lives. If no program ID is set or provided by context, then shows all referrals from all programs. If program ID is "classic", shows classic-only referrals
          * @uiName Program
         */
        "programId": string;
        /**
          * @uiName Show column labels
         */
        "showLabels"?: boolean;
    }
    interface SqmReferralTableCell {
        "innerTemplate": string;
    }
    interface SqmReferralTableColumn {
        "columnTitle": string;
        "renderCell": (_: Referral) => Promise<any>;
        "renderLabel": () => Promise<string>;
    }
    interface SqmReferralTableDateCell {
        "date": number;
    }
    interface SqmReferralTableDateColumn {
        "columnTitle": string;
        "dateShown": string;
        "renderCell": (data: Referral) => Promise<any>;
        "renderLabel": () => Promise<string>;
    }
    interface SqmReferralTableRewardsCell {
        "rewards": Reward[];
    }
    interface SqmReferralTableRewardsColumn {
        "columnTitle": string;
        "renderCell": (data: Referral) => Promise<any>;
        "renderLabel": () => Promise<string>;
    }
    interface SqmReferralTableStatusCell {
        "converted": boolean;
        "statusText": string;
    }
    interface SqmReferralTableStatusColumn {
        "columnTitle": string;
        "convertedStatusText": string;
        "inProgressStatusText": string;
        "renderCell": (data: Referral) => Promise<any>;
        "renderLabel": () => Promise<string>;
    }
    interface SqmReferralTableUserCell {
        "name": string;
    }
    interface SqmReferralTableUserColumn {
        /**
          * @uiName Name displayed for anonymous users
         */
        "anonymousUser": string;
        "columnTitle": string;
        /**
          * @uiName Name displayed for deleted users
         */
        "deletedUser": string;
        "renderCell": (data: Referral) => Promise<any>;
        "renderLabel": () => Promise<string>;
    }
    interface SqmRoute {
        /**
          * @uiName Navigation path name
         */
        "path": string;
    }
    interface SqmRouter {
    }
    interface SqmShareButton {
        /**
          * @undocumented
         */
        "demoData"?: DemoData<ShareButtonViewProps>;
        /**
          * @uiName Disabled
         */
        "disabled"?: boolean;
        /**
          * @uiName Hide the icon
         */
        "hideicon"?: boolean;
        /**
          * @uiName Icon used in button. Will try to select an icon based on the share medium if left empty.
         */
        "icon"?: string;
        /**
          * @uiName Icon Location
          * @uiType string
          * @uiEnum ["prefix", "suffix" ]
          * @uiEnumNames ["Prefix", "Suffix"]
         */
        "iconslot"?: "prefix" | "suffix";
        /**
          * The social medium to share on. Share messages and links will be pulled from your program config and tagged for analytics.
          * @uiName Share Medium
          * @uiType string
          * @uiEnum ["facebook", "twitter", "email", "direct", "linkedin", "sms", "fbmessenger", "whatsapp", "linemessenger", "pinterest", "reminder", "unknown" ]
          * @uiEnumNames ["Facebook", "Twitter", "Email", "Web Share Sheet", "Linkedin", "SMS", "Facebook Messenger", "Whatsapp", "Line Messenger", "Pinterest", "Reminder", "Unknown"]
         */
        "medium": | "facebook"
    | "twitter"
    | "email"
    | "direct"
    | "linkedin"
    | "sms"
    | "fbmessenger"
    | "whatsapp"
    | "linemessenger"
    | "pinterest"
    | "reminder"
    | "unknown";
        /**
          * @uiName Display as pill
         */
        "pill"?: boolean;
        /**
          * Optional programId, or uses the programId context where this button is rendered.
          * @uiName Program ID
         */
        "programId"?: string;
        /**
          * @uiName Text used for native sharing (mobile only)
         */
        "sharetext"?: string;
        /**
          * @uiName Title used for native sharing (mobile only)
         */
        "sharetitle"?: string;
        /**
          * @uiName Button Size
          * @uiType string
          * @uiEnum ["small", "medium", "large" ]
          * @uiEnumNames ["Small", "Medium", "Large"]
         */
        "size"?: "small" | "medium" | "large";
        /**
          * @uiType string
          * @uiName Button Style
          * @uiEnum ["primary" , "success", "info", "warning", "danger", "default", "text" ]
         */
        "type"?: | "primary"
    | "success"
    | "info"
    | "warning"
    | "danger"
    | "default"
    | "text";
    }
    interface SqmShareCode {
        /**
          * @undocumented
         */
        "demoData"?: DemoData<ShareLinkViewProps>;
        /**
          * The ID of the program that should generate the code. Defaults to the program ID in context where this widget is loaded.
          * @uiName Program ID
         */
        "programId"?: string;
        /**
          * The number of milliseconds that the tooltip will appear for
          * @uiName Tooltip lifespan
         */
        "tooltiplifespan": number;
        /**
          * This is shown after someone has successfully copied the cpde to the clipboard.
          * @uiName Tooltip text
         */
        "tooltiptext": string;
    }
    interface SqmShareLink {
        /**
          * @undocumented
         */
        "demoData"?: DemoData<ShareLinkViewProps>;
        /**
          * The ID of the program that should generate the link. Defaults to the program ID in context where this widget is loaded.
          * @uiName Program ID
         */
        "programId"?: string;
        /**
          * The number of milliseconds that the tooltip will appear for
          * @uiName Tooltip lifespan
         */
        "tooltiplifespan": number;
        /**
          * This is shown after someone has successfully copied the link to the clipboard.
          * @uiName Tooltip text
         */
        "tooltiptext": string;
    }
    interface SqmStatContainer {
        /**
          * @uiName Space between stats
         */
        "space": Spacing;
    }
    interface SqmStencilbook {
    }
    interface SqmTableCell {
        "colspan": number;
        "padding": string;
    }
    interface SqmTableRow {
        "border": string;
    }
    interface SqmText {
    }
    interface SqmTextSpan {
        "text": string;
        "type": "p" | "subtext" | "h1" | "h2" | "h3" | "h4";
    }
    interface SqmTitledSection {
        "label": string;
        /**
          * @uiName Label margin style
         */
        "labelMargin": Spacing;
        /**
          * @uiName Section padding
         */
        "padding": Spacing;
    }
    interface SqmUserName {
        /**
          * @undocumented
         */
        "demoData"?: DemoData<UserNameViewProps>;
        "fallback": string;
        "loadingText": string;
    }
}
declare global {
    interface HTMLSqmAssetCardElement extends Components.SqmAssetCard, HTMLStencilElement {
    }
    var HTMLSqmAssetCardElement: {
        prototype: HTMLSqmAssetCardElement;
        new (): HTMLSqmAssetCardElement;
    };
    interface HTMLSqmBigStatElement extends Components.SqmBigStat, HTMLStencilElement {
    }
    var HTMLSqmBigStatElement: {
        prototype: HTMLSqmBigStatElement;
        new (): HTMLSqmBigStatElement;
    };
    interface HTMLSqmDividedLayoutElement extends Components.SqmDividedLayout, HTMLStencilElement {
    }
    var HTMLSqmDividedLayoutElement: {
        prototype: HTMLSqmDividedLayoutElement;
        new (): HTMLSqmDividedLayoutElement;
    };
    interface HTMLSqmEditProfileElement extends Components.SqmEditProfile, HTMLStencilElement {
    }
    var HTMLSqmEditProfileElement: {
        prototype: HTMLSqmEditProfileElement;
        new (): HTMLSqmEditProfileElement;
    };
    interface HTMLSqmFormMessageElement extends Components.SqmFormMessage, HTMLStencilElement {
    }
    var HTMLSqmFormMessageElement: {
        prototype: HTMLSqmFormMessageElement;
        new (): HTMLSqmFormMessageElement;
    };
    interface HTMLSqmGraphqlClientProviderElement extends Components.SqmGraphqlClientProvider, HTMLStencilElement {
    }
    var HTMLSqmGraphqlClientProviderElement: {
        prototype: HTMLSqmGraphqlClientProviderElement;
        new (): HTMLSqmGraphqlClientProviderElement;
    };
    interface HTMLSqmHookStoryContainerElement extends Components.SqmHookStoryContainer, HTMLStencilElement {
    }
    var HTMLSqmHookStoryContainerElement: {
        prototype: HTMLSqmHookStoryContainerElement;
        new (): HTMLSqmHookStoryContainerElement;
    };
    interface HTMLSqmLeaderboardElement extends Components.SqmLeaderboard, HTMLStencilElement {
    }
    var HTMLSqmLeaderboardElement: {
        prototype: HTMLSqmLeaderboardElement;
        new (): HTMLSqmLeaderboardElement;
    };
    interface HTMLSqmLeaderboardRankElement extends Components.SqmLeaderboardRank, HTMLStencilElement {
    }
    var HTMLSqmLeaderboardRankElement: {
        prototype: HTMLSqmLeaderboardRankElement;
        new (): HTMLSqmLeaderboardRankElement;
    };
    interface HTMLSqmNavigationMenuElement extends Components.SqmNavigationMenu, HTMLStencilElement {
    }
    var HTMLSqmNavigationMenuElement: {
        prototype: HTMLSqmNavigationMenuElement;
        new (): HTMLSqmNavigationMenuElement;
    };
    interface HTMLSqmNavigationSidebarElement extends Components.SqmNavigationSidebar, HTMLStencilElement {
    }
    var HTMLSqmNavigationSidebarElement: {
        prototype: HTMLSqmNavigationSidebarElement;
        new (): HTMLSqmNavigationSidebarElement;
    };
    interface HTMLSqmNavigationSidebarItemElement extends Components.SqmNavigationSidebarItem, HTMLStencilElement {
    }
    var HTMLSqmNavigationSidebarItemElement: {
        prototype: HTMLSqmNavigationSidebarItemElement;
        new (): HTMLSqmNavigationSidebarItemElement;
    };
    interface HTMLSqmPopupContainerElement extends Components.SqmPopupContainer, HTMLStencilElement {
    }
    var HTMLSqmPopupContainerElement: {
        prototype: HTMLSqmPopupContainerElement;
        new (): HTMLSqmPopupContainerElement;
    };
    interface HTMLSqmPortalChangePasswordElement extends Components.SqmPortalChangePassword, HTMLStencilElement {
    }
    var HTMLSqmPortalChangePasswordElement: {
        prototype: HTMLSqmPortalChangePasswordElement;
        new (): HTMLSqmPortalChangePasswordElement;
    };
    interface HTMLSqmPortalContainerElement extends Components.SqmPortalContainer, HTMLStencilElement {
    }
    var HTMLSqmPortalContainerElement: {
        prototype: HTMLSqmPortalContainerElement;
        new (): HTMLSqmPortalContainerElement;
    };
    interface HTMLSqmPortalEmailVerificationElement extends Components.SqmPortalEmailVerification, HTMLStencilElement {
    }
    var HTMLSqmPortalEmailVerificationElement: {
        prototype: HTMLSqmPortalEmailVerificationElement;
        new (): HTMLSqmPortalEmailVerificationElement;
    };
    interface HTMLSqmPortalForgotPasswordElement extends Components.SqmPortalForgotPassword, HTMLStencilElement {
    }
    var HTMLSqmPortalForgotPasswordElement: {
        prototype: HTMLSqmPortalForgotPasswordElement;
        new (): HTMLSqmPortalForgotPasswordElement;
    };
    interface HTMLSqmPortalFrameElement extends Components.SqmPortalFrame, HTMLStencilElement {
    }
    var HTMLSqmPortalFrameElement: {
        prototype: HTMLSqmPortalFrameElement;
        new (): HTMLSqmPortalFrameElement;
    };
    interface HTMLSqmPortalLoginElement extends Components.SqmPortalLogin, HTMLStencilElement {
    }
    var HTMLSqmPortalLoginElement: {
        prototype: HTMLSqmPortalLoginElement;
        new (): HTMLSqmPortalLoginElement;
    };
    interface HTMLSqmPortalLogoutElement extends Components.SqmPortalLogout, HTMLStencilElement {
    }
    var HTMLSqmPortalLogoutElement: {
        prototype: HTMLSqmPortalLogoutElement;
        new (): HTMLSqmPortalLogoutElement;
    };
    interface HTMLSqmPortalProfileElement extends Components.SqmPortalProfile, HTMLStencilElement {
    }
    var HTMLSqmPortalProfileElement: {
        prototype: HTMLSqmPortalProfileElement;
        new (): HTMLSqmPortalProfileElement;
    };
    interface HTMLSqmPortalProtectedRouteElement extends Components.SqmPortalProtectedRoute, HTMLStencilElement {
    }
    var HTMLSqmPortalProtectedRouteElement: {
        prototype: HTMLSqmPortalProtectedRouteElement;
        new (): HTMLSqmPortalProtectedRouteElement;
    };
    interface HTMLSqmPortalRegisterElement extends Components.SqmPortalRegister, HTMLStencilElement {
    }
    var HTMLSqmPortalRegisterElement: {
        prototype: HTMLSqmPortalRegisterElement;
        new (): HTMLSqmPortalRegisterElement;
    };
    interface HTMLSqmPortalResetPasswordElement extends Components.SqmPortalResetPassword, HTMLStencilElement {
    }
    var HTMLSqmPortalResetPasswordElement: {
        prototype: HTMLSqmPortalResetPasswordElement;
        new (): HTMLSqmPortalResetPasswordElement;
    };
    interface HTMLSqmPortalVerifyEmailElement extends Components.SqmPortalVerifyEmail, HTMLStencilElement {
    }
    var HTMLSqmPortalVerifyEmailElement: {
        prototype: HTMLSqmPortalVerifyEmailElement;
        new (): HTMLSqmPortalVerifyEmailElement;
    };
    interface HTMLSqmProgramMenuElement extends Components.SqmProgramMenu, HTMLStencilElement {
    }
    var HTMLSqmProgramMenuElement: {
        prototype: HTMLSqmProgramMenuElement;
        new (): HTMLSqmProgramMenuElement;
    };
    interface HTMLSqmReferralTableElement extends Components.SqmReferralTable, HTMLStencilElement {
    }
    var HTMLSqmReferralTableElement: {
        prototype: HTMLSqmReferralTableElement;
        new (): HTMLSqmReferralTableElement;
    };
    interface HTMLSqmReferralTableCellElement extends Components.SqmReferralTableCell, HTMLStencilElement {
    }
    var HTMLSqmReferralTableCellElement: {
        prototype: HTMLSqmReferralTableCellElement;
        new (): HTMLSqmReferralTableCellElement;
    };
    interface HTMLSqmReferralTableColumnElement extends Components.SqmReferralTableColumn, HTMLStencilElement {
    }
    var HTMLSqmReferralTableColumnElement: {
        prototype: HTMLSqmReferralTableColumnElement;
        new (): HTMLSqmReferralTableColumnElement;
    };
    interface HTMLSqmReferralTableDateCellElement extends Components.SqmReferralTableDateCell, HTMLStencilElement {
    }
    var HTMLSqmReferralTableDateCellElement: {
        prototype: HTMLSqmReferralTableDateCellElement;
        new (): HTMLSqmReferralTableDateCellElement;
    };
    interface HTMLSqmReferralTableDateColumnElement extends Components.SqmReferralTableDateColumn, HTMLStencilElement {
    }
    var HTMLSqmReferralTableDateColumnElement: {
        prototype: HTMLSqmReferralTableDateColumnElement;
        new (): HTMLSqmReferralTableDateColumnElement;
    };
    interface HTMLSqmReferralTableRewardsCellElement extends Components.SqmReferralTableRewardsCell, HTMLStencilElement {
    }
    var HTMLSqmReferralTableRewardsCellElement: {
        prototype: HTMLSqmReferralTableRewardsCellElement;
        new (): HTMLSqmReferralTableRewardsCellElement;
    };
    interface HTMLSqmReferralTableRewardsColumnElement extends Components.SqmReferralTableRewardsColumn, HTMLStencilElement {
    }
    var HTMLSqmReferralTableRewardsColumnElement: {
        prototype: HTMLSqmReferralTableRewardsColumnElement;
        new (): HTMLSqmReferralTableRewardsColumnElement;
    };
    interface HTMLSqmReferralTableStatusCellElement extends Components.SqmReferralTableStatusCell, HTMLStencilElement {
    }
    var HTMLSqmReferralTableStatusCellElement: {
        prototype: HTMLSqmReferralTableStatusCellElement;
        new (): HTMLSqmReferralTableStatusCellElement;
    };
    interface HTMLSqmReferralTableStatusColumnElement extends Components.SqmReferralTableStatusColumn, HTMLStencilElement {
    }
    var HTMLSqmReferralTableStatusColumnElement: {
        prototype: HTMLSqmReferralTableStatusColumnElement;
        new (): HTMLSqmReferralTableStatusColumnElement;
    };
    interface HTMLSqmReferralTableUserCellElement extends Components.SqmReferralTableUserCell, HTMLStencilElement {
    }
    var HTMLSqmReferralTableUserCellElement: {
        prototype: HTMLSqmReferralTableUserCellElement;
        new (): HTMLSqmReferralTableUserCellElement;
    };
    interface HTMLSqmReferralTableUserColumnElement extends Components.SqmReferralTableUserColumn, HTMLStencilElement {
    }
    var HTMLSqmReferralTableUserColumnElement: {
        prototype: HTMLSqmReferralTableUserColumnElement;
        new (): HTMLSqmReferralTableUserColumnElement;
    };
    interface HTMLSqmRouteElement extends Components.SqmRoute, HTMLStencilElement {
    }
    var HTMLSqmRouteElement: {
        prototype: HTMLSqmRouteElement;
        new (): HTMLSqmRouteElement;
    };
    interface HTMLSqmRouterElement extends Components.SqmRouter, HTMLStencilElement {
    }
    var HTMLSqmRouterElement: {
        prototype: HTMLSqmRouterElement;
        new (): HTMLSqmRouterElement;
    };
    interface HTMLSqmShareButtonElement extends Components.SqmShareButton, HTMLStencilElement {
    }
    var HTMLSqmShareButtonElement: {
        prototype: HTMLSqmShareButtonElement;
        new (): HTMLSqmShareButtonElement;
    };
    interface HTMLSqmShareCodeElement extends Components.SqmShareCode, HTMLStencilElement {
    }
    var HTMLSqmShareCodeElement: {
        prototype: HTMLSqmShareCodeElement;
        new (): HTMLSqmShareCodeElement;
    };
    interface HTMLSqmShareLinkElement extends Components.SqmShareLink, HTMLStencilElement {
    }
    var HTMLSqmShareLinkElement: {
        prototype: HTMLSqmShareLinkElement;
        new (): HTMLSqmShareLinkElement;
    };
    interface HTMLSqmStatContainerElement extends Components.SqmStatContainer, HTMLStencilElement {
    }
    var HTMLSqmStatContainerElement: {
        prototype: HTMLSqmStatContainerElement;
        new (): HTMLSqmStatContainerElement;
    };
    interface HTMLSqmStencilbookElement extends Components.SqmStencilbook, HTMLStencilElement {
    }
    var HTMLSqmStencilbookElement: {
        prototype: HTMLSqmStencilbookElement;
        new (): HTMLSqmStencilbookElement;
    };
    interface HTMLSqmTableCellElement extends Components.SqmTableCell, HTMLStencilElement {
    }
    var HTMLSqmTableCellElement: {
        prototype: HTMLSqmTableCellElement;
        new (): HTMLSqmTableCellElement;
    };
    interface HTMLSqmTableRowElement extends Components.SqmTableRow, HTMLStencilElement {
    }
    var HTMLSqmTableRowElement: {
        prototype: HTMLSqmTableRowElement;
        new (): HTMLSqmTableRowElement;
    };
    interface HTMLSqmTextElement extends Components.SqmText, HTMLStencilElement {
    }
    var HTMLSqmTextElement: {
        prototype: HTMLSqmTextElement;
        new (): HTMLSqmTextElement;
    };
    interface HTMLSqmTextSpanElement extends Components.SqmTextSpan, HTMLStencilElement {
    }
    var HTMLSqmTextSpanElement: {
        prototype: HTMLSqmTextSpanElement;
        new (): HTMLSqmTextSpanElement;
    };
    interface HTMLSqmTitledSectionElement extends Components.SqmTitledSection, HTMLStencilElement {
    }
    var HTMLSqmTitledSectionElement: {
        prototype: HTMLSqmTitledSectionElement;
        new (): HTMLSqmTitledSectionElement;
    };
    interface HTMLSqmUserNameElement extends Components.SqmUserName, HTMLStencilElement {
    }
    var HTMLSqmUserNameElement: {
        prototype: HTMLSqmUserNameElement;
        new (): HTMLSqmUserNameElement;
    };
    interface HTMLElementTagNameMap {
        "sqm-asset-card": HTMLSqmAssetCardElement;
        "sqm-big-stat": HTMLSqmBigStatElement;
        "sqm-divided-layout": HTMLSqmDividedLayoutElement;
        "sqm-edit-profile": HTMLSqmEditProfileElement;
        "sqm-form-message": HTMLSqmFormMessageElement;
        "sqm-graphql-client-provider": HTMLSqmGraphqlClientProviderElement;
        "sqm-hook-story-container": HTMLSqmHookStoryContainerElement;
        "sqm-leaderboard": HTMLSqmLeaderboardElement;
        "sqm-leaderboard-rank": HTMLSqmLeaderboardRankElement;
        "sqm-navigation-menu": HTMLSqmNavigationMenuElement;
        "sqm-navigation-sidebar": HTMLSqmNavigationSidebarElement;
        "sqm-navigation-sidebar-item": HTMLSqmNavigationSidebarItemElement;
        "sqm-popup-container": HTMLSqmPopupContainerElement;
        "sqm-portal-change-password": HTMLSqmPortalChangePasswordElement;
        "sqm-portal-container": HTMLSqmPortalContainerElement;
        "sqm-portal-email-verification": HTMLSqmPortalEmailVerificationElement;
        "sqm-portal-forgot-password": HTMLSqmPortalForgotPasswordElement;
        "sqm-portal-frame": HTMLSqmPortalFrameElement;
        "sqm-portal-login": HTMLSqmPortalLoginElement;
        "sqm-portal-logout": HTMLSqmPortalLogoutElement;
        "sqm-portal-profile": HTMLSqmPortalProfileElement;
        "sqm-portal-protected-route": HTMLSqmPortalProtectedRouteElement;
        "sqm-portal-register": HTMLSqmPortalRegisterElement;
        "sqm-portal-reset-password": HTMLSqmPortalResetPasswordElement;
        "sqm-portal-verify-email": HTMLSqmPortalVerifyEmailElement;
        "sqm-program-menu": HTMLSqmProgramMenuElement;
        "sqm-referral-table": HTMLSqmReferralTableElement;
        "sqm-referral-table-cell": HTMLSqmReferralTableCellElement;
        "sqm-referral-table-column": HTMLSqmReferralTableColumnElement;
        "sqm-referral-table-date-cell": HTMLSqmReferralTableDateCellElement;
        "sqm-referral-table-date-column": HTMLSqmReferralTableDateColumnElement;
        "sqm-referral-table-rewards-cell": HTMLSqmReferralTableRewardsCellElement;
        "sqm-referral-table-rewards-column": HTMLSqmReferralTableRewardsColumnElement;
        "sqm-referral-table-status-cell": HTMLSqmReferralTableStatusCellElement;
        "sqm-referral-table-status-column": HTMLSqmReferralTableStatusColumnElement;
        "sqm-referral-table-user-cell": HTMLSqmReferralTableUserCellElement;
        "sqm-referral-table-user-column": HTMLSqmReferralTableUserColumnElement;
        "sqm-route": HTMLSqmRouteElement;
        "sqm-router": HTMLSqmRouterElement;
        "sqm-share-button": HTMLSqmShareButtonElement;
        "sqm-share-code": HTMLSqmShareCodeElement;
        "sqm-share-link": HTMLSqmShareLinkElement;
        "sqm-stat-container": HTMLSqmStatContainerElement;
        "sqm-stencilbook": HTMLSqmStencilbookElement;
        "sqm-table-cell": HTMLSqmTableCellElement;
        "sqm-table-row": HTMLSqmTableRowElement;
        "sqm-text": HTMLSqmTextElement;
        "sqm-text-span": HTMLSqmTextSpanElement;
        "sqm-titled-section": HTMLSqmTitledSectionElement;
        "sqm-user-name": HTMLSqmUserNameElement;
    }
}
declare namespace LocalJSX {
    interface SqmAssetCard {
        /**
          * @undocumented
         */
        "demoData"?: DemoData<AssetCardViewProps>;
        /**
          * @uiName Banner image
         */
        "imgUrl"?: string;
        /**
          * @uiName Banner title
         */
        "titleText"?: string;
    }
    interface SqmBigStat {
        /**
          * @uiName Alignment - controls the alignment of the flexbox
         */
        "alignment"?: "left" | "right" | "center";
        /**
          * @undocumented
         */
        "demoData"?: DemoData<BigStatViewProps>;
        /**
          * @uiName Flex Reverse - controls the order of the stat value & description column
         */
        "flexReverse"?: boolean;
        /**
          * Select what type of stat to display. Manual paths are also supported.
          * @uiWidget StatTypeSelectWidget
          * @uiName Stat Type
          * @uiOptions {"version": 1.1}
         */
        "statType"?: string;
    }
    interface SqmDividedLayout {
        /**
          * @uiName Direction
         */
        "direction"?: "row" | "column";
    }
    interface SqmEditProfile {
        /**
          * @uiName Cancel button text
         */
        "canceltext"?: string;
        /**
          * @uiName Region field label
         */
        "currentregiontext"?: string;
        /**
          * @undocumented
         */
        "demoData"?: DemoData<EditProfileViewProps>;
        /**
          * @uiName Heading
         */
        "editprofileheader"?: string;
        /**
          * @uiName Enable editing button text
         */
        "editprofiletext"?: string;
        /**
          * @uiName First name field label
         */
        "firstnametext"?: string;
        /**
          * @uiName Last name field label
         */
        "lastnametext"?: string;
        /**
          * @uiName Show or hide current region
         */
        "showregion"?: boolean;
        /**
          * @uiName Update info button text
         */
        "updatetext"?: string;
    }
    interface SqmFormMessage {
        /**
          * @uiName Icon to use in alert
         */
        "icon"?: string;
        /**
          * @uiName Type of alert
         */
        "type"?: string;
    }
    interface SqmGraphqlClientProvider {
        "domain"?: string;
    }
    interface SqmHookStoryContainer {
        "hookStory"?: FunctionalComponent;
    }
    interface SqmLeaderboard {
        /**
          * @undocumented
         */
        "demoData"?: DemoData<LeaderboardViewProps>;
        /**
          * @uiName Leaderboard time interval
          * @uiWidget DateRange
          * @uiOptions {"allowPastDates":true, "months": 1}
         */
        "interval"?: string;
        /**
          * @uiName Leaderboard type
          * @uiType string
         */
        "leaderboardType"?: "topStartedReferrers" | "topConvertedReferrers";
        /**
          * @uiName Rank type
          * @uiType string
         */
        "rankType"?: "rowNumber" | "rank" | "denseRank";
        /**
          * @uiName Stats Column Heading
         */
        "statsheading"?: string;
        /**
          * @uiName User Column Heading
         */
        "usersheading"?: string;
    }
    interface SqmLeaderboardRank {
        /**
          * @undocumented
         */
        "demoData"?: DemoData<LeaderboardRankViewProps>;
        /**
          * @uiName Leaderboard time interval
          * @uiWidget DateRange
          * @uiOptions {"allowPastDates":true, "months": 1}
         */
        "interval"?: string;
        /**
          * @uiName Leaderboard type
          * @uiType string
         */
        "leaderboardType"?: "topStartedReferrers" | "topConvertedReferrers";
        "rankText"?: string;
        /**
          * @uiName Default rank
          * @uiType string
         */
        "rankType"?: "rowNumber" | "rank" | "denseRank";
        "unrankedText"?: string;
    }
    interface SqmNavigationMenu {
        /**
          * @undocumented
         */
        "demoData"?: DemoData<NavigationMenuViewProps>;
        /**
          * @uiName Include dropdown menu
         */
        "includeDropdown"?: boolean;
        /**
          * @uiName Label on the header menu
         */
        "menuLabel"?: string;
    }
    interface SqmNavigationSidebar {
    }
    interface SqmNavigationSidebarItem {
        /**
          * @undocumented
         */
        "demoData"?: DemoData<NavigationSidebarItemViewProps>;
        /**
          * @uiName Icon
         */
        "icon"?: string;
        /**
          * @uiName Label
         */
        "label"?: string;
        /**
          * @uiName Navigation path
         */
        "path"?: string;
    }
    interface SqmPopupContainer {
        /**
          * @uiName Display a close button on the popup
         */
        "closeButton"?: boolean;
        /**
          * @uiName Text to be used as the close button
         */
        "closeButtonText"?: string;
        /**
          * @uiName Specify padding on the popup contents when in embedded mode
          * @uiType string
         */
        "embedPadding"?: "none" | "small" | "medium" | "large";
        /**
          * @uiName Specify padding on the popup contents when in popup mode
          * @uiType string
         */
        "popupPadding"?: "none" | "small" | "medium" | "large";
        /**
          * @uiName Show SaaSquatch Powered By messaging
         */
        "poweredBy"?: boolean;
    }
    interface SqmPortalChangePassword {
        /**
          * @undocumented
         */
        "demoData"?: DemoData<PortalChangePasswordViewProps>;
    }
    interface SqmPortalContainer {
        /**
          * @uiName Direction
         */
        "direction"?: "row" | "column";
        /**
          * @uiName Gap
         */
        "gap"?: Spacing;
        /**
          * @uiName Gap
         */
        "minWidth"?: string;
        /**
          * @uiName Padding
         */
        "padding"?: Spacing;
    }
    interface SqmPortalEmailVerification {
        /**
          * @undocumented
         */
        "demoData"?: DemoData<PortalEmailVerificationViewProps>;
        "verifyMessage"?: string;
    }
    interface SqmPortalForgotPassword {
        /**
          * @undocumented
         */
        "demoData"?: DemoData<PortalForgotPasswordViewProps>;
        "emailLabel"?: string;
        "submitLabel"?: string;
    }
    interface SqmPortalFrame {
        /**
          * @undocumented
         */
        "demoData"?: DemoData<PortalFrameViewProps>;
    }
    interface SqmPortalLogin {
        /**
          * @undocumented
         */
        "demoData"?: DemoData<PortalLoginViewProps>;
        /**
          * @uiName Label for email field
         */
        "emailLabel"?: string;
        /**
          * @uiName Label for forgotten password button
         */
        "forgotPasswordLabel"?: string;
        /**
          * @uiName Page navigated to after sign-in
         */
        "nextPage"?: string;
        /**
          * @uiName Heading label
         */
        "pageLabel"?: string;
        /**
          * @uiName Label for password field
         */
        "passwordLabel"?: string;
        /**
          * @uiName Label for register navigation button
         */
        "registerLabel"?: string;
        /**
          * @uiName Label for submit button
         */
        "submitLabel"?: string;
    }
    interface SqmPortalLogout {
        "nextPage"?: string;
    }
    interface SqmPortalProfile {
        "countrytext"?: string;
        /**
          * @undocumented
         */
        "demoData"?: DemoData<PortalProfileViewProps>;
        "emailtext"?: string;
        "firstnametext"?: string;
        "lastnametext"?: string;
        "showCountry"?: boolean;
    }
    interface SqmPortalProtectedRoute {
        "redirectTo"?: string;
        "redirectToUnverified"?: string;
        "requireEmailVerification"?: boolean;
    }
    interface SqmPortalRegister {
        /**
          * @uiName Show confirm password field
         */
        "confirmPassword"?: boolean;
        /**
          * @undocumented
         */
        "demoData"?: DemoData<PortalRegisterViewProps>;
        /**
          * @uiName Label for email field
         */
        "emailLabel"?: string;
        /**
          * @uiName Hide default input fields to use custom fields
         */
        "hideInputs"?: boolean;
        /**
          * @uiName Label for login navigation button
         */
        "loginLabel"?: string;
        /**
          * @uiName Page navigated to after registration
         */
        "nextPage"?: string;
        /**
          * @uiName Heading label
         */
        "pageLabel"?: string;
        /**
          * @uiName Label for password field
         */
        "passwordLabel"?: string;
        /**
          * @uiName Label for submit button
         */
        "submitLabel"?: string;
    }
    interface SqmPortalResetPassword {
        "confirmPassword"?: boolean;
        /**
          * @undocumented
         */
        "demoData"?: DemoData<PortalResetPasswordViewProps>;
        "nextPage"?: string;
    }
    interface SqmPortalVerifyEmail {
        /**
          * @undocumented
         */
        "demoData"?: DemoData<PortalVerifyEmailViewProps>;
        "nextPage"?: string;
    }
    interface SqmProgramMenu {
        /**
          * @uiName Label on the header menu
         */
        "menuLabel"?: string;
    }
    interface SqmReferralTable {
        /**
          * @undocumented
         */
        "demoData"?: DemoData<ReferralTableViewProps>;
        /**
          * @uiName View More button text
         */
        "moreLabel"?: string;
        /**
          * @uiName Number of referrals per page
         */
        "perPage"?: number;
        /**
          * @uiName Previous button text
         */
        "prevLabel"?: string;
        /**
          * Filters to only show referrals in this program. Will default to filtering by the program context where this table lives. If no program ID is set or provided by context, then shows all referrals from all programs. If program ID is "classic", shows classic-only referrals
          * @uiName Program
         */
        "programId"?: string;
        /**
          * @uiName Show column labels
         */
        "showLabels"?: boolean;
    }
    interface SqmReferralTableCell {
        "innerTemplate"?: string;
    }
    interface SqmReferralTableColumn {
        "columnTitle"?: string;
    }
    interface SqmReferralTableDateCell {
        "date"?: number;
    }
    interface SqmReferralTableDateColumn {
        "columnTitle"?: string;
        "dateShown"?: string;
    }
    interface SqmReferralTableRewardsCell {
        "rewards"?: Reward[];
    }
    interface SqmReferralTableRewardsColumn {
        "columnTitle"?: string;
    }
    interface SqmReferralTableStatusCell {
        "converted"?: boolean;
        "statusText"?: string;
    }
    interface SqmReferralTableStatusColumn {
        "columnTitle"?: string;
        "convertedStatusText"?: string;
        "inProgressStatusText"?: string;
    }
    interface SqmReferralTableUserCell {
        "name"?: string;
    }
    interface SqmReferralTableUserColumn {
        /**
          * @uiName Name displayed for anonymous users
         */
        "anonymousUser"?: string;
        "columnTitle"?: string;
        /**
          * @uiName Name displayed for deleted users
         */
        "deletedUser"?: string;
    }
    interface SqmRoute {
        /**
          * @uiName Navigation path name
         */
        "path"?: string;
    }
    interface SqmRouter {
    }
    interface SqmShareButton {
        /**
          * @undocumented
         */
        "demoData"?: DemoData<ShareButtonViewProps>;
        /**
          * @uiName Disabled
         */
        "disabled"?: boolean;
        /**
          * @uiName Hide the icon
         */
        "hideicon"?: boolean;
        /**
          * @uiName Icon used in button. Will try to select an icon based on the share medium if left empty.
         */
        "icon"?: string;
        /**
          * @uiName Icon Location
          * @uiType string
          * @uiEnum ["prefix", "suffix" ]
          * @uiEnumNames ["Prefix", "Suffix"]
         */
        "iconslot"?: "prefix" | "suffix";
        /**
          * The social medium to share on. Share messages and links will be pulled from your program config and tagged for analytics.
          * @uiName Share Medium
          * @uiType string
          * @uiEnum ["facebook", "twitter", "email", "direct", "linkedin", "sms", "fbmessenger", "whatsapp", "linemessenger", "pinterest", "reminder", "unknown" ]
          * @uiEnumNames ["Facebook", "Twitter", "Email", "Web Share Sheet", "Linkedin", "SMS", "Facebook Messenger", "Whatsapp", "Line Messenger", "Pinterest", "Reminder", "Unknown"]
         */
        "medium"?: | "facebook"
    | "twitter"
    | "email"
    | "direct"
    | "linkedin"
    | "sms"
    | "fbmessenger"
    | "whatsapp"
    | "linemessenger"
    | "pinterest"
    | "reminder"
    | "unknown";
        /**
          * @uiName Display as pill
         */
        "pill"?: boolean;
        /**
          * Optional programId, or uses the programId context where this button is rendered.
          * @uiName Program ID
         */
        "programId"?: string;
        /**
          * @uiName Text used for native sharing (mobile only)
         */
        "sharetext"?: string;
        /**
          * @uiName Title used for native sharing (mobile only)
         */
        "sharetitle"?: string;
        /**
          * @uiName Button Size
          * @uiType string
          * @uiEnum ["small", "medium", "large" ]
          * @uiEnumNames ["Small", "Medium", "Large"]
         */
        "size"?: "small" | "medium" | "large";
        /**
          * @uiType string
          * @uiName Button Style
          * @uiEnum ["primary" , "success", "info", "warning", "danger", "default", "text" ]
         */
        "type"?: | "primary"
    | "success"
    | "info"
    | "warning"
    | "danger"
    | "default"
    | "text";
    }
    interface SqmShareCode {
        /**
          * @undocumented
         */
        "demoData"?: DemoData<ShareLinkViewProps>;
        /**
          * The ID of the program that should generate the code. Defaults to the program ID in context where this widget is loaded.
          * @uiName Program ID
         */
        "programId"?: string;
        /**
          * The number of milliseconds that the tooltip will appear for
          * @uiName Tooltip lifespan
         */
        "tooltiplifespan"?: number;
        /**
          * This is shown after someone has successfully copied the cpde to the clipboard.
          * @uiName Tooltip text
         */
        "tooltiptext"?: string;
    }
    interface SqmShareLink {
        /**
          * @undocumented
         */
        "demoData"?: DemoData<ShareLinkViewProps>;
        /**
          * The ID of the program that should generate the link. Defaults to the program ID in context where this widget is loaded.
          * @uiName Program ID
         */
        "programId"?: string;
        /**
          * The number of milliseconds that the tooltip will appear for
          * @uiName Tooltip lifespan
         */
        "tooltiplifespan"?: number;
        /**
          * This is shown after someone has successfully copied the link to the clipboard.
          * @uiName Tooltip text
         */
        "tooltiptext"?: string;
    }
    interface SqmStatContainer {
        /**
          * @uiName Space between stats
         */
        "space"?: Spacing;
    }
    interface SqmStencilbook {
    }
    interface SqmTableCell {
        "colspan"?: number;
        "padding"?: string;
    }
    interface SqmTableRow {
        "border"?: string;
    }
    interface SqmText {
    }
    interface SqmTextSpan {
        "text"?: string;
        "type"?: "p" | "subtext" | "h1" | "h2" | "h3" | "h4";
    }
    interface SqmTitledSection {
        "label"?: string;
        /**
          * @uiName Label margin style
         */
        "labelMargin"?: Spacing;
        /**
          * @uiName Section padding
         */
        "padding"?: Spacing;
    }
    interface SqmUserName {
        /**
          * @undocumented
         */
        "demoData"?: DemoData<UserNameViewProps>;
        "fallback"?: string;
        "loadingText"?: string;
    }
    interface IntrinsicElements {
        "sqm-asset-card": SqmAssetCard;
        "sqm-big-stat": SqmBigStat;
        "sqm-divided-layout": SqmDividedLayout;
        "sqm-edit-profile": SqmEditProfile;
        "sqm-form-message": SqmFormMessage;
        "sqm-graphql-client-provider": SqmGraphqlClientProvider;
        "sqm-hook-story-container": SqmHookStoryContainer;
        "sqm-leaderboard": SqmLeaderboard;
        "sqm-leaderboard-rank": SqmLeaderboardRank;
        "sqm-navigation-menu": SqmNavigationMenu;
        "sqm-navigation-sidebar": SqmNavigationSidebar;
        "sqm-navigation-sidebar-item": SqmNavigationSidebarItem;
        "sqm-popup-container": SqmPopupContainer;
        "sqm-portal-change-password": SqmPortalChangePassword;
        "sqm-portal-container": SqmPortalContainer;
        "sqm-portal-email-verification": SqmPortalEmailVerification;
        "sqm-portal-forgot-password": SqmPortalForgotPassword;
        "sqm-portal-frame": SqmPortalFrame;
        "sqm-portal-login": SqmPortalLogin;
        "sqm-portal-logout": SqmPortalLogout;
        "sqm-portal-profile": SqmPortalProfile;
        "sqm-portal-protected-route": SqmPortalProtectedRoute;
        "sqm-portal-register": SqmPortalRegister;
        "sqm-portal-reset-password": SqmPortalResetPassword;
        "sqm-portal-verify-email": SqmPortalVerifyEmail;
        "sqm-program-menu": SqmProgramMenu;
        "sqm-referral-table": SqmReferralTable;
        "sqm-referral-table-cell": SqmReferralTableCell;
        "sqm-referral-table-column": SqmReferralTableColumn;
        "sqm-referral-table-date-cell": SqmReferralTableDateCell;
        "sqm-referral-table-date-column": SqmReferralTableDateColumn;
        "sqm-referral-table-rewards-cell": SqmReferralTableRewardsCell;
        "sqm-referral-table-rewards-column": SqmReferralTableRewardsColumn;
        "sqm-referral-table-status-cell": SqmReferralTableStatusCell;
        "sqm-referral-table-status-column": SqmReferralTableStatusColumn;
        "sqm-referral-table-user-cell": SqmReferralTableUserCell;
        "sqm-referral-table-user-column": SqmReferralTableUserColumn;
        "sqm-route": SqmRoute;
        "sqm-router": SqmRouter;
        "sqm-share-button": SqmShareButton;
        "sqm-share-code": SqmShareCode;
        "sqm-share-link": SqmShareLink;
        "sqm-stat-container": SqmStatContainer;
        "sqm-stencilbook": SqmStencilbook;
        "sqm-table-cell": SqmTableCell;
        "sqm-table-row": SqmTableRow;
        "sqm-text": SqmText;
        "sqm-text-span": SqmTextSpan;
        "sqm-titled-section": SqmTitledSection;
        "sqm-user-name": SqmUserName;
    }
}
export { LocalJSX as JSX };
declare module "@stencil/core" {
    export namespace JSX {
        interface IntrinsicElements {
            "sqm-asset-card": LocalJSX.SqmAssetCard & JSXBase.HTMLAttributes<HTMLSqmAssetCardElement>;
            "sqm-big-stat": LocalJSX.SqmBigStat & JSXBase.HTMLAttributes<HTMLSqmBigStatElement>;
            "sqm-divided-layout": LocalJSX.SqmDividedLayout & JSXBase.HTMLAttributes<HTMLSqmDividedLayoutElement>;
            "sqm-edit-profile": LocalJSX.SqmEditProfile & JSXBase.HTMLAttributes<HTMLSqmEditProfileElement>;
            "sqm-form-message": LocalJSX.SqmFormMessage & JSXBase.HTMLAttributes<HTMLSqmFormMessageElement>;
            "sqm-graphql-client-provider": LocalJSX.SqmGraphqlClientProvider & JSXBase.HTMLAttributes<HTMLSqmGraphqlClientProviderElement>;
            "sqm-hook-story-container": LocalJSX.SqmHookStoryContainer & JSXBase.HTMLAttributes<HTMLSqmHookStoryContainerElement>;
            "sqm-leaderboard": LocalJSX.SqmLeaderboard & JSXBase.HTMLAttributes<HTMLSqmLeaderboardElement>;
            "sqm-leaderboard-rank": LocalJSX.SqmLeaderboardRank & JSXBase.HTMLAttributes<HTMLSqmLeaderboardRankElement>;
            "sqm-navigation-menu": LocalJSX.SqmNavigationMenu & JSXBase.HTMLAttributes<HTMLSqmNavigationMenuElement>;
            "sqm-navigation-sidebar": LocalJSX.SqmNavigationSidebar & JSXBase.HTMLAttributes<HTMLSqmNavigationSidebarElement>;
            "sqm-navigation-sidebar-item": LocalJSX.SqmNavigationSidebarItem & JSXBase.HTMLAttributes<HTMLSqmNavigationSidebarItemElement>;
            "sqm-popup-container": LocalJSX.SqmPopupContainer & JSXBase.HTMLAttributes<HTMLSqmPopupContainerElement>;
            "sqm-portal-change-password": LocalJSX.SqmPortalChangePassword & JSXBase.HTMLAttributes<HTMLSqmPortalChangePasswordElement>;
            "sqm-portal-container": LocalJSX.SqmPortalContainer & JSXBase.HTMLAttributes<HTMLSqmPortalContainerElement>;
            "sqm-portal-email-verification": LocalJSX.SqmPortalEmailVerification & JSXBase.HTMLAttributes<HTMLSqmPortalEmailVerificationElement>;
            "sqm-portal-forgot-password": LocalJSX.SqmPortalForgotPassword & JSXBase.HTMLAttributes<HTMLSqmPortalForgotPasswordElement>;
            "sqm-portal-frame": LocalJSX.SqmPortalFrame & JSXBase.HTMLAttributes<HTMLSqmPortalFrameElement>;
            "sqm-portal-login": LocalJSX.SqmPortalLogin & JSXBase.HTMLAttributes<HTMLSqmPortalLoginElement>;
            "sqm-portal-logout": LocalJSX.SqmPortalLogout & JSXBase.HTMLAttributes<HTMLSqmPortalLogoutElement>;
            "sqm-portal-profile": LocalJSX.SqmPortalProfile & JSXBase.HTMLAttributes<HTMLSqmPortalProfileElement>;
            "sqm-portal-protected-route": LocalJSX.SqmPortalProtectedRoute & JSXBase.HTMLAttributes<HTMLSqmPortalProtectedRouteElement>;
            "sqm-portal-register": LocalJSX.SqmPortalRegister & JSXBase.HTMLAttributes<HTMLSqmPortalRegisterElement>;
            "sqm-portal-reset-password": LocalJSX.SqmPortalResetPassword & JSXBase.HTMLAttributes<HTMLSqmPortalResetPasswordElement>;
            "sqm-portal-verify-email": LocalJSX.SqmPortalVerifyEmail & JSXBase.HTMLAttributes<HTMLSqmPortalVerifyEmailElement>;
            "sqm-program-menu": LocalJSX.SqmProgramMenu & JSXBase.HTMLAttributes<HTMLSqmProgramMenuElement>;
            "sqm-referral-table": LocalJSX.SqmReferralTable & JSXBase.HTMLAttributes<HTMLSqmReferralTableElement>;
            "sqm-referral-table-cell": LocalJSX.SqmReferralTableCell & JSXBase.HTMLAttributes<HTMLSqmReferralTableCellElement>;
            "sqm-referral-table-column": LocalJSX.SqmReferralTableColumn & JSXBase.HTMLAttributes<HTMLSqmReferralTableColumnElement>;
            "sqm-referral-table-date-cell": LocalJSX.SqmReferralTableDateCell & JSXBase.HTMLAttributes<HTMLSqmReferralTableDateCellElement>;
            "sqm-referral-table-date-column": LocalJSX.SqmReferralTableDateColumn & JSXBase.HTMLAttributes<HTMLSqmReferralTableDateColumnElement>;
            "sqm-referral-table-rewards-cell": LocalJSX.SqmReferralTableRewardsCell & JSXBase.HTMLAttributes<HTMLSqmReferralTableRewardsCellElement>;
            "sqm-referral-table-rewards-column": LocalJSX.SqmReferralTableRewardsColumn & JSXBase.HTMLAttributes<HTMLSqmReferralTableRewardsColumnElement>;
            "sqm-referral-table-status-cell": LocalJSX.SqmReferralTableStatusCell & JSXBase.HTMLAttributes<HTMLSqmReferralTableStatusCellElement>;
            "sqm-referral-table-status-column": LocalJSX.SqmReferralTableStatusColumn & JSXBase.HTMLAttributes<HTMLSqmReferralTableStatusColumnElement>;
            "sqm-referral-table-user-cell": LocalJSX.SqmReferralTableUserCell & JSXBase.HTMLAttributes<HTMLSqmReferralTableUserCellElement>;
            "sqm-referral-table-user-column": LocalJSX.SqmReferralTableUserColumn & JSXBase.HTMLAttributes<HTMLSqmReferralTableUserColumnElement>;
            "sqm-route": LocalJSX.SqmRoute & JSXBase.HTMLAttributes<HTMLSqmRouteElement>;
            "sqm-router": LocalJSX.SqmRouter & JSXBase.HTMLAttributes<HTMLSqmRouterElement>;
            "sqm-share-button": LocalJSX.SqmShareButton & JSXBase.HTMLAttributes<HTMLSqmShareButtonElement>;
            "sqm-share-code": LocalJSX.SqmShareCode & JSXBase.HTMLAttributes<HTMLSqmShareCodeElement>;
            "sqm-share-link": LocalJSX.SqmShareLink & JSXBase.HTMLAttributes<HTMLSqmShareLinkElement>;
            "sqm-stat-container": LocalJSX.SqmStatContainer & JSXBase.HTMLAttributes<HTMLSqmStatContainerElement>;
            "sqm-stencilbook": LocalJSX.SqmStencilbook & JSXBase.HTMLAttributes<HTMLSqmStencilbookElement>;
            "sqm-table-cell": LocalJSX.SqmTableCell & JSXBase.HTMLAttributes<HTMLSqmTableCellElement>;
            "sqm-table-row": LocalJSX.SqmTableRow & JSXBase.HTMLAttributes<HTMLSqmTableRowElement>;
            "sqm-text": LocalJSX.SqmText & JSXBase.HTMLAttributes<HTMLSqmTextElement>;
            "sqm-text-span": LocalJSX.SqmTextSpan & JSXBase.HTMLAttributes<HTMLSqmTextSpanElement>;
            "sqm-titled-section": LocalJSX.SqmTitledSection & JSXBase.HTMLAttributes<HTMLSqmTitledSectionElement>;
            "sqm-user-name": LocalJSX.SqmUserName & JSXBase.HTMLAttributes<HTMLSqmUserNameElement>;
        }
    }
}
