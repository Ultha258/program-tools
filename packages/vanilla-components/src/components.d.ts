/**
 * This is an autogenerated file created by the Stencil build process.
 * It contains typing information for all components that exist in this project
 * and imports for stencil collections that might be configured in your stencil.config.js file
 */


import {
  CopyLinkButton as CopyLinkButton
} from './components/copy-link-button/copy-link-button';

declare global {
  interface HTMLCopyLinkButtonElement extends CopyLinkButton, HTMLElement {
  }
  var HTMLCopyLinkButtonElement: {
    prototype: HTMLCopyLinkButtonElement;
    new (): HTMLCopyLinkButtonElement;
  };
  interface HTMLElementTagNameMap {
    "copy-link-button": HTMLCopyLinkButtonElement;
  }
  interface ElementTagNameMap {
    "copy-link-button": HTMLCopyLinkButtonElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      "copy-link-button": JSXElements.CopyLinkButtonAttributes;
    }
  }
  namespace JSXElements {
    export interface CopyLinkButtonAttributes extends HTMLAttributes {
      shareLink?: string;
    }
  }
}


import {
  EmailShareButton as EmailShareButton
} from './components/email-share-button/email-share-button';

declare global {
  interface HTMLEmailShareButtonElement extends EmailShareButton, HTMLElement {
  }
  var HTMLEmailShareButtonElement: {
    prototype: HTMLEmailShareButtonElement;
    new (): HTMLEmailShareButtonElement;
  };
  interface HTMLElementTagNameMap {
    "email-share-button": HTMLEmailShareButtonElement;
  }
  interface ElementTagNameMap {
    "email-share-button": HTMLEmailShareButtonElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      "email-share-button": JSXElements.EmailShareButtonAttributes;
    }
  }
  namespace JSXElements {
    export interface EmailShareButtonAttributes extends HTMLAttributes {
      backgroundColor?: string;
      borderColor?: string;
      emailBody?: string;
      emailSubject?: string;
      text?: string;
      textColor?: string;
    }
  }
}


import {
  FacebookShareButton as FacebookShareButton
} from './components/facebook-share-button/facebook-share-button';

declare global {
  interface HTMLFacebookShareButtonElement extends FacebookShareButton, HTMLElement {
  }
  var HTMLFacebookShareButtonElement: {
    prototype: HTMLFacebookShareButtonElement;
    new (): HTMLFacebookShareButtonElement;
  };
  interface HTMLElementTagNameMap {
    "facebook-share-button": HTMLFacebookShareButtonElement;
  }
  interface ElementTagNameMap {
    "facebook-share-button": HTMLFacebookShareButtonElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      "facebook-share-button": JSXElements.FacebookShareButtonAttributes;
    }
  }
  namespace JSXElements {
    export interface FacebookShareButtonAttributes extends HTMLAttributes {
      backgroundColor?: string;
      borderColor?: string;
      text?: string;
      textColor?: string;
    }
  }
}


import {
  MyApp as MyApp
} from './components/my-app/my-app';

declare global {
  interface HTMLMyAppElement extends MyApp, HTMLElement {
  }
  var HTMLMyAppElement: {
    prototype: HTMLMyAppElement;
    new (): HTMLMyAppElement;
  };
  interface HTMLElementTagNameMap {
    "my-app": HTMLMyAppElement;
  }
  interface ElementTagNameMap {
    "my-app": HTMLMyAppElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      "my-app": JSXElements.MyAppAttributes;
    }
  }
  namespace JSXElements {
    export interface MyAppAttributes extends HTMLAttributes {
      user?: string;
    }
  }
}


import {
  ReferralList as ReferralList
} from './components/referral-list/referral-list';

declare global {
  interface HTMLReferralListElement extends ReferralList, HTMLElement {
  }
  var HTMLReferralListElement: {
    prototype: HTMLReferralListElement;
    new (): HTMLReferralListElement;
  };
  interface HTMLElementTagNameMap {
    "referral-list": HTMLReferralListElement;
  }
  interface ElementTagNameMap {
    "referral-list": HTMLReferralListElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      "referral-list": JSXElements.ReferralListAttributes;
    }
  }
  namespace JSXElements {
    export interface ReferralListAttributes extends HTMLAttributes {
      emptyText?: string;
    }
  }
}


import {
  StatsComponent as StatsComponent
} from './components/stats-component/stats-component';

declare global {
  interface HTMLStatsComponentElement extends StatsComponent, HTMLElement {
  }
  var HTMLStatsComponentElement: {
    prototype: HTMLStatsComponentElement;
    new (): HTMLStatsComponentElement;
  };
  interface HTMLElementTagNameMap {
    "stats-component": HTMLStatsComponentElement;
  }
  interface ElementTagNameMap {
    "stats-component": HTMLStatsComponentElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      "stats-component": JSXElements.StatsComponentAttributes;
    }
  }
  namespace JSXElements {
    export interface StatsComponentAttributes extends HTMLAttributes {
      text?: string;
    }
  }
}


import {
  TextComponent as TextComponent
} from './components/text-component/text-component';

declare global {
  interface HTMLTextComponentElement extends TextComponent, HTMLElement {
  }
  var HTMLTextComponentElement: {
    prototype: HTMLTextComponentElement;
    new (): HTMLTextComponentElement;
  };
  interface HTMLElementTagNameMap {
    "text-component": HTMLTextComponentElement;
  }
  interface ElementTagNameMap {
    "text-component": HTMLTextComponentElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      "text-component": JSXElements.TextComponentAttributes;
    }
  }
  namespace JSXElements {
    export interface TextComponentAttributes extends HTMLAttributes {
      fontSize?: string;
      text?: string;
      textAlign?: string;
    }
  }
}

declare global { namespace JSX { interface StencilJSX {} } }
