/**
 * This is an autogenerated file created by the Stencil build process.
 * It contains typing information for all components that exist in this project
 * and imports for stencil collections that might be configured in your stencil.config.js file
 */


import {
  CopyLinkButton as CopyLinkButton
} from './components/copy-link-button/copy-link-button';

declare global {
  interface HTMLCopyLinkButtonElement extends CopyLinkButton, HTMLElement {
  }
  var HTMLCopyLinkButtonElement: {
    prototype: HTMLCopyLinkButtonElement;
    new (): HTMLCopyLinkButtonElement;
  };
  interface HTMLElementTagNameMap {
    "copy-link-button": HTMLCopyLinkButtonElement;
  }
  interface ElementTagNameMap {
    "copy-link-button": HTMLCopyLinkButtonElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      "copy-link-button": JSXElements.CopyLinkButtonAttributes;
    }
  }
  namespace JSXElements {
    export interface CopyLinkButtonAttributes extends HTMLAttributes {
      text?: string;
    }
  }
}


import {
  EmailShareButton as EmailShareButton
} from './components/email-share-button/email-share-button';

declare global {
  interface HTMLEmailShareButtonElement extends EmailShareButton, HTMLElement {
  }
  var HTMLEmailShareButtonElement: {
    prototype: HTMLEmailShareButtonElement;
    new (): HTMLEmailShareButtonElement;
  };
  interface HTMLElementTagNameMap {
    "email-share-button": HTMLEmailShareButtonElement;
  }
  interface ElementTagNameMap {
    "email-share-button": HTMLEmailShareButtonElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      "email-share-button": JSXElements.EmailShareButtonAttributes;
    }
  }
  namespace JSXElements {
    export interface EmailShareButtonAttributes extends HTMLAttributes {
      backgroundColor?: string;
      borderColor?: string;
      emailBody?: string;
      emailSubject?: string;
      text?: string;
      textColor?: string;
    }
  }
}


import {
  FacebookShareButton as FacebookShareButton
} from './components/facebook-share-button/facebook-share-button';

declare global {
  interface HTMLFacebookShareButtonElement extends FacebookShareButton, HTMLElement {
  }
  var HTMLFacebookShareButtonElement: {
    prototype: HTMLFacebookShareButtonElement;
    new (): HTMLFacebookShareButtonElement;
  };
  interface HTMLElementTagNameMap {
    "facebook-share-button": HTMLFacebookShareButtonElement;
  }
  interface ElementTagNameMap {
    "facebook-share-button": HTMLFacebookShareButtonElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      "facebook-share-button": JSXElements.FacebookShareButtonAttributes;
    }
  }
  namespace JSXElements {
    export interface FacebookShareButtonAttributes extends HTMLAttributes {
      backgroundColor?: string;
      borderColor?: string;
      text?: string;
      textColor?: string;
    }
  }
}


import {
  StatsComponent as RewardsActions
} from './components/rewards-actions/rewards-actions';

declare global {
  interface HTMLRewardsActionsElement extends RewardsActions, HTMLElement {
  }
  var HTMLRewardsActionsElement: {
    prototype: HTMLRewardsActionsElement;
    new (): HTMLRewardsActionsElement;
  };
  interface HTMLElementTagNameMap {
    "rewards-actions": HTMLRewardsActionsElement;
  }
  interface ElementTagNameMap {
    "rewards-actions": HTMLRewardsActionsElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      "rewards-actions": JSXElements.RewardsActionsAttributes;
    }
  }
  namespace JSXElements {
    export interface RewardsActionsAttributes extends HTMLAttributes {
      hideText?: string;
      nextText?: string;
      previousText?: string;
    }
  }
}


import {
  RewardsList as RewardsList
} from './components/rewards-list/rewards-list';

declare global {
  interface HTMLRewardsListElement extends RewardsList, HTMLElement {
  }
  var HTMLRewardsListElement: {
    prototype: HTMLRewardsListElement;
    new (): HTMLRewardsListElement;
  };
  interface HTMLElementTagNameMap {
    "rewards-list": HTMLRewardsListElement;
  }
  interface ElementTagNameMap {
    "rewards-list": HTMLRewardsListElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      "rewards-list": JSXElements.RewardsListAttributes;
    }
  }
  namespace JSXElements {
    export interface RewardsListAttributes extends HTMLAttributes {
      dateFormatting?: string;
      showReferrer?: boolean;
      userIsReferred?: boolean;
    }
  }
}


import {
  ShareButtonContainer as ShareButtonContainer
} from './components/share-button-container/share-button-container';

declare global {
  interface HTMLShareButtonContainerElement extends ShareButtonContainer, HTMLElement {
  }
  var HTMLShareButtonContainerElement: {
    prototype: HTMLShareButtonContainerElement;
    new (): HTMLShareButtonContainerElement;
  };
  interface HTMLElementTagNameMap {
    "share-button-container": HTMLShareButtonContainerElement;
  }
  interface ElementTagNameMap {
    "share-button-container": HTMLShareButtonContainerElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      "share-button-container": JSXElements.ShareButtonContainerAttributes;
    }
  }
  namespace JSXElements {
    export interface ShareButtonContainerAttributes extends HTMLAttributes {
      maxWidth?: string;
    }
  }
}


import {
  SmsShareButton as SmsShareButton
} from './components/sms-share-button/sms-share-button';

declare global {
  interface HTMLSmsShareButtonElement extends SmsShareButton, HTMLElement {
  }
  var HTMLSmsShareButtonElement: {
    prototype: HTMLSmsShareButtonElement;
    new (): HTMLSmsShareButtonElement;
  };
  interface HTMLElementTagNameMap {
    "sms-share-button": HTMLSmsShareButtonElement;
  }
  interface ElementTagNameMap {
    "sms-share-button": HTMLSmsShareButtonElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      "sms-share-button": JSXElements.SmsShareButtonAttributes;
    }
  }
  namespace JSXElements {
    export interface SmsShareButtonAttributes extends HTMLAttributes {
      backgroundColor?: string;
      borderColor?: string;
      displayRule?: string;
      shareBody?: string;
      text?: string;
      textColor?: string;
    }
  }
}


import {
  StatsComponent as StatsComponent
} from './components/stats-component/stats-component';

declare global {
  interface HTMLStatsComponentElement extends StatsComponent, HTMLElement {
  }
  var HTMLStatsComponentElement: {
    prototype: HTMLStatsComponentElement;
    new (): HTMLStatsComponentElement;
  };
  interface HTMLElementTagNameMap {
    "stats-component": HTMLStatsComponentElement;
  }
  interface ElementTagNameMap {
    "stats-component": HTMLStatsComponentElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      "stats-component": JSXElements.StatsComponentAttributes;
    }
  }
  namespace JSXElements {
    export interface StatsComponentAttributes extends HTMLAttributes {
      friendsReferred?: string;
      rewardsEarned?: string;
      rewardsPending?: string;
      text?: string;
    }
  }
}


import {
  TextComponent as TextComponent
} from './components/text-component/text-component';

declare global {
  interface HTMLTextComponentElement extends TextComponent, HTMLElement {
  }
  var HTMLTextComponentElement: {
    prototype: HTMLTextComponentElement;
    new (): HTMLTextComponentElement;
  };
  interface HTMLElementTagNameMap {
    "text-component": HTMLTextComponentElement;
  }
  interface ElementTagNameMap {
    "text-component": HTMLTextComponentElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      "text-component": JSXElements.TextComponentAttributes;
    }
  }
  namespace JSXElements {
    export interface TextComponentAttributes extends HTMLAttributes {
      fontSize?: string;
      text?: string;
      textAlign?: string;
    }
  }
}


import {
  TwitterShareButton as TwitterShareButton
} from './components/twitter-share-button/twitter-share-button';

declare global {
  interface HTMLTwitterShareButtonElement extends TwitterShareButton, HTMLElement {
  }
  var HTMLTwitterShareButtonElement: {
    prototype: HTMLTwitterShareButtonElement;
    new (): HTMLTwitterShareButtonElement;
  };
  interface HTMLElementTagNameMap {
    "twitter-share-button": HTMLTwitterShareButtonElement;
  }
  interface ElementTagNameMap {
    "twitter-share-button": HTMLTwitterShareButtonElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      "twitter-share-button": JSXElements.TwitterShareButtonAttributes;
    }
  }
  namespace JSXElements {
    export interface TwitterShareButtonAttributes extends HTMLAttributes {
      backgroundColor?: string;
      borderColor?: string;
      text?: string;
      textColor?: string;
      twMessage?: string;
    }
  }
}


import {
  SmsShareButton as WhatsappShareButton
} from './components/whatsapp-share-button/whatsapp-share-button';

declare global {
  interface HTMLWhatsappShareButtonElement extends WhatsappShareButton, HTMLElement {
  }
  var HTMLWhatsappShareButtonElement: {
    prototype: HTMLWhatsappShareButtonElement;
    new (): HTMLWhatsappShareButtonElement;
  };
  interface HTMLElementTagNameMap {
    "whatsapp-share-button": HTMLWhatsappShareButtonElement;
  }
  interface ElementTagNameMap {
    "whatsapp-share-button": HTMLWhatsappShareButtonElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      "whatsapp-share-button": JSXElements.WhatsappShareButtonAttributes;
    }
  }
  namespace JSXElements {
    export interface WhatsappShareButtonAttributes extends HTMLAttributes {
      backgroundColor?: string;
      borderColor?: string;
      displayRule?: string;
      shareBody?: string;
      text?: string;
      textColor?: string;
    }
  }
}

declare global { namespace JSX { interface StencilJSX {} } }
